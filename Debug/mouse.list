
mouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000066b4  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800684c  0800684c  0001684c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068a4  080068a4  0002011c  2**0
                  CONTENTS
  4 .ARM          00000008  080068a4  080068a4  000168a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068ac  080068ac  0002011c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068ac  080068ac  000168ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068b0  080068b0  000168b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000011c  20000000  080068b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a2c  2000011c  080069d0  0002011c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  080069d0  00020b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002011c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d001  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026af  00000000  00000000  0002d14d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002f800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009a8  00000000  00000000  000302d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017ce6  00000000  00000000  00030c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def9  00000000  00000000  0004895e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086bea  00000000  00000000  00056857  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd441  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002adc  00000000  00000000  000dd494  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000011c 	.word	0x2000011c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006834 	.word	0x08006834

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000120 	.word	0x20000120
 80001d4:	08006834 	.word	0x08006834

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <getPointerData>:
/* USER CODE BEGIN 0 */
uint8_t x=0;
uint8_t y=0;
uint8_t click_report[REPORT_SIZE] = {0};
void getPointerData(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_0)==0)
 80004e0:	2101      	movs	r1, #1
 80004e2:	4829      	ldr	r0, [pc, #164]	; (8000588 <getPointerData+0xac>)
 80004e4:	f000 fce0 	bl	8000ea8 <HAL_GPIO_ReadPin>
 80004e8:	4603      	mov	r3, r0
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d108      	bne.n	8000500 <getPointerData+0x24>
	{
		++x;
 80004ee:	4b27      	ldr	r3, [pc, #156]	; (800058c <getPointerData+0xb0>)
 80004f0:	781b      	ldrb	r3, [r3, #0]
 80004f2:	3301      	adds	r3, #1
 80004f4:	b2da      	uxtb	r2, r3
 80004f6:	4b25      	ldr	r3, [pc, #148]	; (800058c <getPointerData+0xb0>)
 80004f8:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 80004fa:	2064      	movs	r0, #100	; 0x64
 80004fc:	f000 fa1a 	bl	8000934 <HAL_Delay>
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_1)==0)
 8000500:	2102      	movs	r1, #2
 8000502:	4821      	ldr	r0, [pc, #132]	; (8000588 <getPointerData+0xac>)
 8000504:	f000 fcd0 	bl	8000ea8 <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	2b00      	cmp	r3, #0
 800050c:	d108      	bne.n	8000520 <getPointerData+0x44>
	{
		--x;
 800050e:	4b1f      	ldr	r3, [pc, #124]	; (800058c <getPointerData+0xb0>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	3b01      	subs	r3, #1
 8000514:	b2da      	uxtb	r2, r3
 8000516:	4b1d      	ldr	r3, [pc, #116]	; (800058c <getPointerData+0xb0>)
 8000518:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800051a:	2064      	movs	r0, #100	; 0x64
 800051c:	f000 fa0a 	bl	8000934 <HAL_Delay>
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)==0)
 8000520:	2104      	movs	r1, #4
 8000522:	4819      	ldr	r0, [pc, #100]	; (8000588 <getPointerData+0xac>)
 8000524:	f000 fcc0 	bl	8000ea8 <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	2b00      	cmp	r3, #0
 800052c:	d108      	bne.n	8000540 <getPointerData+0x64>
	{
		++y;
 800052e:	4b18      	ldr	r3, [pc, #96]	; (8000590 <getPointerData+0xb4>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	3301      	adds	r3, #1
 8000534:	b2da      	uxtb	r2, r3
 8000536:	4b16      	ldr	r3, [pc, #88]	; (8000590 <getPointerData+0xb4>)
 8000538:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800053a:	2064      	movs	r0, #100	; 0x64
 800053c:	f000 f9fa 	bl	8000934 <HAL_Delay>
	}
	if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==0)
 8000540:	2108      	movs	r1, #8
 8000542:	4811      	ldr	r0, [pc, #68]	; (8000588 <getPointerData+0xac>)
 8000544:	f000 fcb0 	bl	8000ea8 <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	2b00      	cmp	r3, #0
 800054c:	d108      	bne.n	8000560 <getPointerData+0x84>
	{
		--y;
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <getPointerData+0xb4>)
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	3b01      	subs	r3, #1
 8000554:	b2da      	uxtb	r2, r3
 8000556:	4b0e      	ldr	r3, [pc, #56]	; (8000590 <getPointerData+0xb4>)
 8000558:	701a      	strb	r2, [r3, #0]
		HAL_Delay(100);
 800055a:	2064      	movs	r0, #100	; 0x64
 800055c:	f000 f9ea 	bl	8000934 <HAL_Delay>
	}
	click_report[0] = 0; //click
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <getPointerData+0xb8>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
	click_report[1] = x;			//x
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <getPointerData+0xb0>)
 8000568:	781a      	ldrb	r2, [r3, #0]
 800056a:	4b0a      	ldr	r3, [pc, #40]	; (8000594 <getPointerData+0xb8>)
 800056c:	705a      	strb	r2, [r3, #1]
	click_report[2] = y;			//y
 800056e:	4b08      	ldr	r3, [pc, #32]	; (8000590 <getPointerData+0xb4>)
 8000570:	781a      	ldrb	r2, [r3, #0]
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <getPointerData+0xb8>)
 8000574:	709a      	strb	r2, [r3, #2]
	click_report[3] = 0;			//wheel
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <getPointerData+0xb8>)
 8000578:	2200      	movs	r2, #0
 800057a:	70da      	strb	r2, [r3, #3]
	click_report[4] = 0;			//motion wakeup
 800057c:	4b05      	ldr	r3, [pc, #20]	; (8000594 <getPointerData+0xb8>)
 800057e:	2200      	movs	r2, #0
 8000580:	711a      	strb	r2, [r3, #4]
}
 8000582:	bf00      	nop
 8000584:	bd80      	pop	{r7, pc}
 8000586:	bf00      	nop
 8000588:	40020000 	.word	0x40020000
 800058c:	20000138 	.word	0x20000138
 8000590:	20000139 	.word	0x20000139
 8000594:	2000013c 	.word	0x2000013c

08000598 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800059c:	f000 f958 	bl	8000850 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a0:	f000 f814 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a4:	f000 f87a 	bl	800069c <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 80005a8:	f005 fcea 	bl	8005f80 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


HAL_Delay(100);
 80005ac:	2064      	movs	r0, #100	; 0x64
 80005ae:	f000 f9c1 	bl	8000934 <HAL_Delay>
getPointerData();
 80005b2:	f7ff ff93 	bl	80004dc <getPointerData>
USBD_HID_SendReport(&hUsbDeviceFS,click_report,5);
 80005b6:	2205      	movs	r2, #5
 80005b8:	4902      	ldr	r1, [pc, #8]	; (80005c4 <main+0x2c>)
 80005ba:	4803      	ldr	r0, [pc, #12]	; (80005c8 <main+0x30>)
 80005bc:	f004 f966 	bl	800488c <USBD_HID_SendReport>
HAL_Delay(100);
 80005c0:	e7f4      	b.n	80005ac <main+0x14>
 80005c2:	bf00      	nop
 80005c4:	2000013c 	.word	0x2000013c
 80005c8:	2000014c 	.word	0x2000014c

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b094      	sub	sp, #80	; 0x50
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0320 	add.w	r3, r7, #32
 80005d6:	2230      	movs	r2, #48	; 0x30
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f006 f922 	bl	8006824 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	f107 030c 	add.w	r3, r7, #12
 80005e4:	2200      	movs	r2, #0
 80005e6:	601a      	str	r2, [r3, #0]
 80005e8:	605a      	str	r2, [r3, #4]
 80005ea:	609a      	str	r2, [r3, #8]
 80005ec:	60da      	str	r2, [r3, #12]
 80005ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005f0:	2300      	movs	r3, #0
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	4b27      	ldr	r3, [pc, #156]	; (8000694 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <SystemClock_Config+0xc8>)
 80005fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fe:	6413      	str	r3, [r2, #64]	; 0x40
 8000600:	4b24      	ldr	r3, [pc, #144]	; (8000694 <SystemClock_Config+0xc8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000608:	60bb      	str	r3, [r7, #8]
 800060a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800060c:	2300      	movs	r3, #0
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	4b21      	ldr	r3, [pc, #132]	; (8000698 <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a20      	ldr	r2, [pc, #128]	; (8000698 <SystemClock_Config+0xcc>)
 8000616:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800061a:	6013      	str	r3, [r2, #0]
 800061c:	4b1e      	ldr	r3, [pc, #120]	; (8000698 <SystemClock_Config+0xcc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000624:	607b      	str	r3, [r7, #4]
 8000626:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000628:	2301      	movs	r3, #1
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800062c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000632:	2302      	movs	r3, #2
 8000634:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000636:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800063a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800063c:	2304      	movs	r3, #4
 800063e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000640:	2348      	movs	r3, #72	; 0x48
 8000642:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000644:	2302      	movs	r3, #2
 8000646:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000648:	2303      	movs	r3, #3
 800064a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	4618      	mov	r0, r3
 8000652:	f001 fea7 	bl	80023a4 <HAL_RCC_OscConfig>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800065c:	f000 f85a 	bl	8000714 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000660:	230f      	movs	r3, #15
 8000662:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000664:	2302      	movs	r3, #2
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800066c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000670:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000672:	2300      	movs	r3, #0
 8000674:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000676:	f107 030c 	add.w	r3, r7, #12
 800067a:	2102      	movs	r1, #2
 800067c:	4618      	mov	r0, r3
 800067e:	f002 f909 	bl	8002894 <HAL_RCC_ClockConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000688:	f000 f844 	bl	8000714 <Error_Handler>
  }
}
 800068c:	bf00      	nop
 800068e:	3750      	adds	r7, #80	; 0x50
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40023800 	.word	0x40023800
 8000698:	40007000 	.word	0x40007000

0800069c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a2:	f107 030c 	add.w	r3, r7, #12
 80006a6:	2200      	movs	r2, #0
 80006a8:	601a      	str	r2, [r3, #0]
 80006aa:	605a      	str	r2, [r3, #4]
 80006ac:	609a      	str	r2, [r3, #8]
 80006ae:	60da      	str	r2, [r3, #12]
 80006b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	60bb      	str	r3, [r7, #8]
 80006b6:	4b15      	ldr	r3, [pc, #84]	; (800070c <MX_GPIO_Init+0x70>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <MX_GPIO_Init+0x70>)
 80006bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b12      	ldr	r3, [pc, #72]	; (800070c <MX_GPIO_Init+0x70>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ca:	60bb      	str	r3, [r7, #8]
 80006cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ce:	2300      	movs	r3, #0
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	4b0e      	ldr	r3, [pc, #56]	; (800070c <MX_GPIO_Init+0x70>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0d      	ldr	r2, [pc, #52]	; (800070c <MX_GPIO_Init+0x70>)
 80006d8:	f043 0301 	orr.w	r3, r3, #1
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <MX_GPIO_Init+0x70>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0301 	and.w	r3, r3, #1
 80006e6:	607b      	str	r3, [r7, #4]
 80006e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006ea:	230f      	movs	r3, #15
 80006ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ee:	2300      	movs	r3, #0
 80006f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006f2:	2301      	movs	r3, #1
 80006f4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	4619      	mov	r1, r3
 80006fc:	4804      	ldr	r0, [pc, #16]	; (8000710 <MX_GPIO_Init+0x74>)
 80006fe:	f000 fa4f 	bl	8000ba0 <HAL_GPIO_Init>

}
 8000702:	bf00      	nop
 8000704:	3720      	adds	r7, #32
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40023800 	.word	0x40023800
 8000710:	40020000 	.word	0x40020000

08000714 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000718:	b672      	cpsid	i
}
 800071a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800071c:	e7fe      	b.n	800071c <Error_Handler+0x8>
	...

08000720 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b10      	ldr	r3, [pc, #64]	; (800076c <HAL_MspInit+0x4c>)
 800072c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800072e:	4a0f      	ldr	r2, [pc, #60]	; (800076c <HAL_MspInit+0x4c>)
 8000730:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000734:	6453      	str	r3, [r2, #68]	; 0x44
 8000736:	4b0d      	ldr	r3, [pc, #52]	; (800076c <HAL_MspInit+0x4c>)
 8000738:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800073a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000742:	2300      	movs	r3, #0
 8000744:	603b      	str	r3, [r7, #0]
 8000746:	4b09      	ldr	r3, [pc, #36]	; (800076c <HAL_MspInit+0x4c>)
 8000748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074a:	4a08      	ldr	r2, [pc, #32]	; (800076c <HAL_MspInit+0x4c>)
 800074c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000750:	6413      	str	r3, [r2, #64]	; 0x40
 8000752:	4b06      	ldr	r3, [pc, #24]	; (800076c <HAL_MspInit+0x4c>)
 8000754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000756:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800075a:	603b      	str	r3, [r7, #0]
 800075c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800075e:	2007      	movs	r0, #7
 8000760:	f000 f9dc 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000764:	bf00      	nop
 8000766:	3708      	adds	r7, #8
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800

08000770 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000770:	b480      	push	{r7}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000774:	e7fe      	b.n	8000774 <NMI_Handler+0x4>

08000776 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000776:	b480      	push	{r7}
 8000778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800077a:	e7fe      	b.n	800077a <HardFault_Handler+0x4>

0800077c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000780:	e7fe      	b.n	8000780 <MemManage_Handler+0x4>

08000782 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000786:	e7fe      	b.n	8000786 <BusFault_Handler+0x4>

08000788 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800078c:	e7fe      	b.n	800078c <UsageFault_Handler+0x4>

0800078e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800078e:	b480      	push	{r7}
 8000790:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000792:	bf00      	nop
 8000794:	46bd      	mov	sp, r7
 8000796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079a:	4770      	bx	lr

0800079c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a8:	4770      	bx	lr

080007aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007aa:	b480      	push	{r7}
 80007ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007ae:	bf00      	nop
 80007b0:	46bd      	mov	sp, r7
 80007b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b6:	4770      	bx	lr

080007b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007bc:	f000 f89a 	bl	80008f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c0:	bf00      	nop
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80007c8:	4802      	ldr	r0, [pc, #8]	; (80007d4 <OTG_FS_IRQHandler+0x10>)
 80007ca:	f000 fcd5 	bl	8001178 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	20000628 	.word	0x20000628

080007d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007dc:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <SystemInit+0x20>)
 80007de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e2:	4a05      	ldr	r2, [pc, #20]	; (80007f8 <SystemInit+0x20>)
 80007e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	e000ed00 	.word	0xe000ed00

080007fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80007fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000834 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000800:	480d      	ldr	r0, [pc, #52]	; (8000838 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000802:	490e      	ldr	r1, [pc, #56]	; (800083c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000804:	4a0e      	ldr	r2, [pc, #56]	; (8000840 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000806:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000808:	e002      	b.n	8000810 <LoopCopyDataInit>

0800080a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800080c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800080e:	3304      	adds	r3, #4

08000810 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000810:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000812:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000814:	d3f9      	bcc.n	800080a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000816:	4a0b      	ldr	r2, [pc, #44]	; (8000844 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000818:	4c0b      	ldr	r4, [pc, #44]	; (8000848 <LoopFillZerobss+0x26>)
  movs r3, #0
 800081a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800081c:	e001      	b.n	8000822 <LoopFillZerobss>

0800081e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800081e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000820:	3204      	adds	r2, #4

08000822 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000822:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000824:	d3fb      	bcc.n	800081e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000826:	f7ff ffd7 	bl	80007d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082a:	f005 ffd7 	bl	80067dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800082e:	f7ff feb3 	bl	8000598 <main>
  bx  lr    
 8000832:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000834:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000838:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800083c:	2000011c 	.word	0x2000011c
  ldr r2, =_sidata
 8000840:	080068b4 	.word	0x080068b4
  ldr r2, =_sbss
 8000844:	2000011c 	.word	0x2000011c
  ldr r4, =_ebss
 8000848:	20000b48 	.word	0x20000b48

0800084c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800084c:	e7fe      	b.n	800084c <ADC_IRQHandler>
	...

08000850 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000854:	4b0e      	ldr	r3, [pc, #56]	; (8000890 <HAL_Init+0x40>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a0d      	ldr	r2, [pc, #52]	; (8000890 <HAL_Init+0x40>)
 800085a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800085e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000860:	4b0b      	ldr	r3, [pc, #44]	; (8000890 <HAL_Init+0x40>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	4a0a      	ldr	r2, [pc, #40]	; (8000890 <HAL_Init+0x40>)
 8000866:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800086c:	4b08      	ldr	r3, [pc, #32]	; (8000890 <HAL_Init+0x40>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a07      	ldr	r2, [pc, #28]	; (8000890 <HAL_Init+0x40>)
 8000872:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000876:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000878:	2003      	movs	r0, #3
 800087a:	f000 f94f 	bl	8000b1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800087e:	2000      	movs	r0, #0
 8000880:	f000 f808 	bl	8000894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000884:	f7ff ff4c 	bl	8000720 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000888:	2300      	movs	r3, #0
}
 800088a:	4618      	mov	r0, r3
 800088c:	bd80      	pop	{r7, pc}
 800088e:	bf00      	nop
 8000890:	40023c00 	.word	0x40023c00

08000894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800089c:	4b12      	ldr	r3, [pc, #72]	; (80008e8 <HAL_InitTick+0x54>)
 800089e:	681a      	ldr	r2, [r3, #0]
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_InitTick+0x58>)
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80008ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80008b2:	4618      	mov	r0, r3
 80008b4:	f000 f967 	bl	8000b86 <HAL_SYSTICK_Config>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d001      	beq.n	80008c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
 80008c0:	e00e      	b.n	80008e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b0f      	cmp	r3, #15
 80008c6:	d80a      	bhi.n	80008de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008c8:	2200      	movs	r2, #0
 80008ca:	6879      	ldr	r1, [r7, #4]
 80008cc:	f04f 30ff 	mov.w	r0, #4294967295
 80008d0:	f000 f92f 	bl	8000b32 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008d4:	4a06      	ldr	r2, [pc, #24]	; (80008f0 <HAL_InitTick+0x5c>)
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80008da:	2300      	movs	r3, #0
 80008dc:	e000      	b.n	80008e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008de:	2301      	movs	r3, #1
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3708      	adds	r7, #8
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20000000 	.word	0x20000000
 80008ec:	20000008 	.word	0x20000008
 80008f0:	20000004 	.word	0x20000004

080008f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008f8:	4b06      	ldr	r3, [pc, #24]	; (8000914 <HAL_IncTick+0x20>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	461a      	mov	r2, r3
 80008fe:	4b06      	ldr	r3, [pc, #24]	; (8000918 <HAL_IncTick+0x24>)
 8000900:	681b      	ldr	r3, [r3, #0]
 8000902:	4413      	add	r3, r2
 8000904:	4a04      	ldr	r2, [pc, #16]	; (8000918 <HAL_IncTick+0x24>)
 8000906:	6013      	str	r3, [r2, #0]
}
 8000908:	bf00      	nop
 800090a:	46bd      	mov	sp, r7
 800090c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000910:	4770      	bx	lr
 8000912:	bf00      	nop
 8000914:	20000008 	.word	0x20000008
 8000918:	20000144 	.word	0x20000144

0800091c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  return uwTick;
 8000920:	4b03      	ldr	r3, [pc, #12]	; (8000930 <HAL_GetTick+0x14>)
 8000922:	681b      	ldr	r3, [r3, #0]
}
 8000924:	4618      	mov	r0, r3
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr
 800092e:	bf00      	nop
 8000930:	20000144 	.word	0x20000144

08000934 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800093c:	f7ff ffee 	bl	800091c <HAL_GetTick>
 8000940:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800094c:	d005      	beq.n	800095a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800094e:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <HAL_Delay+0x44>)
 8000950:	781b      	ldrb	r3, [r3, #0]
 8000952:	461a      	mov	r2, r3
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	4413      	add	r3, r2
 8000958:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800095a:	bf00      	nop
 800095c:	f7ff ffde 	bl	800091c <HAL_GetTick>
 8000960:	4602      	mov	r2, r0
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	1ad3      	subs	r3, r2, r3
 8000966:	68fa      	ldr	r2, [r7, #12]
 8000968:	429a      	cmp	r2, r3
 800096a:	d8f7      	bhi.n	800095c <HAL_Delay+0x28>
  {
  }
}
 800096c:	bf00      	nop
 800096e:	bf00      	nop
 8000970:	3710      	adds	r7, #16
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
 8000976:	bf00      	nop
 8000978:	20000008 	.word	0x20000008

0800097c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	f003 0307 	and.w	r3, r3, #7
 800098a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800098c:	4b0c      	ldr	r3, [pc, #48]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 800098e:	68db      	ldr	r3, [r3, #12]
 8000990:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000992:	68ba      	ldr	r2, [r7, #8]
 8000994:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000998:	4013      	ands	r3, r2
 800099a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009a0:	68bb      	ldr	r3, [r7, #8]
 80009a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ae:	4a04      	ldr	r2, [pc, #16]	; (80009c0 <__NVIC_SetPriorityGrouping+0x44>)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	60d3      	str	r3, [r2, #12]
}
 80009b4:	bf00      	nop
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c8:	4b04      	ldr	r3, [pc, #16]	; (80009dc <__NVIC_GetPriorityGrouping+0x18>)
 80009ca:	68db      	ldr	r3, [r3, #12]
 80009cc:	0a1b      	lsrs	r3, r3, #8
 80009ce:	f003 0307 	and.w	r3, r3, #7
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	4603      	mov	r3, r0
 80009e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	db0b      	blt.n	8000a0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009f2:	79fb      	ldrb	r3, [r7, #7]
 80009f4:	f003 021f 	and.w	r2, r3, #31
 80009f8:	4907      	ldr	r1, [pc, #28]	; (8000a18 <__NVIC_EnableIRQ+0x38>)
 80009fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009fe:	095b      	lsrs	r3, r3, #5
 8000a00:	2001      	movs	r0, #1
 8000a02:	fa00 f202 	lsl.w	r2, r0, r2
 8000a06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	370c      	adds	r7, #12
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000e100 	.word	0xe000e100

08000a1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	4603      	mov	r3, r0
 8000a24:	6039      	str	r1, [r7, #0]
 8000a26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	db0a      	blt.n	8000a46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	b2da      	uxtb	r2, r3
 8000a34:	490c      	ldr	r1, [pc, #48]	; (8000a68 <__NVIC_SetPriority+0x4c>)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	0112      	lsls	r2, r2, #4
 8000a3c:	b2d2      	uxtb	r2, r2
 8000a3e:	440b      	add	r3, r1
 8000a40:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a44:	e00a      	b.n	8000a5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4908      	ldr	r1, [pc, #32]	; (8000a6c <__NVIC_SetPriority+0x50>)
 8000a4c:	79fb      	ldrb	r3, [r7, #7]
 8000a4e:	f003 030f 	and.w	r3, r3, #15
 8000a52:	3b04      	subs	r3, #4
 8000a54:	0112      	lsls	r2, r2, #4
 8000a56:	b2d2      	uxtb	r2, r2
 8000a58:	440b      	add	r3, r1
 8000a5a:	761a      	strb	r2, [r3, #24]
}
 8000a5c:	bf00      	nop
 8000a5e:	370c      	adds	r7, #12
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000e100 	.word	0xe000e100
 8000a6c:	e000ed00 	.word	0xe000ed00

08000a70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a70:	b480      	push	{r7}
 8000a72:	b089      	sub	sp, #36	; 0x24
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	60f8      	str	r0, [r7, #12]
 8000a78:	60b9      	str	r1, [r7, #8]
 8000a7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	f003 0307 	and.w	r3, r3, #7
 8000a82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a84:	69fb      	ldr	r3, [r7, #28]
 8000a86:	f1c3 0307 	rsb	r3, r3, #7
 8000a8a:	2b04      	cmp	r3, #4
 8000a8c:	bf28      	it	cs
 8000a8e:	2304      	movcs	r3, #4
 8000a90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a92:	69fb      	ldr	r3, [r7, #28]
 8000a94:	3304      	adds	r3, #4
 8000a96:	2b06      	cmp	r3, #6
 8000a98:	d902      	bls.n	8000aa0 <NVIC_EncodePriority+0x30>
 8000a9a:	69fb      	ldr	r3, [r7, #28]
 8000a9c:	3b03      	subs	r3, #3
 8000a9e:	e000      	b.n	8000aa2 <NVIC_EncodePriority+0x32>
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aa4:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8000aae:	43da      	mvns	r2, r3
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	697b      	ldr	r3, [r7, #20]
 8000ab6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ab8:	f04f 31ff 	mov.w	r1, #4294967295
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	fa01 f303 	lsl.w	r3, r1, r3
 8000ac2:	43d9      	mvns	r1, r3
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ac8:	4313      	orrs	r3, r2
         );
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3724      	adds	r7, #36	; 0x24
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ae8:	d301      	bcc.n	8000aee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000aea:	2301      	movs	r3, #1
 8000aec:	e00f      	b.n	8000b0e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <SysTick_Config+0x40>)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	3b01      	subs	r3, #1
 8000af4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000af6:	210f      	movs	r1, #15
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	f7ff ff8e 	bl	8000a1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <SysTick_Config+0x40>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b06:	4b04      	ldr	r3, [pc, #16]	; (8000b18 <SysTick_Config+0x40>)
 8000b08:	2207      	movs	r2, #7
 8000b0a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b0c:	2300      	movs	r3, #0
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3708      	adds	r7, #8
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	e000e010 	.word	0xe000e010

08000b1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b24:	6878      	ldr	r0, [r7, #4]
 8000b26:	f7ff ff29 	bl	800097c <__NVIC_SetPriorityGrouping>
}
 8000b2a:	bf00      	nop
 8000b2c:	3708      	adds	r7, #8
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}

08000b32 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b32:	b580      	push	{r7, lr}
 8000b34:	b086      	sub	sp, #24
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	4603      	mov	r3, r0
 8000b3a:	60b9      	str	r1, [r7, #8]
 8000b3c:	607a      	str	r2, [r7, #4]
 8000b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b40:	2300      	movs	r3, #0
 8000b42:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b44:	f7ff ff3e 	bl	80009c4 <__NVIC_GetPriorityGrouping>
 8000b48:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b4a:	687a      	ldr	r2, [r7, #4]
 8000b4c:	68b9      	ldr	r1, [r7, #8]
 8000b4e:	6978      	ldr	r0, [r7, #20]
 8000b50:	f7ff ff8e 	bl	8000a70 <NVIC_EncodePriority>
 8000b54:	4602      	mov	r2, r0
 8000b56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b5a:	4611      	mov	r1, r2
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	f7ff ff5d 	bl	8000a1c <__NVIC_SetPriority>
}
 8000b62:	bf00      	nop
 8000b64:	3718      	adds	r7, #24
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}

08000b6a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b6a:	b580      	push	{r7, lr}
 8000b6c:	b082      	sub	sp, #8
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	4603      	mov	r3, r0
 8000b72:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f7ff ff31 	bl	80009e0 <__NVIC_EnableIRQ>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b082      	sub	sp, #8
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ffa2 	bl	8000ad8 <SysTick_Config>
 8000b94:	4603      	mov	r3, r0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
	...

08000ba0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b089      	sub	sp, #36	; 0x24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
 8000ba8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000baa:	2300      	movs	r3, #0
 8000bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	61fb      	str	r3, [r7, #28]
 8000bba:	e159      	b.n	8000e70 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	69fb      	ldr	r3, [r7, #28]
 8000bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	697a      	ldr	r2, [r7, #20]
 8000bcc:	4013      	ands	r3, r2
 8000bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000bd0:	693a      	ldr	r2, [r7, #16]
 8000bd2:	697b      	ldr	r3, [r7, #20]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	f040 8148 	bne.w	8000e6a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f003 0303 	and.w	r3, r3, #3
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d005      	beq.n	8000bf2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000be6:	683b      	ldr	r3, [r7, #0]
 8000be8:	685b      	ldr	r3, [r3, #4]
 8000bea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000bee:	2b02      	cmp	r3, #2
 8000bf0:	d130      	bne.n	8000c54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000bf8:	69fb      	ldr	r3, [r7, #28]
 8000bfa:	005b      	lsls	r3, r3, #1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000c02:	43db      	mvns	r3, r3
 8000c04:	69ba      	ldr	r2, [r7, #24]
 8000c06:	4013      	ands	r3, r2
 8000c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	68da      	ldr	r2, [r3, #12]
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	005b      	lsls	r3, r3, #1
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	69ba      	ldr	r2, [r7, #24]
 8000c18:	4313      	orrs	r3, r2
 8000c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69ba      	ldr	r2, [r7, #24]
 8000c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	685b      	ldr	r3, [r3, #4]
 8000c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c28:	2201      	movs	r2, #1
 8000c2a:	69fb      	ldr	r3, [r7, #28]
 8000c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c30:	43db      	mvns	r3, r3
 8000c32:	69ba      	ldr	r2, [r7, #24]
 8000c34:	4013      	ands	r3, r2
 8000c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	685b      	ldr	r3, [r3, #4]
 8000c3c:	091b      	lsrs	r3, r3, #4
 8000c3e:	f003 0201 	and.w	r2, r3, #1
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	fa02 f303 	lsl.w	r3, r2, r3
 8000c48:	69ba      	ldr	r2, [r7, #24]
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	69ba      	ldr	r2, [r7, #24]
 8000c52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c54:	683b      	ldr	r3, [r7, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	f003 0303 	and.w	r3, r3, #3
 8000c5c:	2b03      	cmp	r3, #3
 8000c5e:	d017      	beq.n	8000c90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	005b      	lsls	r3, r3, #1
 8000c6a:	2203      	movs	r2, #3
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	43db      	mvns	r3, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4013      	ands	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	689a      	ldr	r2, [r3, #8]
 8000c7c:	69fb      	ldr	r3, [r7, #28]
 8000c7e:	005b      	lsls	r3, r3, #1
 8000c80:	fa02 f303 	lsl.w	r3, r2, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d123      	bne.n	8000ce4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c9c:	69fb      	ldr	r3, [r7, #28]
 8000c9e:	08da      	lsrs	r2, r3, #3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3208      	adds	r2, #8
 8000ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	220f      	movs	r2, #15
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	691a      	ldr	r2, [r3, #16]
 8000cc4:	69fb      	ldr	r3, [r7, #28]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	009b      	lsls	r3, r3, #2
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000cd6:	69fb      	ldr	r3, [r7, #28]
 8000cd8:	08da      	lsrs	r2, r3, #3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	3208      	adds	r2, #8
 8000cde:	69b9      	ldr	r1, [r7, #24]
 8000ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	2203      	movs	r2, #3
 8000cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f003 0203 	and.w	r2, r3, #3
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	f000 80a2 	beq.w	8000e6a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2e:	4a56      	ldr	r2, [pc, #344]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d34:	6453      	str	r3, [r2, #68]	; 0x44
 8000d36:	4b54      	ldr	r3, [pc, #336]	; (8000e88 <HAL_GPIO_Init+0x2e8>)
 8000d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d42:	4a52      	ldr	r2, [pc, #328]	; (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	089b      	lsrs	r3, r3, #2
 8000d48:	3302      	adds	r3, #2
 8000d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d50:	69fb      	ldr	r3, [r7, #28]
 8000d52:	f003 0303 	and.w	r3, r3, #3
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	220f      	movs	r2, #15
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	69ba      	ldr	r2, [r7, #24]
 8000d62:	4013      	ands	r3, r2
 8000d64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a49      	ldr	r2, [pc, #292]	; (8000e90 <HAL_GPIO_Init+0x2f0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d019      	beq.n	8000da2 <HAL_GPIO_Init+0x202>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a48      	ldr	r2, [pc, #288]	; (8000e94 <HAL_GPIO_Init+0x2f4>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d013      	beq.n	8000d9e <HAL_GPIO_Init+0x1fe>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a47      	ldr	r2, [pc, #284]	; (8000e98 <HAL_GPIO_Init+0x2f8>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d00d      	beq.n	8000d9a <HAL_GPIO_Init+0x1fa>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a46      	ldr	r2, [pc, #280]	; (8000e9c <HAL_GPIO_Init+0x2fc>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d007      	beq.n	8000d96 <HAL_GPIO_Init+0x1f6>
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4a45      	ldr	r2, [pc, #276]	; (8000ea0 <HAL_GPIO_Init+0x300>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d101      	bne.n	8000d92 <HAL_GPIO_Init+0x1f2>
 8000d8e:	2304      	movs	r3, #4
 8000d90:	e008      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d92:	2307      	movs	r3, #7
 8000d94:	e006      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d96:	2303      	movs	r3, #3
 8000d98:	e004      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e002      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e000      	b.n	8000da4 <HAL_GPIO_Init+0x204>
 8000da2:	2300      	movs	r3, #0
 8000da4:	69fa      	ldr	r2, [r7, #28]
 8000da6:	f002 0203 	and.w	r2, r2, #3
 8000daa:	0092      	lsls	r2, r2, #2
 8000dac:	4093      	lsls	r3, r2
 8000dae:	69ba      	ldr	r2, [r7, #24]
 8000db0:	4313      	orrs	r3, r2
 8000db2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000db4:	4935      	ldr	r1, [pc, #212]	; (8000e8c <HAL_GPIO_Init+0x2ec>)
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	089b      	lsrs	r3, r3, #2
 8000dba:	3302      	adds	r3, #2
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000dc2:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dc4:	689b      	ldr	r3, [r3, #8]
 8000dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dc8:	693b      	ldr	r3, [r7, #16]
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d003      	beq.n	8000de6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	693b      	ldr	r3, [r7, #16]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000de6:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000de8:	69bb      	ldr	r3, [r7, #24]
 8000dea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000dee:	68db      	ldr	r3, [r3, #12]
 8000df0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000df2:	693b      	ldr	r3, [r7, #16]
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d003      	beq.n	8000e10 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e08:	69ba      	ldr	r2, [r7, #24]
 8000e0a:	693b      	ldr	r3, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e10:	4a24      	ldr	r2, [pc, #144]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e12:	69bb      	ldr	r3, [r7, #24]
 8000e14:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e16:	4b23      	ldr	r3, [pc, #140]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4013      	ands	r3, r2
 8000e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d003      	beq.n	8000e3a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e32:	69ba      	ldr	r2, [r7, #24]
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e3a:	4a1a      	ldr	r2, [pc, #104]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e40:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	43db      	mvns	r3, r3
 8000e4a:	69ba      	ldr	r2, [r7, #24]
 8000e4c:	4013      	ands	r3, r2
 8000e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	685b      	ldr	r3, [r3, #4]
 8000e54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d003      	beq.n	8000e64 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	4313      	orrs	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e64:	4a0f      	ldr	r2, [pc, #60]	; (8000ea4 <HAL_GPIO_Init+0x304>)
 8000e66:	69bb      	ldr	r3, [r7, #24]
 8000e68:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	61fb      	str	r3, [r7, #28]
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	2b0f      	cmp	r3, #15
 8000e74:	f67f aea2 	bls.w	8000bbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e78:	bf00      	nop
 8000e7a:	bf00      	nop
 8000e7c:	3724      	adds	r7, #36	; 0x24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40013800 	.word	0x40013800
 8000e90:	40020000 	.word	0x40020000
 8000e94:	40020400 	.word	0x40020400
 8000e98:	40020800 	.word	0x40020800
 8000e9c:	40020c00 	.word	0x40020c00
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	40013c00 	.word	0x40013c00

08000ea8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	460b      	mov	r3, r1
 8000eb2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	691a      	ldr	r2, [r3, #16]
 8000eb8:	887b      	ldrh	r3, [r7, #2]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d002      	beq.n	8000ec6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	73fb      	strb	r3, [r7, #15]
 8000ec4:	e001      	b.n	8000eca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eca:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3714      	adds	r7, #20
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed6:	4770      	bx	lr

08000ed8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8000ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eda:	b08f      	sub	sp, #60	; 0x3c
 8000edc:	af0a      	add	r7, sp, #40	; 0x28
 8000ede:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d101      	bne.n	8000eea <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e10f      	b.n	800110a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d106      	bne.n	8000f0a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f005 f971 	bl	80061ec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	2203      	movs	r2, #3
 8000f0e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d102      	bne.n	8000f24 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	2200      	movs	r2, #0
 8000f22:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 ffc0 	bl	8002eae <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	687e      	ldr	r6, [r7, #4]
 8000f36:	466d      	mov	r5, sp
 8000f38:	f106 0410 	add.w	r4, r6, #16
 8000f3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000f42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000f44:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000f48:	e885 0003 	stmia.w	r5, {r0, r1}
 8000f4c:	1d33      	adds	r3, r6, #4
 8000f4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000f50:	6838      	ldr	r0, [r7, #0]
 8000f52:	f001 fe97 	bl	8002c84 <USB_CoreInit>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d005      	beq.n	8000f68 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2202      	movs	r2, #2
 8000f60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8000f64:	2301      	movs	r3, #1
 8000f66:	e0d0      	b.n	800110a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2100      	movs	r1, #0
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f001 ffae 	bl	8002ed0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8000f74:	2300      	movs	r3, #0
 8000f76:	73fb      	strb	r3, [r7, #15]
 8000f78:	e04a      	b.n	8001010 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	6879      	ldr	r1, [r7, #4]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	00db      	lsls	r3, r3, #3
 8000f82:	4413      	add	r3, r2
 8000f84:	009b      	lsls	r3, r3, #2
 8000f86:	440b      	add	r3, r1
 8000f88:	333d      	adds	r3, #61	; 0x3d
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8000f8e:	7bfa      	ldrb	r2, [r7, #15]
 8000f90:	6879      	ldr	r1, [r7, #4]
 8000f92:	4613      	mov	r3, r2
 8000f94:	00db      	lsls	r3, r3, #3
 8000f96:	4413      	add	r3, r2
 8000f98:	009b      	lsls	r3, r3, #2
 8000f9a:	440b      	add	r3, r1
 8000f9c:	333c      	adds	r3, #60	; 0x3c
 8000f9e:	7bfa      	ldrb	r2, [r7, #15]
 8000fa0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8000fa2:	7bfa      	ldrb	r2, [r7, #15]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	6879      	ldr	r1, [r7, #4]
 8000faa:	4613      	mov	r3, r2
 8000fac:	00db      	lsls	r3, r3, #3
 8000fae:	4413      	add	r3, r2
 8000fb0:	009b      	lsls	r3, r3, #2
 8000fb2:	440b      	add	r3, r1
 8000fb4:	3344      	adds	r3, #68	; 0x44
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	6879      	ldr	r1, [r7, #4]
 8000fbe:	4613      	mov	r3, r2
 8000fc0:	00db      	lsls	r3, r3, #3
 8000fc2:	4413      	add	r3, r2
 8000fc4:	009b      	lsls	r3, r3, #2
 8000fc6:	440b      	add	r3, r1
 8000fc8:	3340      	adds	r3, #64	; 0x40
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8000fce:	7bfa      	ldrb	r2, [r7, #15]
 8000fd0:	6879      	ldr	r1, [r7, #4]
 8000fd2:	4613      	mov	r3, r2
 8000fd4:	00db      	lsls	r3, r3, #3
 8000fd6:	4413      	add	r3, r2
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	440b      	add	r3, r1
 8000fdc:	3348      	adds	r3, #72	; 0x48
 8000fde:	2200      	movs	r2, #0
 8000fe0:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8000fe2:	7bfa      	ldrb	r2, [r7, #15]
 8000fe4:	6879      	ldr	r1, [r7, #4]
 8000fe6:	4613      	mov	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	4413      	add	r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	440b      	add	r3, r1
 8000ff0:	334c      	adds	r3, #76	; 0x4c
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8000ff6:	7bfa      	ldrb	r2, [r7, #15]
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	00db      	lsls	r3, r3, #3
 8000ffe:	4413      	add	r3, r2
 8001000:	009b      	lsls	r3, r3, #2
 8001002:	440b      	add	r3, r1
 8001004:	3354      	adds	r3, #84	; 0x54
 8001006:	2200      	movs	r2, #0
 8001008:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800100a:	7bfb      	ldrb	r3, [r7, #15]
 800100c:	3301      	adds	r3, #1
 800100e:	73fb      	strb	r3, [r7, #15]
 8001010:	7bfa      	ldrb	r2, [r7, #15]
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	429a      	cmp	r2, r3
 8001018:	d3af      	bcc.n	8000f7a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800101a:	2300      	movs	r3, #0
 800101c:	73fb      	strb	r3, [r7, #15]
 800101e:	e044      	b.n	80010aa <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001020:	7bfa      	ldrb	r2, [r7, #15]
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	4613      	mov	r3, r2
 8001026:	00db      	lsls	r3, r3, #3
 8001028:	4413      	add	r3, r2
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	440b      	add	r3, r1
 800102e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001032:	2200      	movs	r2, #0
 8001034:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001036:	7bfa      	ldrb	r2, [r7, #15]
 8001038:	6879      	ldr	r1, [r7, #4]
 800103a:	4613      	mov	r3, r2
 800103c:	00db      	lsls	r3, r3, #3
 800103e:	4413      	add	r3, r2
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	440b      	add	r3, r1
 8001044:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001048:	7bfa      	ldrb	r2, [r7, #15]
 800104a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800104c:	7bfa      	ldrb	r2, [r7, #15]
 800104e:	6879      	ldr	r1, [r7, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	4413      	add	r3, r2
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	440b      	add	r3, r1
 800105a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001062:	7bfa      	ldrb	r2, [r7, #15]
 8001064:	6879      	ldr	r1, [r7, #4]
 8001066:	4613      	mov	r3, r2
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	4413      	add	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	440b      	add	r3, r1
 8001070:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001078:	7bfa      	ldrb	r2, [r7, #15]
 800107a:	6879      	ldr	r1, [r7, #4]
 800107c:	4613      	mov	r3, r2
 800107e:	00db      	lsls	r3, r3, #3
 8001080:	4413      	add	r3, r2
 8001082:	009b      	lsls	r3, r3, #2
 8001084:	440b      	add	r3, r1
 8001086:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800108a:	2200      	movs	r2, #0
 800108c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800108e:	7bfa      	ldrb	r2, [r7, #15]
 8001090:	6879      	ldr	r1, [r7, #4]
 8001092:	4613      	mov	r3, r2
 8001094:	00db      	lsls	r3, r3, #3
 8001096:	4413      	add	r3, r2
 8001098:	009b      	lsls	r3, r3, #2
 800109a:	440b      	add	r3, r1
 800109c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80010a0:	2200      	movs	r2, #0
 80010a2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	3301      	adds	r3, #1
 80010a8:	73fb      	strb	r3, [r7, #15]
 80010aa:	7bfa      	ldrb	r2, [r7, #15]
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d3b5      	bcc.n	8001020 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	603b      	str	r3, [r7, #0]
 80010ba:	687e      	ldr	r6, [r7, #4]
 80010bc:	466d      	mov	r5, sp
 80010be:	f106 0410 	add.w	r4, r6, #16
 80010c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80010c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80010ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80010ce:	e885 0003 	stmia.w	r5, {r0, r1}
 80010d2:	1d33      	adds	r3, r6, #4
 80010d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80010d6:	6838      	ldr	r0, [r7, #0]
 80010d8:	f001 ff46 	bl	8002f68 <USB_DevInit>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d005      	beq.n	80010ee <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2202      	movs	r2, #2
 80010e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	e00d      	b.n	800110a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	2200      	movs	r2, #0
 80010f2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4618      	mov	r0, r3
 8001104:	f003 f895 	bl	8004232 <USB_DevDisconnect>

  return HAL_OK;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001112 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b084      	sub	sp, #16
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001126:	2b01      	cmp	r3, #1
 8001128:	d101      	bne.n	800112e <HAL_PCD_Start+0x1c>
 800112a:	2302      	movs	r3, #2
 800112c:	e020      	b.n	8001170 <HAL_PCD_Start+0x5e>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2201      	movs	r2, #1
 8001132:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113a:	2b01      	cmp	r3, #1
 800113c:	d109      	bne.n	8001152 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001142:	2b01      	cmp	r3, #1
 8001144:	d005      	beq.n	8001152 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4618      	mov	r0, r3
 8001158:	f001 fe98 	bl	8002e8c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4618      	mov	r0, r3
 8001162:	f003 f845 	bl	80041f0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3710      	adds	r7, #16
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001178:	b590      	push	{r4, r7, lr}
 800117a:	b08d      	sub	sp, #52	; 0x34
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001186:	6a3b      	ldr	r3, [r7, #32]
 8001188:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f003 f903 	bl	800439a <USB_GetMode>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	f040 848a 	bne.w	8001ab0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	4618      	mov	r0, r3
 80011a2:	f003 f867 	bl	8004274 <USB_ReadInterrupts>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f000 8480 	beq.w	8001aae <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	0a1b      	lsrs	r3, r3, #8
 80011b8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f003 f854 	bl	8004274 <USB_ReadInterrupts>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d107      	bne.n	80011e6 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	695a      	ldr	r2, [r3, #20]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f002 0202 	and.w	r2, r2, #2
 80011e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4618      	mov	r0, r3
 80011ec:	f003 f842 	bl	8004274 <USB_ReadInterrupts>
 80011f0:	4603      	mov	r3, r0
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d161      	bne.n	80012be <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	699a      	ldr	r2, [r3, #24]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f022 0210 	bic.w	r2, r2, #16
 8001208:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800120a:	6a3b      	ldr	r3, [r7, #32]
 800120c:	6a1b      	ldr	r3, [r3, #32]
 800120e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	f003 020f 	and.w	r2, r3, #15
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001222:	687a      	ldr	r2, [r7, #4]
 8001224:	4413      	add	r3, r2
 8001226:	3304      	adds	r3, #4
 8001228:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	0c5b      	lsrs	r3, r3, #17
 800122e:	f003 030f 	and.w	r3, r3, #15
 8001232:	2b02      	cmp	r3, #2
 8001234:	d124      	bne.n	8001280 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001236:	69ba      	ldr	r2, [r7, #24]
 8001238:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800123c:	4013      	ands	r3, r2
 800123e:	2b00      	cmp	r3, #0
 8001240:	d035      	beq.n	80012ae <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001242:	697b      	ldr	r3, [r7, #20]
 8001244:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001246:	69bb      	ldr	r3, [r7, #24]
 8001248:	091b      	lsrs	r3, r3, #4
 800124a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800124c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001250:	b29b      	uxth	r3, r3
 8001252:	461a      	mov	r2, r3
 8001254:	6a38      	ldr	r0, [r7, #32]
 8001256:	f002 fe79 	bl	8003f4c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	691a      	ldr	r2, [r3, #16]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001266:	441a      	add	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	6a1a      	ldr	r2, [r3, #32]
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	091b      	lsrs	r3, r3, #4
 8001274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001278:	441a      	add	r2, r3
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	621a      	str	r2, [r3, #32]
 800127e:	e016      	b.n	80012ae <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	0c5b      	lsrs	r3, r3, #17
 8001284:	f003 030f 	and.w	r3, r3, #15
 8001288:	2b06      	cmp	r3, #6
 800128a:	d110      	bne.n	80012ae <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001292:	2208      	movs	r2, #8
 8001294:	4619      	mov	r1, r3
 8001296:	6a38      	ldr	r0, [r7, #32]
 8001298:	f002 fe58 	bl	8003f4c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800129c:	697b      	ldr	r3, [r7, #20]
 800129e:	6a1a      	ldr	r2, [r3, #32]
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	091b      	lsrs	r3, r3, #4
 80012a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80012a8:	441a      	add	r2, r3
 80012aa:	697b      	ldr	r3, [r7, #20]
 80012ac:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	699a      	ldr	r2, [r3, #24]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 0210 	orr.w	r2, r2, #16
 80012bc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f002 ffd6 	bl	8004274 <USB_ReadInterrupts>
 80012c8:	4603      	mov	r3, r0
 80012ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ce:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80012d2:	f040 80a7 	bne.w	8001424 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80012d6:	2300      	movs	r3, #0
 80012d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4618      	mov	r0, r3
 80012e0:	f002 ffdb 	bl	800429a <USB_ReadDevAllOutEpInterrupt>
 80012e4:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80012e6:	e099      	b.n	800141c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80012e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012ea:	f003 0301 	and.w	r3, r3, #1
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 808e 	beq.w	8001410 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012fa:	b2d2      	uxtb	r2, r2
 80012fc:	4611      	mov	r1, r2
 80012fe:	4618      	mov	r0, r3
 8001300:	f002 ffff 	bl	8004302 <USB_ReadDevOutEPInterrupt>
 8001304:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001306:	693b      	ldr	r3, [r7, #16]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b00      	cmp	r3, #0
 800130e:	d00c      	beq.n	800132a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001312:	015a      	lsls	r2, r3, #5
 8001314:	69fb      	ldr	r3, [r7, #28]
 8001316:	4413      	add	r3, r2
 8001318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800131c:	461a      	mov	r2, r3
 800131e:	2301      	movs	r3, #1
 8001320:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001322:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001324:	6878      	ldr	r0, [r7, #4]
 8001326:	f000 feab 	bl	8002080 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	f003 0308 	and.w	r3, r3, #8
 8001330:	2b00      	cmp	r3, #0
 8001332:	d00c      	beq.n	800134e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001336:	015a      	lsls	r2, r3, #5
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	4413      	add	r3, r2
 800133c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001340:	461a      	mov	r2, r3
 8001342:	2308      	movs	r3, #8
 8001344:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001348:	6878      	ldr	r0, [r7, #4]
 800134a:	f000 ff81 	bl	8002250 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	f003 0310 	and.w	r3, r3, #16
 8001354:	2b00      	cmp	r3, #0
 8001356:	d008      	beq.n	800136a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	015a      	lsls	r2, r3, #5
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	4413      	add	r3, r2
 8001360:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001364:	461a      	mov	r2, r3
 8001366:	2310      	movs	r3, #16
 8001368:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	f003 0302 	and.w	r3, r3, #2
 8001370:	2b00      	cmp	r3, #0
 8001372:	d030      	beq.n	80013d6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001374:	6a3b      	ldr	r3, [r7, #32]
 8001376:	695b      	ldr	r3, [r3, #20]
 8001378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800137c:	2b80      	cmp	r3, #128	; 0x80
 800137e:	d109      	bne.n	8001394 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001380:	69fb      	ldr	r3, [r7, #28]
 8001382:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	69fa      	ldr	r2, [r7, #28]
 800138a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800138e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001392:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001396:	4613      	mov	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	4413      	add	r3, r2
 800139c:	009b      	lsls	r3, r3, #2
 800139e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	4413      	add	r3, r2
 80013a6:	3304      	adds	r3, #4
 80013a8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80013aa:	697b      	ldr	r3, [r7, #20]
 80013ac:	78db      	ldrb	r3, [r3, #3]
 80013ae:	2b01      	cmp	r3, #1
 80013b0:	d108      	bne.n	80013c4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	2200      	movs	r2, #0
 80013b6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80013b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ba:	b2db      	uxtb	r3, r3
 80013bc:	4619      	mov	r1, r3
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f005 f810 	bl	80063e4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	015a      	lsls	r2, r3, #5
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	4413      	add	r3, r2
 80013cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013d0:	461a      	mov	r2, r3
 80013d2:	2302      	movs	r3, #2
 80013d4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	f003 0320 	and.w	r3, r3, #32
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d008      	beq.n	80013f2 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80013e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013e2:	015a      	lsls	r2, r3, #5
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	4413      	add	r3, r2
 80013e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80013ec:	461a      	mov	r2, r3
 80013ee:	2320      	movs	r3, #32
 80013f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d009      	beq.n	8001410 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80013fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fe:	015a      	lsls	r2, r3, #5
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	4413      	add	r3, r2
 8001404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001408:	461a      	mov	r2, r3
 800140a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800140e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001412:	3301      	adds	r3, #1
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001416:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001418:	085b      	lsrs	r3, r3, #1
 800141a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800141c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800141e:	2b00      	cmp	r3, #0
 8001420:	f47f af62 	bne.w	80012e8 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4618      	mov	r0, r3
 800142a:	f002 ff23 	bl	8004274 <USB_ReadInterrupts>
 800142e:	4603      	mov	r3, r0
 8001430:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001434:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001438:	f040 80db 	bne.w	80015f2 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f002 ff44 	bl	80042ce <USB_ReadDevAllInEpInterrupt>
 8001446:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800144c:	e0cd      	b.n	80015ea <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800144e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	2b00      	cmp	r3, #0
 8001456:	f000 80c2 	beq.w	80015de <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001460:	b2d2      	uxtb	r2, r2
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f002 ff6a 	bl	800433e <USB_ReadDevInEPInterrupt>
 800146a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	f003 0301 	and.w	r3, r3, #1
 8001472:	2b00      	cmp	r3, #0
 8001474:	d057      	beq.n	8001526 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001478:	f003 030f 	and.w	r3, r3, #15
 800147c:	2201      	movs	r2, #1
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800148a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	43db      	mvns	r3, r3
 8001490:	69f9      	ldr	r1, [r7, #28]
 8001492:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001496:	4013      	ands	r3, r2
 8001498:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800149a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149c:	015a      	lsls	r2, r3, #5
 800149e:	69fb      	ldr	r3, [r7, #28]
 80014a0:	4413      	add	r3, r2
 80014a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80014a6:	461a      	mov	r2, r3
 80014a8:	2301      	movs	r3, #1
 80014aa:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	691b      	ldr	r3, [r3, #16]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d132      	bne.n	800151a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80014b4:	6879      	ldr	r1, [r7, #4]
 80014b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014b8:	4613      	mov	r3, r2
 80014ba:	00db      	lsls	r3, r3, #3
 80014bc:	4413      	add	r3, r2
 80014be:	009b      	lsls	r3, r3, #2
 80014c0:	440b      	add	r3, r1
 80014c2:	334c      	adds	r3, #76	; 0x4c
 80014c4:	6819      	ldr	r1, [r3, #0]
 80014c6:	6878      	ldr	r0, [r7, #4]
 80014c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014ca:	4613      	mov	r3, r2
 80014cc:	00db      	lsls	r3, r3, #3
 80014ce:	4413      	add	r3, r2
 80014d0:	009b      	lsls	r3, r3, #2
 80014d2:	4403      	add	r3, r0
 80014d4:	3348      	adds	r3, #72	; 0x48
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	4419      	add	r1, r3
 80014da:	6878      	ldr	r0, [r7, #4]
 80014dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014de:	4613      	mov	r3, r2
 80014e0:	00db      	lsls	r3, r3, #3
 80014e2:	4413      	add	r3, r2
 80014e4:	009b      	lsls	r3, r3, #2
 80014e6:	4403      	add	r3, r0
 80014e8:	334c      	adds	r3, #76	; 0x4c
 80014ea:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80014ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d113      	bne.n	800151a <HAL_PCD_IRQHandler+0x3a2>
 80014f2:	6879      	ldr	r1, [r7, #4]
 80014f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014f6:	4613      	mov	r3, r2
 80014f8:	00db      	lsls	r3, r3, #3
 80014fa:	4413      	add	r3, r2
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	440b      	add	r3, r1
 8001500:	3354      	adds	r3, #84	; 0x54
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d108      	bne.n	800151a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6818      	ldr	r0, [r3, #0]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001512:	461a      	mov	r2, r3
 8001514:	2101      	movs	r1, #1
 8001516:	f002 ff71 	bl	80043fc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800151a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151c:	b2db      	uxtb	r3, r3
 800151e:	4619      	mov	r1, r3
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f004 fee4 	bl	80062ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	f003 0308 	and.w	r3, r3, #8
 800152c:	2b00      	cmp	r3, #0
 800152e:	d008      	beq.n	8001542 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001532:	015a      	lsls	r2, r3, #5
 8001534:	69fb      	ldr	r3, [r7, #28]
 8001536:	4413      	add	r3, r2
 8001538:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800153c:	461a      	mov	r2, r3
 800153e:	2308      	movs	r3, #8
 8001540:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	f003 0310 	and.w	r3, r3, #16
 8001548:	2b00      	cmp	r3, #0
 800154a:	d008      	beq.n	800155e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800154c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800154e:	015a      	lsls	r2, r3, #5
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	4413      	add	r3, r2
 8001554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001558:	461a      	mov	r2, r3
 800155a:	2310      	movs	r3, #16
 800155c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001564:	2b00      	cmp	r3, #0
 8001566:	d008      	beq.n	800157a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156a:	015a      	lsls	r2, r3, #5
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	4413      	add	r3, r2
 8001570:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001574:	461a      	mov	r2, r3
 8001576:	2340      	movs	r3, #64	; 0x40
 8001578:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	f003 0302 	and.w	r3, r3, #2
 8001580:	2b00      	cmp	r3, #0
 8001582:	d023      	beq.n	80015cc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001584:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001586:	6a38      	ldr	r0, [r7, #32]
 8001588:	f001 fe52 	bl	8003230 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800158c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800158e:	4613      	mov	r3, r2
 8001590:	00db      	lsls	r3, r3, #3
 8001592:	4413      	add	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	3338      	adds	r3, #56	; 0x38
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	4413      	add	r3, r2
 800159c:	3304      	adds	r3, #4
 800159e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	78db      	ldrb	r3, [r3, #3]
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d108      	bne.n	80015ba <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	2200      	movs	r2, #0
 80015ac:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80015ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	4619      	mov	r1, r3
 80015b4:	6878      	ldr	r0, [r7, #4]
 80015b6:	f004 ff27 	bl	8006408 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80015ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015bc:	015a      	lsls	r2, r3, #5
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80015c6:	461a      	mov	r2, r3
 80015c8:	2302      	movs	r3, #2
 80015ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d003      	beq.n	80015de <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80015d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015d8:	6878      	ldr	r0, [r7, #4]
 80015da:	f000 fcc3 	bl	8001f64 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80015de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015e0:	3301      	adds	r3, #1
 80015e2:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e6:	085b      	lsrs	r3, r3, #1
 80015e8:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	f47f af2e 	bne.w	800144e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f002 fe3c 	bl	8004274 <USB_ReadInterrupts>
 80015fc:	4603      	mov	r3, r0
 80015fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001602:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001606:	d122      	bne.n	800164e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	69fa      	ldr	r2, [r7, #28]
 8001612:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001622:	2b01      	cmp	r3, #1
 8001624:	d108      	bne.n	8001638 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	2200      	movs	r2, #0
 800162a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800162e:	2100      	movs	r1, #0
 8001630:	6878      	ldr	r0, [r7, #4]
 8001632:	f000 feab 	bl	800238c <HAL_PCDEx_LPM_Callback>
 8001636:	e002      	b.n	800163e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f004 fec5 	bl	80063c8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	695a      	ldr	r2, [r3, #20]
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800164c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	4618      	mov	r0, r3
 8001654:	f002 fe0e 	bl	8004274 <USB_ReadInterrupts>
 8001658:	4603      	mov	r3, r0
 800165a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800165e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001662:	d112      	bne.n	800168a <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800166a:	689b      	ldr	r3, [r3, #8]
 800166c:	f003 0301 	and.w	r3, r3, #1
 8001670:	2b01      	cmp	r3, #1
 8001672:	d102      	bne.n	800167a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001674:	6878      	ldr	r0, [r7, #4]
 8001676:	f004 fe81 	bl	800637c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	695a      	ldr	r2, [r3, #20]
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001688:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	4618      	mov	r0, r3
 8001690:	f002 fdf0 	bl	8004274 <USB_ReadInterrupts>
 8001694:	4603      	mov	r3, r0
 8001696:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800169a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800169e:	f040 80b7 	bne.w	8001810 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016a8:	685b      	ldr	r3, [r3, #4]
 80016aa:	69fa      	ldr	r2, [r7, #28]
 80016ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80016b0:	f023 0301 	bic.w	r3, r3, #1
 80016b4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2110      	movs	r1, #16
 80016bc:	4618      	mov	r0, r3
 80016be:	f001 fdb7 	bl	8003230 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016c6:	e046      	b.n	8001756 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80016c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016ca:	015a      	lsls	r2, r3, #5
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	4413      	add	r3, r2
 80016d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016d4:	461a      	mov	r2, r3
 80016d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80016da:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80016dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016de:	015a      	lsls	r2, r3, #5
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016ec:	0151      	lsls	r1, r2, #5
 80016ee:	69fa      	ldr	r2, [r7, #28]
 80016f0:	440a      	add	r2, r1
 80016f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80016f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016fa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80016fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016fe:	015a      	lsls	r2, r3, #5
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	4413      	add	r3, r2
 8001704:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001708:	461a      	mov	r2, r3
 800170a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800170e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001712:	015a      	lsls	r2, r3, #5
 8001714:	69fb      	ldr	r3, [r7, #28]
 8001716:	4413      	add	r3, r2
 8001718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001720:	0151      	lsls	r1, r2, #5
 8001722:	69fa      	ldr	r2, [r7, #28]
 8001724:	440a      	add	r2, r1
 8001726:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800172a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800172e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001732:	015a      	lsls	r2, r3, #5
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	4413      	add	r3, r2
 8001738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001740:	0151      	lsls	r1, r2, #5
 8001742:	69fa      	ldr	r2, [r7, #28]
 8001744:	440a      	add	r2, r1
 8001746:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800174a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800174e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001750:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001752:	3301      	adds	r3, #1
 8001754:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800175c:	429a      	cmp	r2, r3
 800175e:	d3b3      	bcc.n	80016c8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001766:	69db      	ldr	r3, [r3, #28]
 8001768:	69fa      	ldr	r2, [r7, #28]
 800176a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800176e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001772:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001778:	2b00      	cmp	r3, #0
 800177a:	d016      	beq.n	80017aa <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001782:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800178c:	f043 030b 	orr.w	r3, r3, #11
 8001790:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	69fa      	ldr	r2, [r7, #28]
 800179e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017a2:	f043 030b 	orr.w	r3, r3, #11
 80017a6:	6453      	str	r3, [r2, #68]	; 0x44
 80017a8:	e015      	b.n	80017d6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	69fa      	ldr	r2, [r7, #28]
 80017b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017b8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80017bc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80017c0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	69fa      	ldr	r2, [r7, #28]
 80017cc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017d0:	f043 030b 	orr.w	r3, r3, #11
 80017d4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	69fa      	ldr	r2, [r7, #28]
 80017e0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017e4:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80017e8:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6818      	ldr	r0, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80017fa:	461a      	mov	r2, r3
 80017fc:	f002 fdfe 	bl	80043fc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	695a      	ldr	r2, [r3, #20]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800180e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f002 fd2d 	bl	8004274 <USB_ReadInterrupts>
 800181a:	4603      	mov	r3, r0
 800181c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001820:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001824:	d124      	bne.n	8001870 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4618      	mov	r0, r3
 800182c:	f002 fdc3 	bl	80043b6 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	f001 fd78 	bl	800332a <USB_GetDevSpeed>
 800183a:	4603      	mov	r3, r0
 800183c:	461a      	mov	r2, r3
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681c      	ldr	r4, [r3, #0]
 8001846:	f001 fa11 	bl	8002c6c <HAL_RCC_GetHCLKFreq>
 800184a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001850:	b2db      	uxtb	r3, r3
 8001852:	461a      	mov	r2, r3
 8001854:	4620      	mov	r0, r4
 8001856:	f001 fa77 	bl	8002d48 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f004 fd6f 	bl	800633e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	695a      	ldr	r2, [r3, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800186e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4618      	mov	r0, r3
 8001876:	f002 fcfd 	bl	8004274 <USB_ReadInterrupts>
 800187a:	4603      	mov	r3, r0
 800187c:	f003 0308 	and.w	r3, r3, #8
 8001880:	2b08      	cmp	r3, #8
 8001882:	d10a      	bne.n	800189a <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	f004 fd4c 	bl	8006322 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	695a      	ldr	r2, [r3, #20]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f002 0208 	and.w	r2, r2, #8
 8001898:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f002 fce8 	bl	8004274 <USB_ReadInterrupts>
 80018a4:	4603      	mov	r3, r0
 80018a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018aa:	2b80      	cmp	r3, #128	; 0x80
 80018ac:	d122      	bne.n	80018f4 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	699b      	ldr	r3, [r3, #24]
 80018b2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80018b6:	6a3b      	ldr	r3, [r7, #32]
 80018b8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018ba:	2301      	movs	r3, #1
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
 80018be:	e014      	b.n	80018ea <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80018c0:	6879      	ldr	r1, [r7, #4]
 80018c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018c4:	4613      	mov	r3, r2
 80018c6:	00db      	lsls	r3, r3, #3
 80018c8:	4413      	add	r3, r2
 80018ca:	009b      	lsls	r3, r3, #2
 80018cc:	440b      	add	r3, r1
 80018ce:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d105      	bne.n	80018e4 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80018d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	4619      	mov	r1, r3
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	f000 fb0f 	bl	8001f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	3301      	adds	r3, #1
 80018e8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d3e5      	bcc.n	80018c0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4618      	mov	r0, r3
 80018fa:	f002 fcbb 	bl	8004274 <USB_ReadInterrupts>
 80018fe:	4603      	mov	r3, r0
 8001900:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001904:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001908:	d13b      	bne.n	8001982 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800190a:	2301      	movs	r3, #1
 800190c:	627b      	str	r3, [r7, #36]	; 0x24
 800190e:	e02b      	b.n	8001968 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001912:	015a      	lsls	r2, r3, #5
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	4413      	add	r3, r2
 8001918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001920:	6879      	ldr	r1, [r7, #4]
 8001922:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001924:	4613      	mov	r3, r2
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	440b      	add	r3, r1
 800192e:	3340      	adds	r3, #64	; 0x40
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	2b01      	cmp	r3, #1
 8001934:	d115      	bne.n	8001962 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001936:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001938:	2b00      	cmp	r3, #0
 800193a:	da12      	bge.n	8001962 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800193c:	6879      	ldr	r1, [r7, #4]
 800193e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001940:	4613      	mov	r3, r2
 8001942:	00db      	lsls	r3, r3, #3
 8001944:	4413      	add	r3, r2
 8001946:	009b      	lsls	r3, r3, #2
 8001948:	440b      	add	r3, r1
 800194a:	333f      	adds	r3, #63	; 0x3f
 800194c:	2201      	movs	r2, #1
 800194e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001952:	b2db      	uxtb	r3, r3
 8001954:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001958:	b2db      	uxtb	r3, r3
 800195a:	4619      	mov	r1, r3
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f000 fad0 	bl	8001f02 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001964:	3301      	adds	r3, #1
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800196e:	429a      	cmp	r2, r3
 8001970:	d3ce      	bcc.n	8001910 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	695a      	ldr	r2, [r3, #20]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001980:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4618      	mov	r0, r3
 8001988:	f002 fc74 	bl	8004274 <USB_ReadInterrupts>
 800198c:	4603      	mov	r3, r0
 800198e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001992:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001996:	d155      	bne.n	8001a44 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001998:	2301      	movs	r3, #1
 800199a:	627b      	str	r3, [r7, #36]	; 0x24
 800199c:	e045      	b.n	8001a2a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800199e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a0:	015a      	lsls	r2, r3, #5
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	4413      	add	r3, r2
 80019a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019ae:	6879      	ldr	r1, [r7, #4]
 80019b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b01      	cmp	r3, #1
 80019c4:	d12e      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019c6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	da2b      	bge.n	8001a24 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80019d8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80019dc:	429a      	cmp	r2, r3
 80019de:	d121      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80019e0:	6879      	ldr	r1, [r7, #4]
 80019e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e4:	4613      	mov	r3, r2
 80019e6:	00db      	lsls	r3, r3, #3
 80019e8:	4413      	add	r3, r2
 80019ea:	009b      	lsls	r3, r3, #2
 80019ec:	440b      	add	r3, r1
 80019ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80019f2:	2201      	movs	r2, #1
 80019f4:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80019f6:	6a3b      	ldr	r3, [r7, #32]
 80019f8:	699b      	ldr	r3, [r3, #24]
 80019fa:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019fe:	6a3b      	ldr	r3, [r7, #32]
 8001a00:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001a02:	6a3b      	ldr	r3, [r7, #32]
 8001a04:	695b      	ldr	r3, [r3, #20]
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10a      	bne.n	8001a24 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	69fa      	ldr	r2, [r7, #28]
 8001a18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001a1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a20:	6053      	str	r3, [r2, #4]
            break;
 8001a22:	e007      	b.n	8001a34 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a26:	3301      	adds	r3, #1
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d3b4      	bcc.n	800199e <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	695a      	ldr	r2, [r3, #20]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001a42:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f002 fc13 	bl	8004274 <USB_ReadInterrupts>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a58:	d10a      	bne.n	8001a70 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001a5a:	6878      	ldr	r0, [r7, #4]
 8001a5c:	f004 fce6 	bl	800642c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001a6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f002 fbfd 	bl	8004274 <USB_ReadInterrupts>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	f003 0304 	and.w	r3, r3, #4
 8001a80:	2b04      	cmp	r3, #4
 8001a82:	d115      	bne.n	8001ab0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d002      	beq.n	8001a9c <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001a96:	6878      	ldr	r0, [r7, #4]
 8001a98:	f004 fcd6 	bl	8006448 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6859      	ldr	r1, [r3, #4]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	605a      	str	r2, [r3, #4]
 8001aac:	e000      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x938>
      return;
 8001aae:	bf00      	nop
    }
  }
}
 8001ab0:	3734      	adds	r7, #52	; 0x34
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd90      	pop	{r4, r7, pc}

08001ab6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001ab6:	b580      	push	{r7, lr}
 8001ab8:	b082      	sub	sp, #8
 8001aba:	af00      	add	r7, sp, #0
 8001abc:	6078      	str	r0, [r7, #4]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ac8:	2b01      	cmp	r3, #1
 8001aca:	d101      	bne.n	8001ad0 <HAL_PCD_SetAddress+0x1a>
 8001acc:	2302      	movs	r3, #2
 8001ace:	e013      	b.n	8001af8 <HAL_PCD_SetAddress+0x42>
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	78fa      	ldrb	r2, [r7, #3]
 8001adc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	78fa      	ldrb	r2, [r7, #3]
 8001ae6:	4611      	mov	r1, r2
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f002 fb5b 	bl	80041a4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	2200      	movs	r2, #0
 8001af2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001af6:	2300      	movs	r3, #0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
 8001b08:	4608      	mov	r0, r1
 8001b0a:	4611      	mov	r1, r2
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4603      	mov	r3, r0
 8001b10:	70fb      	strb	r3, [r7, #3]
 8001b12:	460b      	mov	r3, r1
 8001b14:	803b      	strh	r3, [r7, #0]
 8001b16:	4613      	mov	r3, r2
 8001b18:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001b1e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	da0f      	bge.n	8001b46 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b26:	78fb      	ldrb	r3, [r7, #3]
 8001b28:	f003 020f 	and.w	r2, r3, #15
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	00db      	lsls	r3, r3, #3
 8001b30:	4413      	add	r3, r2
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	3338      	adds	r3, #56	; 0x38
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	4413      	add	r3, r2
 8001b3a:	3304      	adds	r3, #4
 8001b3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	705a      	strb	r2, [r3, #1]
 8001b44:	e00f      	b.n	8001b66 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b46:	78fb      	ldrb	r3, [r7, #3]
 8001b48:	f003 020f 	and.w	r2, r3, #15
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	00db      	lsls	r3, r3, #3
 8001b50:	4413      	add	r3, r2
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	3304      	adds	r3, #4
 8001b5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2200      	movs	r2, #0
 8001b64:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001b66:	78fb      	ldrb	r3, [r7, #3]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	b2da      	uxtb	r2, r3
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001b72:	883a      	ldrh	r2, [r7, #0]
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	78ba      	ldrb	r2, [r7, #2]
 8001b7c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	785b      	ldrb	r3, [r3, #1]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d004      	beq.n	8001b90 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001b90:	78bb      	ldrb	r3, [r7, #2]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d102      	bne.n	8001b9c <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	2200      	movs	r2, #0
 8001b9a:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d101      	bne.n	8001baa <HAL_PCD_EP_Open+0xaa>
 8001ba6:	2302      	movs	r3, #2
 8001ba8:	e00e      	b.n	8001bc8 <HAL_PCD_EP_Open+0xc8>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2201      	movs	r2, #1
 8001bae:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	68f9      	ldr	r1, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f001 fbdb 	bl	8003374 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001bc6:	7afb      	ldrb	r3, [r7, #11]
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3710      	adds	r7, #16
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b084      	sub	sp, #16
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
 8001bd8:	460b      	mov	r3, r1
 8001bda:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001bdc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	da0f      	bge.n	8001c04 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001be4:	78fb      	ldrb	r3, [r7, #3]
 8001be6:	f003 020f 	and.w	r2, r3, #15
 8001bea:	4613      	mov	r3, r2
 8001bec:	00db      	lsls	r3, r3, #3
 8001bee:	4413      	add	r3, r2
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	3338      	adds	r3, #56	; 0x38
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	3304      	adds	r3, #4
 8001bfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	705a      	strb	r2, [r3, #1]
 8001c02:	e00f      	b.n	8001c24 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c04:	78fb      	ldrb	r3, [r7, #3]
 8001c06:	f003 020f 	and.w	r2, r3, #15
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	00db      	lsls	r3, r3, #3
 8001c0e:	4413      	add	r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	4413      	add	r3, r2
 8001c1a:	3304      	adds	r3, #4
 8001c1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	2200      	movs	r2, #0
 8001c22:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001c24:	78fb      	ldrb	r3, [r7, #3]
 8001c26:	f003 030f 	and.w	r3, r3, #15
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c36:	2b01      	cmp	r3, #1
 8001c38:	d101      	bne.n	8001c3e <HAL_PCD_EP_Close+0x6e>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e00e      	b.n	8001c5c <HAL_PCD_EP_Close+0x8c>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	68f9      	ldr	r1, [r7, #12]
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	f001 fc19 	bl	8003484 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3710      	adds	r7, #16
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	607a      	str	r2, [r7, #4]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	460b      	mov	r3, r1
 8001c72:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c74:	7afb      	ldrb	r3, [r7, #11]
 8001c76:	f003 020f 	and.w	r2, r3, #15
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4413      	add	r3, r2
 8001c80:	009b      	lsls	r3, r3, #2
 8001c82:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	683a      	ldr	r2, [r7, #0]
 8001c98:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
 8001ca8:	f003 030f 	and.w	r3, r3, #15
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	2b01      	cmp	r3, #1
 8001cb8:	d102      	bne.n	8001cc0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cc0:	7afb      	ldrb	r3, [r7, #11]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d109      	bne.n	8001cde <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6818      	ldr	r0, [r3, #0]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	b2db      	uxtb	r3, r3
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	6979      	ldr	r1, [r7, #20]
 8001cd8:	f001 fef8 	bl	8003acc <USB_EP0StartXfer>
 8001cdc:	e008      	b.n	8001cf0 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	6818      	ldr	r0, [r3, #0]
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	691b      	ldr	r3, [r3, #16]
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	461a      	mov	r2, r3
 8001cea:	6979      	ldr	r1, [r7, #20]
 8001cec:	f001 fca6 	bl	800363c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b086      	sub	sp, #24
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	60f8      	str	r0, [r7, #12]
 8001d02:	607a      	str	r2, [r7, #4]
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	460b      	mov	r3, r1
 8001d08:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d0a:	7afb      	ldrb	r3, [r7, #11]
 8001d0c:	f003 020f 	and.w	r2, r3, #15
 8001d10:	4613      	mov	r3, r2
 8001d12:	00db      	lsls	r3, r3, #3
 8001d14:	4413      	add	r3, r2
 8001d16:	009b      	lsls	r3, r3, #2
 8001d18:	3338      	adds	r3, #56	; 0x38
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3304      	adds	r3, #4
 8001d20:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001d22:	697b      	ldr	r3, [r7, #20]
 8001d24:	687a      	ldr	r2, [r7, #4]
 8001d26:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	2200      	movs	r2, #0
 8001d32:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	2201      	movs	r2, #1
 8001d38:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d3a:	7afb      	ldrb	r3, [r7, #11]
 8001d3c:	f003 030f 	and.w	r3, r3, #15
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d102      	bne.n	8001d54 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001d54:	7afb      	ldrb	r3, [r7, #11]
 8001d56:	f003 030f 	and.w	r3, r3, #15
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6818      	ldr	r0, [r3, #0]
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6979      	ldr	r1, [r7, #20]
 8001d6c:	f001 feae 	bl	8003acc <USB_EP0StartXfer>
 8001d70:	e008      	b.n	8001d84 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	6818      	ldr	r0, [r3, #0]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	691b      	ldr	r3, [r3, #16]
 8001d7a:	b2db      	uxtb	r3, r3
 8001d7c:	461a      	mov	r2, r3
 8001d7e:	6979      	ldr	r1, [r7, #20]
 8001d80:	f001 fc5c 	bl	800363c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3718      	adds	r7, #24
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	f003 020f 	and.w	r2, r3, #15
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	429a      	cmp	r2, r3
 8001da6:	d901      	bls.n	8001dac <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e050      	b.n	8001e4e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001dac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da0f      	bge.n	8001dd4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001db4:	78fb      	ldrb	r3, [r7, #3]
 8001db6:	f003 020f 	and.w	r2, r3, #15
 8001dba:	4613      	mov	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	4413      	add	r3, r2
 8001dc0:	009b      	lsls	r3, r3, #2
 8001dc2:	3338      	adds	r3, #56	; 0x38
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	3304      	adds	r3, #4
 8001dca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	705a      	strb	r2, [r3, #1]
 8001dd2:	e00d      	b.n	8001df0 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001dd4:	78fa      	ldrb	r2, [r7, #3]
 8001dd6:	4613      	mov	r3, r2
 8001dd8:	00db      	lsls	r3, r3, #3
 8001dda:	4413      	add	r3, r2
 8001ddc:	009b      	lsls	r3, r3, #2
 8001dde:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	4413      	add	r3, r2
 8001de6:	3304      	adds	r3, #4
 8001de8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	2201      	movs	r2, #1
 8001df4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001df6:	78fb      	ldrb	r3, [r7, #3]
 8001df8:	f003 030f 	and.w	r3, r3, #15
 8001dfc:	b2da      	uxtb	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_PCD_EP_SetStall+0x82>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e01e      	b.n	8001e4e <HAL_PCD_EP_SetStall+0xc0>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68f9      	ldr	r1, [r7, #12]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f002 f8ec 	bl	8003ffc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e24:	78fb      	ldrb	r3, [r7, #3]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d10a      	bne.n	8001e44 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6818      	ldr	r0, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	691b      	ldr	r3, [r3, #16]
 8001e36:	b2d9      	uxtb	r1, r3
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e3e:	461a      	mov	r2, r3
 8001e40:	f002 fadc 	bl	80043fc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2200      	movs	r2, #0
 8001e48:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001e4c:	2300      	movs	r3, #0
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	6078      	str	r0, [r7, #4]
 8001e5e:	460b      	mov	r3, r1
 8001e60:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001e62:	78fb      	ldrb	r3, [r7, #3]
 8001e64:	f003 020f 	and.w	r2, r3, #15
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d901      	bls.n	8001e74 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e042      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001e74:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	da0f      	bge.n	8001e9c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	f003 020f 	and.w	r2, r3, #15
 8001e82:	4613      	mov	r3, r2
 8001e84:	00db      	lsls	r3, r3, #3
 8001e86:	4413      	add	r3, r2
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	3338      	adds	r3, #56	; 0x38
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	4413      	add	r3, r2
 8001e90:	3304      	adds	r3, #4
 8001e92:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	2201      	movs	r2, #1
 8001e98:	705a      	strb	r2, [r3, #1]
 8001e9a:	e00f      	b.n	8001ebc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e9c:	78fb      	ldrb	r3, [r7, #3]
 8001e9e:	f003 020f 	and.w	r2, r3, #15
 8001ea2:	4613      	mov	r3, r2
 8001ea4:	00db      	lsls	r3, r3, #3
 8001ea6:	4413      	add	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	3304      	adds	r3, #4
 8001eb4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ec2:	78fb      	ldrb	r3, [r7, #3]
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	b2da      	uxtb	r2, r3
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d101      	bne.n	8001edc <HAL_PCD_EP_ClrStall+0x86>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e00e      	b.n	8001efa <HAL_PCD_EP_ClrStall+0xa4>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2201      	movs	r2, #1
 8001ee0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	68f9      	ldr	r1, [r7, #12]
 8001eea:	4618      	mov	r0, r3
 8001eec:	f002 f8f4 	bl	80040d8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001ef8:	2300      	movs	r3, #0
}
 8001efa:	4618      	mov	r0, r3
 8001efc:	3710      	adds	r7, #16
 8001efe:	46bd      	mov	sp, r7
 8001f00:	bd80      	pop	{r7, pc}

08001f02 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f02:	b580      	push	{r7, lr}
 8001f04:	b084      	sub	sp, #16
 8001f06:	af00      	add	r7, sp, #0
 8001f08:	6078      	str	r0, [r7, #4]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8001f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	da0c      	bge.n	8001f30 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	f003 020f 	and.w	r2, r3, #15
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	3338      	adds	r3, #56	; 0x38
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	3304      	adds	r3, #4
 8001f2c:	60fb      	str	r3, [r7, #12]
 8001f2e:	e00c      	b.n	8001f4a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001f30:	78fb      	ldrb	r3, [r7, #3]
 8001f32:	f003 020f 	and.w	r2, r3, #15
 8001f36:	4613      	mov	r3, r2
 8001f38:	00db      	lsls	r3, r3, #3
 8001f3a:	4413      	add	r3, r2
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	3304      	adds	r3, #4
 8001f48:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68f9      	ldr	r1, [r7, #12]
 8001f50:	4618      	mov	r0, r3
 8001f52:	f001 ff13 	bl	8003d7c <USB_EPStopXfer>
 8001f56:	4603      	mov	r3, r0
 8001f58:	72fb      	strb	r3, [r7, #11]

  return ret;
 8001f5a:	7afb      	ldrb	r3, [r7, #11]
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b08a      	sub	sp, #40	; 0x28
 8001f68:	af02      	add	r7, sp, #8
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8001f78:	683a      	ldr	r2, [r7, #0]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	3338      	adds	r3, #56	; 0x38
 8001f84:	687a      	ldr	r2, [r7, #4]
 8001f86:	4413      	add	r3, r2
 8001f88:	3304      	adds	r3, #4
 8001f8a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	6a1a      	ldr	r2, [r3, #32]
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	429a      	cmp	r2, r3
 8001f96:	d901      	bls.n	8001f9c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e06c      	b.n	8002076 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	699a      	ldr	r2, [r3, #24]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	6a1b      	ldr	r3, [r3, #32]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	429a      	cmp	r2, r3
 8001fb0:	d902      	bls.n	8001fb8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	3303      	adds	r3, #3
 8001fbc:	089b      	lsrs	r3, r3, #2
 8001fbe:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8001fc0:	e02b      	b.n	800201a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	699a      	ldr	r2, [r3, #24]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6a1b      	ldr	r3, [r3, #32]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	68db      	ldr	r3, [r3, #12]
 8001fd2:	69fa      	ldr	r2, [r7, #28]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d902      	bls.n	8001fde <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3303      	adds	r3, #3
 8001fe2:	089b      	lsrs	r3, r3, #2
 8001fe4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	6919      	ldr	r1, [r3, #16]
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	b2da      	uxtb	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	9300      	str	r3, [sp, #0]
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6978      	ldr	r0, [r7, #20]
 8001ffe:	f001 ff67 	bl	8003ed0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	691a      	ldr	r2, [r3, #16]
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	441a      	add	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	6a1a      	ldr	r2, [r3, #32]
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	441a      	add	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	015a      	lsls	r2, r3, #5
 800201e:	693b      	ldr	r3, [r7, #16]
 8002020:	4413      	add	r3, r2
 8002022:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	b29b      	uxth	r3, r3
 800202a:	69ba      	ldr	r2, [r7, #24]
 800202c:	429a      	cmp	r2, r3
 800202e:	d809      	bhi.n	8002044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	6a1a      	ldr	r2, [r3, #32]
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002038:	429a      	cmp	r2, r3
 800203a:	d203      	bcs.n	8002044 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d1be      	bne.n	8001fc2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	699a      	ldr	r2, [r3, #24]
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	6a1b      	ldr	r3, [r3, #32]
 800204c:	429a      	cmp	r2, r3
 800204e:	d811      	bhi.n	8002074 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	f003 030f 	and.w	r3, r3, #15
 8002056:	2201      	movs	r2, #1
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800205e:	693b      	ldr	r3, [r7, #16]
 8002060:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	43db      	mvns	r3, r3
 800206a:	6939      	ldr	r1, [r7, #16]
 800206c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002070:	4013      	ands	r3, r2
 8002072:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3720      	adds	r7, #32
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
	...

08002080 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b088      	sub	sp, #32
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	333c      	adds	r3, #60	; 0x3c
 8002098:	3304      	adds	r3, #4
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	015a      	lsls	r2, r3, #5
 80020a2:	69bb      	ldr	r3, [r7, #24]
 80020a4:	4413      	add	r3, r2
 80020a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020aa:	689b      	ldr	r3, [r3, #8]
 80020ac:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	691b      	ldr	r3, [r3, #16]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d17b      	bne.n	80021ae <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	f003 0308 	and.w	r3, r3, #8
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d015      	beq.n	80020ec <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	4a61      	ldr	r2, [pc, #388]	; (8002248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80020c4:	4293      	cmp	r3, r2
 80020c6:	f240 80b9 	bls.w	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	f000 80b3 	beq.w	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	015a      	lsls	r2, r3, #5
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	4413      	add	r3, r2
 80020de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80020e2:	461a      	mov	r2, r3
 80020e4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020e8:	6093      	str	r3, [r2, #8]
 80020ea:	e0a7      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	f003 0320 	and.w	r3, r3, #32
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d009      	beq.n	800210a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	015a      	lsls	r2, r3, #5
 80020fa:	69bb      	ldr	r3, [r7, #24]
 80020fc:	4413      	add	r3, r2
 80020fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002102:	461a      	mov	r2, r3
 8002104:	2320      	movs	r3, #32
 8002106:	6093      	str	r3, [r2, #8]
 8002108:	e098      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002110:	2b00      	cmp	r3, #0
 8002112:	f040 8093 	bne.w	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	4a4b      	ldr	r2, [pc, #300]	; (8002248 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d90f      	bls.n	800213e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002124:	2b00      	cmp	r3, #0
 8002126:	d00a      	beq.n	800213e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	015a      	lsls	r2, r3, #5
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	4413      	add	r3, r2
 8002130:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002134:	461a      	mov	r2, r3
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	6093      	str	r3, [r2, #8]
 800213c:	e07e      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800213e:	683a      	ldr	r2, [r7, #0]
 8002140:	4613      	mov	r3, r2
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	4413      	add	r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800214c:	687a      	ldr	r2, [r7, #4]
 800214e:	4413      	add	r3, r2
 8002150:	3304      	adds	r3, #4
 8002152:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	0159      	lsls	r1, r3, #5
 800215c:	69bb      	ldr	r3, [r7, #24]
 800215e:	440b      	add	r3, r1
 8002160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800216a:	1ad2      	subs	r2, r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d114      	bne.n	80021a0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d109      	bne.n	8002192 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002188:	461a      	mov	r2, r3
 800218a:	2101      	movs	r1, #1
 800218c:	f002 f936 	bl	80043fc <USB_EP0_OutStart>
 8002190:	e006      	b.n	80021a0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	691a      	ldr	r2, [r3, #16]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	441a      	add	r2, r3
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	4619      	mov	r1, r3
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f004 f886 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
 80021ac:	e046      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	4a26      	ldr	r2, [pc, #152]	; (800224c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d124      	bne.n	8002200 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	015a      	lsls	r2, r3, #5
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021cc:	461a      	mov	r2, r3
 80021ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021d2:	6093      	str	r3, [r2, #8]
 80021d4:	e032      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	f003 0320 	and.w	r3, r3, #32
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d008      	beq.n	80021f2 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	015a      	lsls	r2, r3, #5
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	4413      	add	r3, r2
 80021e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80021ec:	461a      	mov	r2, r3
 80021ee:	2320      	movs	r3, #32
 80021f0:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	b2db      	uxtb	r3, r3
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f004 f85d 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
 80021fe:	e01d      	b.n	800223c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d114      	bne.n	8002230 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	683a      	ldr	r2, [r7, #0]
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d108      	bne.n	8002230 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6818      	ldr	r0, [r3, #0]
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002228:	461a      	mov	r2, r3
 800222a:	2100      	movs	r1, #0
 800222c:	f002 f8e6 	bl	80043fc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	4619      	mov	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f004 f83e 	bl	80062b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3720      	adds	r7, #32
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	4f54300a 	.word	0x4f54300a
 800224c:	4f54310a 	.word	0x4f54310a

08002250 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
 8002258:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	333c      	adds	r3, #60	; 0x3c
 8002268:	3304      	adds	r3, #4
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	015a      	lsls	r2, r3, #5
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	4413      	add	r3, r2
 8002276:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <PCD_EP_OutSetupPacket_int+0x88>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d90e      	bls.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800228c:	2b00      	cmp	r3, #0
 800228e:	d009      	beq.n	80022a4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	015a      	lsls	r2, r3, #5
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	4413      	add	r3, r2
 8002298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229c:	461a      	mov	r2, r3
 800229e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022a2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f003 fff5 	bl	8006294 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4a0a      	ldr	r2, [pc, #40]	; (80022d8 <PCD_EP_OutSetupPacket_int+0x88>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d90c      	bls.n	80022cc <PCD_EP_OutSetupPacket_int+0x7c>
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	691b      	ldr	r3, [r3, #16]
 80022b6:	2b01      	cmp	r3, #1
 80022b8:	d108      	bne.n	80022cc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80022c4:	461a      	mov	r2, r3
 80022c6:	2101      	movs	r1, #1
 80022c8:	f002 f898 	bl	80043fc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	4f54300a 	.word	0x4f54300a

080022dc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	460b      	mov	r3, r1
 80022e6:	70fb      	strb	r3, [r7, #3]
 80022e8:	4613      	mov	r3, r2
 80022ea:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022f2:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80022f4:	78fb      	ldrb	r3, [r7, #3]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d107      	bne.n	800230a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80022fa:	883b      	ldrh	r3, [r7, #0]
 80022fc:	0419      	lsls	r1, r3, #16
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	68ba      	ldr	r2, [r7, #8]
 8002304:	430a      	orrs	r2, r1
 8002306:	629a      	str	r2, [r3, #40]	; 0x28
 8002308:	e028      	b.n	800235c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002310:	0c1b      	lsrs	r3, r3, #16
 8002312:	68ba      	ldr	r2, [r7, #8]
 8002314:	4413      	add	r3, r2
 8002316:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002318:	2300      	movs	r3, #0
 800231a:	73fb      	strb	r3, [r7, #15]
 800231c:	e00d      	b.n	800233a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681a      	ldr	r2, [r3, #0]
 8002322:	7bfb      	ldrb	r3, [r7, #15]
 8002324:	3340      	adds	r3, #64	; 0x40
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	0c1b      	lsrs	r3, r3, #16
 800232e:	68ba      	ldr	r2, [r7, #8]
 8002330:	4413      	add	r3, r2
 8002332:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	3301      	adds	r3, #1
 8002338:	73fb      	strb	r3, [r7, #15]
 800233a:	7bfa      	ldrb	r2, [r7, #15]
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	3b01      	subs	r3, #1
 8002340:	429a      	cmp	r2, r3
 8002342:	d3ec      	bcc.n	800231e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002344:	883b      	ldrh	r3, [r7, #0]
 8002346:	0418      	lsls	r0, r3, #16
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6819      	ldr	r1, [r3, #0]
 800234c:	78fb      	ldrb	r3, [r7, #3]
 800234e:	3b01      	subs	r3, #1
 8002350:	68ba      	ldr	r2, [r7, #8]
 8002352:	4302      	orrs	r2, r0
 8002354:	3340      	adds	r3, #64	; 0x40
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
 8002372:	460b      	mov	r3, r1
 8002374:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	887a      	ldrh	r2, [r7, #2]
 800237c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	370c      	adds	r7, #12
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr

0800238c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800238c:	b480      	push	{r7}
 800238e:	b083      	sub	sp, #12
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002398:	bf00      	nop
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d101      	bne.n	80023b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e267      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d075      	beq.n	80024ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023c2:	4b88      	ldr	r3, [pc, #544]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f003 030c 	and.w	r3, r3, #12
 80023ca:	2b04      	cmp	r3, #4
 80023cc:	d00c      	beq.n	80023e8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023ce:	4b85      	ldr	r3, [pc, #532]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d112      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023da:	4b82      	ldr	r3, [pc, #520]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023e6:	d10b      	bne.n	8002400 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023e8:	4b7e      	ldr	r3, [pc, #504]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d05b      	beq.n	80024ac <HAL_RCC_OscConfig+0x108>
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d157      	bne.n	80024ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	e242      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002408:	d106      	bne.n	8002418 <HAL_RCC_OscConfig+0x74>
 800240a:	4b76      	ldr	r3, [pc, #472]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a75      	ldr	r2, [pc, #468]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0x98>
 8002422:	4b70      	ldr	r3, [pc, #448]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a6f      	ldr	r2, [pc, #444]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6d      	ldr	r3, [pc, #436]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6c      	ldr	r2, [pc, #432]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xb0>
 800243c:	4b69      	ldr	r3, [pc, #420]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a68      	ldr	r2, [pc, #416]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b66      	ldr	r3, [pc, #408]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7fe fa5e 	bl	800091c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fa5a 	bl	800091c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	; 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e207      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xc0>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7fe fa4a 	bl	800091c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800248c:	f7fe fa46 	bl	800091c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	; 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1f3      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b51      	ldr	r3, [pc, #324]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0xe8>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ba:	4b4a      	ldr	r3, [pc, #296]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b44      	ldr	r3, [pc, #272]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b41      	ldr	r3, [pc, #260]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	68db      	ldr	r3, [r3, #12]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c7      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4937      	ldr	r1, [pc, #220]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b34      	ldr	r3, [pc, #208]	; (80025e8 <HAL_RCC_OscConfig+0x244>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800251a:	f7fe f9ff 	bl	800091c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002522:	f7fe f9fb 	bl	800091c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a8      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b28      	ldr	r3, [pc, #160]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4925      	ldr	r1, [pc, #148]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b24      	ldr	r3, [pc, #144]	; (80025e8 <HAL_RCC_OscConfig+0x244>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255c:	f7fe f9de 	bl	800091c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002564:	f7fe f9da 	bl	800091c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e187      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1b      	ldr	r3, [pc, #108]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d036      	beq.n	80025fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d016      	beq.n	80025c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b15      	ldr	r3, [pc, #84]	; (80025ec <HAL_RCC_OscConfig+0x248>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800259c:	f7fe f9be 	bl	800091c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025a4:	f7fe f9ba 	bl	800091c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e167      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_OscConfig+0x240>)
 80025b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x200>
 80025c2:	e01b      	b.n	80025fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025c4:	4b09      	ldr	r3, [pc, #36]	; (80025ec <HAL_RCC_OscConfig+0x248>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025ca:	f7fe f9a7 	bl	800091c <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d0:	e00e      	b.n	80025f0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d2:	f7fe f9a3 	bl	800091c <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	2b02      	cmp	r3, #2
 80025de:	d907      	bls.n	80025f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e150      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
 80025e4:	40023800 	.word	0x40023800
 80025e8:	42470000 	.word	0x42470000
 80025ec:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f0:	4b88      	ldr	r3, [pc, #544]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d1ea      	bne.n	80025d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f003 0304 	and.w	r3, r3, #4
 8002604:	2b00      	cmp	r3, #0
 8002606:	f000 8097 	beq.w	8002738 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800260a:	2300      	movs	r3, #0
 800260c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800260e:	4b81      	ldr	r3, [pc, #516]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10f      	bne.n	800263a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800261a:	2300      	movs	r3, #0
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	4b7d      	ldr	r3, [pc, #500]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002622:	4a7c      	ldr	r2, [pc, #496]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002628:	6413      	str	r3, [r2, #64]	; 0x40
 800262a:	4b7a      	ldr	r3, [pc, #488]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800262c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002632:	60bb      	str	r3, [r7, #8]
 8002634:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002636:	2301      	movs	r3, #1
 8002638:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263a:	4b77      	ldr	r3, [pc, #476]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002642:	2b00      	cmp	r3, #0
 8002644:	d118      	bne.n	8002678 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002646:	4b74      	ldr	r3, [pc, #464]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	4a73      	ldr	r2, [pc, #460]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800264c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002650:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002652:	f7fe f963 	bl	800091c <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265a:	f7fe f95f 	bl	800091c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e10c      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800266c:	4b6a      	ldr	r3, [pc, #424]	; (8002818 <HAL_RCC_OscConfig+0x474>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002674:	2b00      	cmp	r3, #0
 8002676:	d0f0      	beq.n	800265a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2b01      	cmp	r3, #1
 800267e:	d106      	bne.n	800268e <HAL_RCC_OscConfig+0x2ea>
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002684:	4a63      	ldr	r2, [pc, #396]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002686:	f043 0301 	orr.w	r3, r3, #1
 800268a:	6713      	str	r3, [r2, #112]	; 0x70
 800268c:	e01c      	b.n	80026c8 <HAL_RCC_OscConfig+0x324>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	2b05      	cmp	r3, #5
 8002694:	d10c      	bne.n	80026b0 <HAL_RCC_OscConfig+0x30c>
 8002696:	4b5f      	ldr	r3, [pc, #380]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002698:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800269a:	4a5e      	ldr	r2, [pc, #376]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800269c:	f043 0304 	orr.w	r3, r3, #4
 80026a0:	6713      	str	r3, [r2, #112]	; 0x70
 80026a2:	4b5c      	ldr	r3, [pc, #368]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026a6:	4a5b      	ldr	r2, [pc, #364]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026a8:	f043 0301 	orr.w	r3, r3, #1
 80026ac:	6713      	str	r3, [r2, #112]	; 0x70
 80026ae:	e00b      	b.n	80026c8 <HAL_RCC_OscConfig+0x324>
 80026b0:	4b58      	ldr	r3, [pc, #352]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026b4:	4a57      	ldr	r2, [pc, #348]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026b6:	f023 0301 	bic.w	r3, r3, #1
 80026ba:	6713      	str	r3, [r2, #112]	; 0x70
 80026bc:	4b55      	ldr	r3, [pc, #340]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026c0:	4a54      	ldr	r2, [pc, #336]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026c2:	f023 0304 	bic.w	r3, r3, #4
 80026c6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	689b      	ldr	r3, [r3, #8]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d015      	beq.n	80026fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d0:	f7fe f924 	bl	800091c <HAL_GetTick>
 80026d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026d6:	e00a      	b.n	80026ee <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026d8:	f7fe f920 	bl	800091c <HAL_GetTick>
 80026dc:	4602      	mov	r2, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d901      	bls.n	80026ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80026ea:	2303      	movs	r3, #3
 80026ec:	e0cb      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ee:	4b49      	ldr	r3, [pc, #292]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	f003 0302 	and.w	r3, r3, #2
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d0ee      	beq.n	80026d8 <HAL_RCC_OscConfig+0x334>
 80026fa:	e014      	b.n	8002726 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026fc:	f7fe f90e 	bl	800091c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002702:	e00a      	b.n	800271a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002704:	f7fe f90a 	bl	800091c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002712:	4293      	cmp	r3, r2
 8002714:	d901      	bls.n	800271a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002716:	2303      	movs	r3, #3
 8002718:	e0b5      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800271a:	4b3e      	ldr	r3, [pc, #248]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	f003 0302 	and.w	r3, r3, #2
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1ee      	bne.n	8002704 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002726:	7dfb      	ldrb	r3, [r7, #23]
 8002728:	2b01      	cmp	r3, #1
 800272a:	d105      	bne.n	8002738 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800272c:	4b39      	ldr	r3, [pc, #228]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a38      	ldr	r2, [pc, #224]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002732:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80a1 	beq.w	8002884 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002742:	4b34      	ldr	r3, [pc, #208]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f003 030c 	and.w	r3, r3, #12
 800274a:	2b08      	cmp	r3, #8
 800274c:	d05c      	beq.n	8002808 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d141      	bne.n	80027da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002756:	4b31      	ldr	r3, [pc, #196]	; (800281c <HAL_RCC_OscConfig+0x478>)
 8002758:	2200      	movs	r2, #0
 800275a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800275c:	f7fe f8de 	bl	800091c <HAL_GetTick>
 8002760:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002764:	f7fe f8da 	bl	800091c <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e087      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002776:	4b27      	ldr	r3, [pc, #156]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d1f0      	bne.n	8002764 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	69da      	ldr	r2, [r3, #28]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6a1b      	ldr	r3, [r3, #32]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	019b      	lsls	r3, r3, #6
 8002792:	431a      	orrs	r2, r3
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	3b01      	subs	r3, #1
 800279c:	041b      	lsls	r3, r3, #16
 800279e:	431a      	orrs	r2, r3
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a4:	061b      	lsls	r3, r3, #24
 80027a6:	491b      	ldr	r1, [pc, #108]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ac:	4b1b      	ldr	r3, [pc, #108]	; (800281c <HAL_RCC_OscConfig+0x478>)
 80027ae:	2201      	movs	r2, #1
 80027b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b2:	f7fe f8b3 	bl	800091c <HAL_GetTick>
 80027b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027b8:	e008      	b.n	80027cc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027ba:	f7fe f8af 	bl	800091c <HAL_GetTick>
 80027be:	4602      	mov	r2, r0
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	1ad3      	subs	r3, r2, r3
 80027c4:	2b02      	cmp	r3, #2
 80027c6:	d901      	bls.n	80027cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80027c8:	2303      	movs	r3, #3
 80027ca:	e05c      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027cc:	4b11      	ldr	r3, [pc, #68]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d0f0      	beq.n	80027ba <HAL_RCC_OscConfig+0x416>
 80027d8:	e054      	b.n	8002884 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027da:	4b10      	ldr	r3, [pc, #64]	; (800281c <HAL_RCC_OscConfig+0x478>)
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e0:	f7fe f89c 	bl	800091c <HAL_GetTick>
 80027e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027e6:	e008      	b.n	80027fa <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027e8:	f7fe f898 	bl	800091c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	693b      	ldr	r3, [r7, #16]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d901      	bls.n	80027fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e045      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027fa:	4b06      	ldr	r3, [pc, #24]	; (8002814 <HAL_RCC_OscConfig+0x470>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002802:	2b00      	cmp	r3, #0
 8002804:	d1f0      	bne.n	80027e8 <HAL_RCC_OscConfig+0x444>
 8002806:	e03d      	b.n	8002884 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d107      	bne.n	8002820 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e038      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
 8002814:	40023800 	.word	0x40023800
 8002818:	40007000 	.word	0x40007000
 800281c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002820:	4b1b      	ldr	r3, [pc, #108]	; (8002890 <HAL_RCC_OscConfig+0x4ec>)
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	699b      	ldr	r3, [r3, #24]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d028      	beq.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002838:	429a      	cmp	r2, r3
 800283a:	d121      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002846:	429a      	cmp	r2, r3
 8002848:	d11a      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800284a:	68fa      	ldr	r2, [r7, #12]
 800284c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002850:	4013      	ands	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002856:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002858:	4293      	cmp	r3, r2
 800285a:	d111      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002866:	085b      	lsrs	r3, r3, #1
 8002868:	3b01      	subs	r3, #1
 800286a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800286c:	429a      	cmp	r2, r3
 800286e:	d107      	bne.n	8002880 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800287a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800287c:	429a      	cmp	r2, r3
 800287e:	d001      	beq.n	8002884 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	e000      	b.n	8002886 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3718      	adds	r7, #24
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023800 	.word	0x40023800

08002894 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e0cc      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028a8:	4b68      	ldr	r3, [pc, #416]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0307 	and.w	r3, r3, #7
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d90c      	bls.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028b6:	4b65      	ldr	r3, [pc, #404]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028b8:	683a      	ldr	r2, [r7, #0]
 80028ba:	b2d2      	uxtb	r2, r2
 80028bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	4b63      	ldr	r3, [pc, #396]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0307 	and.w	r3, r3, #7
 80028c6:	683a      	ldr	r2, [r7, #0]
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d001      	beq.n	80028d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e0b8      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d005      	beq.n	80028f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e8:	4b59      	ldr	r3, [pc, #356]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4a58      	ldr	r2, [pc, #352]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80028ee:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80028f2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d005      	beq.n	800290c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002900:	4b53      	ldr	r3, [pc, #332]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002902:	689b      	ldr	r3, [r3, #8]
 8002904:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002906:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800290a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800290c:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	494d      	ldr	r1, [pc, #308]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	4313      	orrs	r3, r2
 800291c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d044      	beq.n	80029b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d107      	bne.n	8002942 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002932:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d119      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e07f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d003      	beq.n	8002952 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800294e:	2b03      	cmp	r3, #3
 8002950:	d107      	bne.n	8002962 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002952:	4b3f      	ldr	r3, [pc, #252]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002962:	4b3b      	ldr	r3, [pc, #236]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f003 0302 	and.w	r3, r3, #2
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e067      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002972:	4b37      	ldr	r3, [pc, #220]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f023 0203 	bic.w	r2, r3, #3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	4934      	ldr	r1, [pc, #208]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002980:	4313      	orrs	r3, r2
 8002982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002984:	f7fd ffca 	bl	800091c <HAL_GetTick>
 8002988:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800298a:	e00a      	b.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800298c:	f7fd ffc6 	bl	800091c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	f241 3288 	movw	r2, #5000	; 0x1388
 800299a:	4293      	cmp	r3, r2
 800299c:	d901      	bls.n	80029a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800299e:	2303      	movs	r3, #3
 80029a0:	e04f      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029a2:	4b2b      	ldr	r3, [pc, #172]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 020c 	and.w	r2, r3, #12
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	429a      	cmp	r2, r3
 80029b2:	d1eb      	bne.n	800298c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029b4:	4b25      	ldr	r3, [pc, #148]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	683a      	ldr	r2, [r7, #0]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d20c      	bcs.n	80029dc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029c2:	4b22      	ldr	r3, [pc, #136]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029c4:	683a      	ldr	r2, [r7, #0]
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ca:	4b20      	ldr	r3, [pc, #128]	; (8002a4c <HAL_RCC_ClockConfig+0x1b8>)
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d001      	beq.n	80029dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e032      	b.n	8002a42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0304 	and.w	r3, r3, #4
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d008      	beq.n	80029fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e8:	4b19      	ldr	r3, [pc, #100]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	68db      	ldr	r3, [r3, #12]
 80029f4:	4916      	ldr	r1, [pc, #88]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0308 	and.w	r3, r3, #8
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a06:	4b12      	ldr	r3, [pc, #72]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a08:	689b      	ldr	r3, [r3, #8]
 8002a0a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	691b      	ldr	r3, [r3, #16]
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	490e      	ldr	r1, [pc, #56]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a1a:	f000 f821 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a1e:	4602      	mov	r2, r0
 8002a20:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	091b      	lsrs	r3, r3, #4
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	490a      	ldr	r1, [pc, #40]	; (8002a54 <HAL_RCC_ClockConfig+0x1c0>)
 8002a2c:	5ccb      	ldrb	r3, [r1, r3]
 8002a2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a32:	4a09      	ldr	r2, [pc, #36]	; (8002a58 <HAL_RCC_ClockConfig+0x1c4>)
 8002a34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a36:	4b09      	ldr	r3, [pc, #36]	; (8002a5c <HAL_RCC_ClockConfig+0x1c8>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7fd ff2a 	bl	8000894 <HAL_InitTick>

  return HAL_OK;
 8002a40:	2300      	movs	r3, #0
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3710      	adds	r7, #16
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40023c00 	.word	0x40023c00
 8002a50:	40023800 	.word	0x40023800
 8002a54:	08006894 	.word	0x08006894
 8002a58:	20000000 	.word	0x20000000
 8002a5c:	20000004 	.word	0x20000004

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a64:	b094      	sub	sp, #80	; 0x50
 8002a66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a68:	2300      	movs	r3, #0
 8002a6a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a70:	2300      	movs	r3, #0
 8002a72:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002a74:	2300      	movs	r3, #0
 8002a76:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a78:	4b79      	ldr	r3, [pc, #484]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d00d      	beq.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x40>
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	f200 80e1 	bhi.w	8002c4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d002      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x34>
 8002a8e:	2b04      	cmp	r3, #4
 8002a90:	d003      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x3a>
 8002a92:	e0db      	b.n	8002c4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a94:	4b73      	ldr	r3, [pc, #460]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a96:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002a98:	e0db      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a9c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a9e:	e0d8      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002aa0:	4b6f      	ldr	r3, [pc, #444]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aa8:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002aaa:	4b6d      	ldr	r3, [pc, #436]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d063      	beq.n	8002b7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ab6:	4b6a      	ldr	r3, [pc, #424]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	099b      	lsrs	r3, r3, #6
 8002abc:	2200      	movs	r2, #0
 8002abe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ac0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ac8:	633b      	str	r3, [r7, #48]	; 0x30
 8002aca:	2300      	movs	r3, #0
 8002acc:	637b      	str	r3, [r7, #52]	; 0x34
 8002ace:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ad2:	4622      	mov	r2, r4
 8002ad4:	462b      	mov	r3, r5
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0159      	lsls	r1, r3, #5
 8002ae0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ae4:	0150      	lsls	r0, r2, #5
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4621      	mov	r1, r4
 8002aec:	1a51      	subs	r1, r2, r1
 8002aee:	6139      	str	r1, [r7, #16]
 8002af0:	4629      	mov	r1, r5
 8002af2:	eb63 0301 	sbc.w	r3, r3, r1
 8002af6:	617b      	str	r3, [r7, #20]
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b04:	4659      	mov	r1, fp
 8002b06:	018b      	lsls	r3, r1, #6
 8002b08:	4651      	mov	r1, sl
 8002b0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b0e:	4651      	mov	r1, sl
 8002b10:	018a      	lsls	r2, r1, #6
 8002b12:	4651      	mov	r1, sl
 8002b14:	ebb2 0801 	subs.w	r8, r2, r1
 8002b18:	4659      	mov	r1, fp
 8002b1a:	eb63 0901 	sbc.w	r9, r3, r1
 8002b1e:	f04f 0200 	mov.w	r2, #0
 8002b22:	f04f 0300 	mov.w	r3, #0
 8002b26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b32:	4690      	mov	r8, r2
 8002b34:	4699      	mov	r9, r3
 8002b36:	4623      	mov	r3, r4
 8002b38:	eb18 0303 	adds.w	r3, r8, r3
 8002b3c:	60bb      	str	r3, [r7, #8]
 8002b3e:	462b      	mov	r3, r5
 8002b40:	eb49 0303 	adc.w	r3, r9, r3
 8002b44:	60fb      	str	r3, [r7, #12]
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	f04f 0300 	mov.w	r3, #0
 8002b4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b52:	4629      	mov	r1, r5
 8002b54:	024b      	lsls	r3, r1, #9
 8002b56:	4621      	mov	r1, r4
 8002b58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002b5c:	4621      	mov	r1, r4
 8002b5e:	024a      	lsls	r2, r1, #9
 8002b60:	4610      	mov	r0, r2
 8002b62:	4619      	mov	r1, r3
 8002b64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b66:	2200      	movs	r2, #0
 8002b68:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002b6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002b70:	f7fd fb32 	bl	80001d8 <__aeabi_uldivmod>
 8002b74:	4602      	mov	r2, r0
 8002b76:	460b      	mov	r3, r1
 8002b78:	4613      	mov	r3, r2
 8002b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b7c:	e058      	b.n	8002c30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b7e:	4b38      	ldr	r3, [pc, #224]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	099b      	lsrs	r3, r3, #6
 8002b84:	2200      	movs	r2, #0
 8002b86:	4618      	mov	r0, r3
 8002b88:	4611      	mov	r1, r2
 8002b8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002b8e:	623b      	str	r3, [r7, #32]
 8002b90:	2300      	movs	r3, #0
 8002b92:	627b      	str	r3, [r7, #36]	; 0x24
 8002b94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b98:	4642      	mov	r2, r8
 8002b9a:	464b      	mov	r3, r9
 8002b9c:	f04f 0000 	mov.w	r0, #0
 8002ba0:	f04f 0100 	mov.w	r1, #0
 8002ba4:	0159      	lsls	r1, r3, #5
 8002ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002baa:	0150      	lsls	r0, r2, #5
 8002bac:	4602      	mov	r2, r0
 8002bae:	460b      	mov	r3, r1
 8002bb0:	4641      	mov	r1, r8
 8002bb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bb6:	4649      	mov	r1, r9
 8002bb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002bc8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002bcc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002bd0:	ebb2 040a 	subs.w	r4, r2, sl
 8002bd4:	eb63 050b 	sbc.w	r5, r3, fp
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	f04f 0300 	mov.w	r3, #0
 8002be0:	00eb      	lsls	r3, r5, #3
 8002be2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002be6:	00e2      	lsls	r2, r4, #3
 8002be8:	4614      	mov	r4, r2
 8002bea:	461d      	mov	r5, r3
 8002bec:	4643      	mov	r3, r8
 8002bee:	18e3      	adds	r3, r4, r3
 8002bf0:	603b      	str	r3, [r7, #0]
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	eb45 0303 	adc.w	r3, r5, r3
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	f04f 0200 	mov.w	r2, #0
 8002bfe:	f04f 0300 	mov.w	r3, #0
 8002c02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c06:	4629      	mov	r1, r5
 8002c08:	028b      	lsls	r3, r1, #10
 8002c0a:	4621      	mov	r1, r4
 8002c0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c10:	4621      	mov	r1, r4
 8002c12:	028a      	lsls	r2, r1, #10
 8002c14:	4610      	mov	r0, r2
 8002c16:	4619      	mov	r1, r3
 8002c18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	61bb      	str	r3, [r7, #24]
 8002c1e:	61fa      	str	r2, [r7, #28]
 8002c20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c24:	f7fd fad8 	bl	80001d8 <__aeabi_uldivmod>
 8002c28:	4602      	mov	r2, r0
 8002c2a:	460b      	mov	r3, r1
 8002c2c:	4613      	mov	r3, r2
 8002c2e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c30:	4b0b      	ldr	r3, [pc, #44]	; (8002c60 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	0c1b      	lsrs	r3, r3, #16
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	3301      	adds	r3, #1
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c40:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c44:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c48:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c4a:	e002      	b.n	8002c52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c4c:	4b05      	ldr	r3, [pc, #20]	; (8002c64 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c4e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3750      	adds	r7, #80	; 0x50
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	00f42400 	.word	0x00f42400
 8002c68:	007a1200 	.word	0x007a1200

08002c6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c70:	4b03      	ldr	r3, [pc, #12]	; (8002c80 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c72:	681b      	ldr	r3, [r3, #0]
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	20000000 	.word	0x20000000

08002c84 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002c84:	b084      	sub	sp, #16
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b084      	sub	sp, #16
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	f107 001c 	add.w	r0, r7, #28
 8002c92:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002c96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d122      	bne.n	8002ce2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ca0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002cb4:	687a      	ldr	r2, [r7, #4]
 8002cb6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68db      	ldr	r3, [r3, #12]
 8002cbc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d105      	bne.n	8002cd6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f001 fbee 	bl	80044b8 <USB_CoreReset>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	73fb      	strb	r3, [r7, #15]
 8002ce0:	e01a      	b.n	8002d18 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f001 fbe2 	bl	80044b8 <USB_CoreReset>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002cf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d106      	bne.n	8002d0c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	639a      	str	r2, [r3, #56]	; 0x38
 8002d0a:	e005      	b.n	8002d18 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002d18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d10b      	bne.n	8002d36 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	f043 0206 	orr.w	r2, r3, #6
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	f043 0220 	orr.w	r2, r3, #32
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3710      	adds	r7, #16
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002d42:	b004      	add	sp, #16
 8002d44:	4770      	bx	lr
	...

08002d48 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	4613      	mov	r3, r2
 8002d54:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002d56:	79fb      	ldrb	r3, [r7, #7]
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d165      	bne.n	8002e28 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002d5c:	68bb      	ldr	r3, [r7, #8]
 8002d5e:	4a41      	ldr	r2, [pc, #260]	; (8002e64 <USB_SetTurnaroundTime+0x11c>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d906      	bls.n	8002d72 <USB_SetTurnaroundTime+0x2a>
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	4a40      	ldr	r2, [pc, #256]	; (8002e68 <USB_SetTurnaroundTime+0x120>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d202      	bcs.n	8002d72 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002d6c:	230f      	movs	r3, #15
 8002d6e:	617b      	str	r3, [r7, #20]
 8002d70:	e062      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	4a3c      	ldr	r2, [pc, #240]	; (8002e68 <USB_SetTurnaroundTime+0x120>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d306      	bcc.n	8002d88 <USB_SetTurnaroundTime+0x40>
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	4a3b      	ldr	r2, [pc, #236]	; (8002e6c <USB_SetTurnaroundTime+0x124>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d202      	bcs.n	8002d88 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002d82:	230e      	movs	r3, #14
 8002d84:	617b      	str	r3, [r7, #20]
 8002d86:	e057      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4a38      	ldr	r2, [pc, #224]	; (8002e6c <USB_SetTurnaroundTime+0x124>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d306      	bcc.n	8002d9e <USB_SetTurnaroundTime+0x56>
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4a37      	ldr	r2, [pc, #220]	; (8002e70 <USB_SetTurnaroundTime+0x128>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d202      	bcs.n	8002d9e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002d98:	230d      	movs	r3, #13
 8002d9a:	617b      	str	r3, [r7, #20]
 8002d9c:	e04c      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4a33      	ldr	r2, [pc, #204]	; (8002e70 <USB_SetTurnaroundTime+0x128>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d306      	bcc.n	8002db4 <USB_SetTurnaroundTime+0x6c>
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	4a32      	ldr	r2, [pc, #200]	; (8002e74 <USB_SetTurnaroundTime+0x12c>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d802      	bhi.n	8002db4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002dae:	230c      	movs	r3, #12
 8002db0:	617b      	str	r3, [r7, #20]
 8002db2:	e041      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	4a2f      	ldr	r2, [pc, #188]	; (8002e74 <USB_SetTurnaroundTime+0x12c>)
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d906      	bls.n	8002dca <USB_SetTurnaroundTime+0x82>
 8002dbc:	68bb      	ldr	r3, [r7, #8]
 8002dbe:	4a2e      	ldr	r2, [pc, #184]	; (8002e78 <USB_SetTurnaroundTime+0x130>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d802      	bhi.n	8002dca <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002dc4:	230b      	movs	r3, #11
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e036      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002dca:	68bb      	ldr	r3, [r7, #8]
 8002dcc:	4a2a      	ldr	r2, [pc, #168]	; (8002e78 <USB_SetTurnaroundTime+0x130>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d906      	bls.n	8002de0 <USB_SetTurnaroundTime+0x98>
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	4a29      	ldr	r2, [pc, #164]	; (8002e7c <USB_SetTurnaroundTime+0x134>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d802      	bhi.n	8002de0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002dda:	230a      	movs	r3, #10
 8002ddc:	617b      	str	r3, [r7, #20]
 8002dde:	e02b      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	4a26      	ldr	r2, [pc, #152]	; (8002e7c <USB_SetTurnaroundTime+0x134>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d906      	bls.n	8002df6 <USB_SetTurnaroundTime+0xae>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a25      	ldr	r2, [pc, #148]	; (8002e80 <USB_SetTurnaroundTime+0x138>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d202      	bcs.n	8002df6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002df0:	2309      	movs	r3, #9
 8002df2:	617b      	str	r3, [r7, #20]
 8002df4:	e020      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	4a21      	ldr	r2, [pc, #132]	; (8002e80 <USB_SetTurnaroundTime+0x138>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d306      	bcc.n	8002e0c <USB_SetTurnaroundTime+0xc4>
 8002dfe:	68bb      	ldr	r3, [r7, #8]
 8002e00:	4a20      	ldr	r2, [pc, #128]	; (8002e84 <USB_SetTurnaroundTime+0x13c>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d802      	bhi.n	8002e0c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002e06:	2308      	movs	r3, #8
 8002e08:	617b      	str	r3, [r7, #20]
 8002e0a:	e015      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8002e0c:	68bb      	ldr	r3, [r7, #8]
 8002e0e:	4a1d      	ldr	r2, [pc, #116]	; (8002e84 <USB_SetTurnaroundTime+0x13c>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d906      	bls.n	8002e22 <USB_SetTurnaroundTime+0xda>
 8002e14:	68bb      	ldr	r3, [r7, #8]
 8002e16:	4a1c      	ldr	r2, [pc, #112]	; (8002e88 <USB_SetTurnaroundTime+0x140>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d202      	bcs.n	8002e22 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8002e1c:	2307      	movs	r3, #7
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e00a      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8002e22:	2306      	movs	r3, #6
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e007      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8002e28:	79fb      	ldrb	r3, [r7, #7]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d102      	bne.n	8002e34 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8002e2e:	2309      	movs	r3, #9
 8002e30:	617b      	str	r3, [r7, #20]
 8002e32:	e001      	b.n	8002e38 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8002e34:	2309      	movs	r3, #9
 8002e36:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	68da      	ldr	r2, [r3, #12]
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	029b      	lsls	r3, r3, #10
 8002e4c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8002e50:	431a      	orrs	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	371c      	adds	r7, #28
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	00d8acbf 	.word	0x00d8acbf
 8002e68:	00e4e1c0 	.word	0x00e4e1c0
 8002e6c:	00f42400 	.word	0x00f42400
 8002e70:	01067380 	.word	0x01067380
 8002e74:	011a499f 	.word	0x011a499f
 8002e78:	01312cff 	.word	0x01312cff
 8002e7c:	014ca43f 	.word	0x014ca43f
 8002e80:	016e3600 	.word	0x016e3600
 8002e84:	01a6ab1f 	.word	0x01a6ab1f
 8002e88:	01e84800 	.word	0x01e84800

08002e8c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f043 0201 	orr.w	r2, r3, #1
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ea0:	2300      	movs	r3, #0
}
 8002ea2:	4618      	mov	r0, r3
 8002ea4:	370c      	adds	r7, #12
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr

08002eae <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	689b      	ldr	r3, [r3, #8]
 8002eba:	f023 0201 	bic.w	r2, r3, #1
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8002eec:	78fb      	ldrb	r3, [r7, #3]
 8002eee:	2b01      	cmp	r3, #1
 8002ef0:	d115      	bne.n	8002f1e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7fd fd18 	bl	8000934 <HAL_Delay>
      ms++;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	3301      	adds	r3, #1
 8002f08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f001 fa45 	bl	800439a <USB_GetMode>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b01      	cmp	r3, #1
 8002f14:	d01e      	beq.n	8002f54 <USB_SetCurrentMode+0x84>
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2b31      	cmp	r3, #49	; 0x31
 8002f1a:	d9f0      	bls.n	8002efe <USB_SetCurrentMode+0x2e>
 8002f1c:	e01a      	b.n	8002f54 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8002f1e:	78fb      	ldrb	r3, [r7, #3]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d115      	bne.n	8002f50 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	68db      	ldr	r3, [r3, #12]
 8002f28:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8002f30:	2001      	movs	r0, #1
 8002f32:	f7fd fcff 	bl	8000934 <HAL_Delay>
      ms++;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f001 fa2c 	bl	800439a <USB_GetMode>
 8002f42:	4603      	mov	r3, r0
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d005      	beq.n	8002f54 <USB_SetCurrentMode+0x84>
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b31      	cmp	r3, #49	; 0x31
 8002f4c:	d9f0      	bls.n	8002f30 <USB_SetCurrentMode+0x60>
 8002f4e:	e001      	b.n	8002f54 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8002f50:	2301      	movs	r3, #1
 8002f52:	e005      	b.n	8002f60 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2b32      	cmp	r3, #50	; 0x32
 8002f58:	d101      	bne.n	8002f5e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8002f5e:	2300      	movs	r3, #0
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3710      	adds	r7, #16
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002f68:	b084      	sub	sp, #16
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b086      	sub	sp, #24
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
 8002f72:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8002f76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8002f82:	2300      	movs	r3, #0
 8002f84:	613b      	str	r3, [r7, #16]
 8002f86:	e009      	b.n	8002f9c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8002f88:	687a      	ldr	r2, [r7, #4]
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	3340      	adds	r3, #64	; 0x40
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	2200      	movs	r2, #0
 8002f94:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	613b      	str	r3, [r7, #16]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	2b0e      	cmp	r3, #14
 8002fa0:	d9f2      	bls.n	8002f88 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8002fa2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d11c      	bne.n	8002fe2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	68fa      	ldr	r2, [r7, #12]
 8002fb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fb6:	f043 0302 	orr.w	r3, r3, #2
 8002fba:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fc0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	639a      	str	r2, [r3, #56]	; 0x38
 8002fe0:	e00b      	b.n	8002ffa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fe6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003000:	461a      	mov	r2, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800300c:	4619      	mov	r1, r3
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003014:	461a      	mov	r2, r3
 8003016:	680b      	ldr	r3, [r1, #0]
 8003018:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800301a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800301c:	2b01      	cmp	r3, #1
 800301e:	d10c      	bne.n	800303a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003020:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003022:	2b00      	cmp	r3, #0
 8003024:	d104      	bne.n	8003030 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003026:	2100      	movs	r1, #0
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 f965 	bl	80032f8 <USB_SetDevSpeed>
 800302e:	e008      	b.n	8003042 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003030:	2101      	movs	r1, #1
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f960 	bl	80032f8 <USB_SetDevSpeed>
 8003038:	e003      	b.n	8003042 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800303a:	2103      	movs	r1, #3
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	f000 f95b 	bl	80032f8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003042:	2110      	movs	r1, #16
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f8f3 	bl	8003230 <USB_FlushTxFifo>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f91f 	bl	8003298 <USB_FlushRxFifo>
 800305a:	4603      	mov	r3, r0
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800306a:	461a      	mov	r2, r3
 800306c:	2300      	movs	r3, #0
 800306e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003076:	461a      	mov	r2, r3
 8003078:	2300      	movs	r3, #0
 800307a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003082:	461a      	mov	r2, r3
 8003084:	2300      	movs	r3, #0
 8003086:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]
 800308c:	e043      	b.n	8003116 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	4413      	add	r3, r2
 8003096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80030a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80030a4:	d118      	bne.n	80030d8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d10a      	bne.n	80030c2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030b8:	461a      	mov	r2, r3
 80030ba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80030be:	6013      	str	r3, [r2, #0]
 80030c0:	e013      	b.n	80030ea <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	015a      	lsls	r2, r3, #5
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4413      	add	r3, r2
 80030ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030ce:	461a      	mov	r2, r3
 80030d0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e008      	b.n	80030ea <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	015a      	lsls	r2, r3, #5
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4413      	add	r3, r2
 80030e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030e4:	461a      	mov	r2, r3
 80030e6:	2300      	movs	r3, #0
 80030e8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80030f6:	461a      	mov	r2, r3
 80030f8:	2300      	movs	r3, #0
 80030fa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	4413      	add	r3, r2
 8003104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003108:	461a      	mov	r2, r3
 800310a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800310e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	3301      	adds	r3, #1
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	429a      	cmp	r2, r3
 800311c:	d3b7      	bcc.n	800308e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	e043      	b.n	80031ac <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	015a      	lsls	r2, r3, #5
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	4413      	add	r3, r2
 800312c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003136:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800313a:	d118      	bne.n	800316e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800313c:	693b      	ldr	r3, [r7, #16]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d10a      	bne.n	8003158 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	015a      	lsls	r2, r3, #5
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	4413      	add	r3, r2
 800314a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800314e:	461a      	mov	r2, r3
 8003150:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003154:	6013      	str	r3, [r2, #0]
 8003156:	e013      	b.n	8003180 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	015a      	lsls	r2, r3, #5
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	4413      	add	r3, r2
 8003160:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003164:	461a      	mov	r2, r3
 8003166:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800316a:	6013      	str	r3, [r2, #0]
 800316c:	e008      	b.n	8003180 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	4413      	add	r3, r2
 8003176:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800317a:	461a      	mov	r2, r3
 800317c:	2300      	movs	r3, #0
 800317e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003180:	693b      	ldr	r3, [r7, #16]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	4413      	add	r3, r2
 8003188:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800318c:	461a      	mov	r2, r3
 800318e:	2300      	movs	r3, #0
 8003190:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	015a      	lsls	r2, r3, #5
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	4413      	add	r3, r2
 800319a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800319e:	461a      	mov	r2, r3
 80031a0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80031a4:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	3301      	adds	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ae:	693a      	ldr	r2, [r7, #16]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d3b7      	bcc.n	8003124 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031ba:	691b      	ldr	r3, [r3, #16]
 80031bc:	68fa      	ldr	r2, [r7, #12]
 80031be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031c2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80031c6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80031d4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80031d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d105      	bne.n	80031e8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	f043 0210 	orr.w	r2, r3, #16
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699a      	ldr	r2, [r3, #24]
 80031ec:	4b0f      	ldr	r3, [pc, #60]	; (800322c <USB_DevInit+0x2c4>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80031f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	f043 0208 	orr.w	r2, r3, #8
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003208:	2b01      	cmp	r3, #1
 800320a:	d107      	bne.n	800321c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	699b      	ldr	r3, [r3, #24]
 8003210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003214:	f043 0304 	orr.w	r3, r3, #4
 8003218:	687a      	ldr	r2, [r7, #4]
 800321a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800321c:	7dfb      	ldrb	r3, [r7, #23]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003228:	b004      	add	sp, #16
 800322a:	4770      	bx	lr
 800322c:	803c3800 	.word	0x803c3800

08003230 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003230:	b480      	push	{r7}
 8003232:	b085      	sub	sp, #20
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800323a:	2300      	movs	r3, #0
 800323c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3301      	adds	r3, #1
 8003242:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	4a13      	ldr	r2, [pc, #76]	; (8003294 <USB_FlushTxFifo+0x64>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d901      	bls.n	8003250 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e01b      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	691b      	ldr	r3, [r3, #16]
 8003254:	2b00      	cmp	r3, #0
 8003256:	daf2      	bge.n	800323e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003258:	2300      	movs	r3, #0
 800325a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	f043 0220 	orr.w	r2, r3, #32
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	3301      	adds	r3, #1
 800326c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	4a08      	ldr	r2, [pc, #32]	; (8003294 <USB_FlushTxFifo+0x64>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d901      	bls.n	800327a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e006      	b.n	8003288 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b20      	cmp	r3, #32
 8003284:	d0f0      	beq.n	8003268 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3714      	adds	r7, #20
 800328c:	46bd      	mov	sp, r7
 800328e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003292:	4770      	bx	lr
 8003294:	00030d40 	.word	0x00030d40

08003298 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003298:	b480      	push	{r7}
 800329a:	b085      	sub	sp, #20
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	3301      	adds	r3, #1
 80032a8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	4a11      	ldr	r2, [pc, #68]	; (80032f4 <USB_FlushRxFifo+0x5c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d901      	bls.n	80032b6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e018      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	daf2      	bge.n	80032a4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80032be:	2300      	movs	r3, #0
 80032c0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	2210      	movs	r2, #16
 80032c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	3301      	adds	r3, #1
 80032cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	4a08      	ldr	r2, [pc, #32]	; (80032f4 <USB_FlushRxFifo+0x5c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d901      	bls.n	80032da <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e006      	b.n	80032e8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	691b      	ldr	r3, [r3, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b10      	cmp	r3, #16
 80032e4:	d0f0      	beq.n	80032c8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3714      	adds	r7, #20
 80032ec:	46bd      	mov	sp, r7
 80032ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f2:	4770      	bx	lr
 80032f4:	00030d40 	.word	0x00030d40

080032f8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	460b      	mov	r3, r1
 8003302:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	78fb      	ldrb	r3, [r7, #3]
 8003312:	68f9      	ldr	r1, [r7, #12]
 8003314:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003318:	4313      	orrs	r3, r2
 800331a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800331c:	2300      	movs	r3, #0
}
 800331e:	4618      	mov	r0, r3
 8003320:	3714      	adds	r7, #20
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr

0800332a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800332a:	b480      	push	{r7}
 800332c:	b087      	sub	sp, #28
 800332e:	af00      	add	r7, sp, #0
 8003330:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	f003 0306 	and.w	r3, r3, #6
 8003342:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d102      	bne.n	8003350 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800334a:	2300      	movs	r3, #0
 800334c:	75fb      	strb	r3, [r7, #23]
 800334e:	e00a      	b.n	8003366 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d002      	beq.n	800335c <USB_GetDevSpeed+0x32>
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b06      	cmp	r3, #6
 800335a:	d102      	bne.n	8003362 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800335c:	2302      	movs	r3, #2
 800335e:	75fb      	strb	r3, [r7, #23]
 8003360:	e001      	b.n	8003366 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003362:	230f      	movs	r3, #15
 8003364:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003366:	7dfb      	ldrb	r3, [r7, #23]
}
 8003368:	4618      	mov	r0, r3
 800336a:	371c      	adds	r7, #28
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr

08003374 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	781b      	ldrb	r3, [r3, #0]
 8003386:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	785b      	ldrb	r3, [r3, #1]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d13a      	bne.n	8003406 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	f003 030f 	and.w	r3, r3, #15
 80033a0:	2101      	movs	r1, #1
 80033a2:	fa01 f303 	lsl.w	r3, r1, r3
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	68f9      	ldr	r1, [r7, #12]
 80033aa:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	015a      	lsls	r2, r3, #5
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	4413      	add	r3, r2
 80033ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d155      	bne.n	8003474 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68db      	ldr	r3, [r3, #12]
 80033da:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	791b      	ldrb	r3, [r3, #4]
 80033e2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033e4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	059b      	lsls	r3, r3, #22
 80033ea:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80033ec:	4313      	orrs	r3, r2
 80033ee:	68ba      	ldr	r2, [r7, #8]
 80033f0:	0151      	lsls	r1, r2, #5
 80033f2:	68fa      	ldr	r2, [r7, #12]
 80033f4:	440a      	add	r2, r1
 80033f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80033fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80033fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003402:	6013      	str	r3, [r2, #0]
 8003404:	e036      	b.n	8003474 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800340c:	69da      	ldr	r2, [r3, #28]
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	f003 030f 	and.w	r3, r3, #15
 8003416:	2101      	movs	r1, #1
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	041b      	lsls	r3, r3, #16
 800341e:	68f9      	ldr	r1, [r7, #12]
 8003420:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003424:	4313      	orrs	r3, r2
 8003426:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	4413      	add	r3, r2
 8003430:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d11a      	bne.n	8003474 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	015a      	lsls	r2, r3, #5
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	4413      	add	r3, r2
 8003446:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	791b      	ldrb	r3, [r3, #4]
 8003458:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800345a:	430b      	orrs	r3, r1
 800345c:	4313      	orrs	r3, r2
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	0151      	lsls	r1, r2, #5
 8003462:	68fa      	ldr	r2, [r7, #12]
 8003464:	440a      	add	r2, r1
 8003466:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800346a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	3714      	adds	r7, #20
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
	...

08003484 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003484:	b480      	push	{r7}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	785b      	ldrb	r3, [r3, #1]
 800349c:	2b01      	cmp	r3, #1
 800349e:	d161      	bne.n	8003564 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	015a      	lsls	r2, r3, #5
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	4413      	add	r3, r2
 80034a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80034b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034b6:	d11f      	bne.n	80034f8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80034b8:	68bb      	ldr	r3, [r7, #8]
 80034ba:	015a      	lsls	r2, r3, #5
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	4413      	add	r3, r2
 80034c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68ba      	ldr	r2, [r7, #8]
 80034c8:	0151      	lsls	r1, r2, #5
 80034ca:	68fa      	ldr	r2, [r7, #12]
 80034cc:	440a      	add	r2, r1
 80034ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034d2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80034d6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	015a      	lsls	r2, r3, #5
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	4413      	add	r3, r2
 80034e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	0151      	lsls	r1, r2, #5
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	440a      	add	r2, r1
 80034ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80034f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034f6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	f003 030f 	and.w	r3, r3, #15
 8003508:	2101      	movs	r1, #1
 800350a:	fa01 f303 	lsl.w	r3, r1, r3
 800350e:	b29b      	uxth	r3, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	68f9      	ldr	r1, [r7, #12]
 8003514:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003518:	4013      	ands	r3, r2
 800351a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003522:	69da      	ldr	r2, [r3, #28]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	781b      	ldrb	r3, [r3, #0]
 8003528:	f003 030f 	and.w	r3, r3, #15
 800352c:	2101      	movs	r1, #1
 800352e:	fa01 f303 	lsl.w	r3, r1, r3
 8003532:	b29b      	uxth	r3, r3
 8003534:	43db      	mvns	r3, r3
 8003536:	68f9      	ldr	r1, [r7, #12]
 8003538:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800353c:	4013      	ands	r3, r2
 800353e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	015a      	lsls	r2, r3, #5
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	4413      	add	r3, r2
 8003548:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	0159      	lsls	r1, r3, #5
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	440b      	add	r3, r1
 8003556:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800355a:	4619      	mov	r1, r3
 800355c:	4b35      	ldr	r3, [pc, #212]	; (8003634 <USB_DeactivateEndpoint+0x1b0>)
 800355e:	4013      	ands	r3, r2
 8003560:	600b      	str	r3, [r1, #0]
 8003562:	e060      	b.n	8003626 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	015a      	lsls	r2, r3, #5
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	4413      	add	r3, r2
 800356c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003576:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800357a:	d11f      	bne.n	80035bc <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	4413      	add	r3, r2
 8003584:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	440a      	add	r2, r1
 8003592:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003596:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800359a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800359c:	68bb      	ldr	r3, [r7, #8]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68ba      	ldr	r2, [r7, #8]
 80035ac:	0151      	lsls	r1, r2, #5
 80035ae:	68fa      	ldr	r2, [r7, #12]
 80035b0:	440a      	add	r2, r1
 80035b2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80035b6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80035ba:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	781b      	ldrb	r3, [r3, #0]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	2101      	movs	r1, #1
 80035ce:	fa01 f303 	lsl.w	r3, r1, r3
 80035d2:	041b      	lsls	r3, r3, #16
 80035d4:	43db      	mvns	r3, r3
 80035d6:	68f9      	ldr	r1, [r7, #12]
 80035d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035dc:	4013      	ands	r3, r2
 80035de:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	2101      	movs	r1, #1
 80035f2:	fa01 f303 	lsl.w	r3, r1, r3
 80035f6:	041b      	lsls	r3, r3, #16
 80035f8:	43db      	mvns	r3, r3
 80035fa:	68f9      	ldr	r1, [r7, #12]
 80035fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003600:	4013      	ands	r3, r2
 8003602:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003604:	68bb      	ldr	r3, [r7, #8]
 8003606:	015a      	lsls	r2, r3, #5
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	4413      	add	r3, r2
 800360c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	0159      	lsls	r1, r3, #5
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	440b      	add	r3, r1
 800361a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800361e:	4619      	mov	r1, r3
 8003620:	4b05      	ldr	r3, [pc, #20]	; (8003638 <USB_DeactivateEndpoint+0x1b4>)
 8003622:	4013      	ands	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3714      	adds	r7, #20
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	ec337800 	.word	0xec337800
 8003638:	eff37800 	.word	0xeff37800

0800363c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b08a      	sub	sp, #40	; 0x28
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	4613      	mov	r3, r2
 8003648:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	781b      	ldrb	r3, [r3, #0]
 8003652:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	785b      	ldrb	r3, [r3, #1]
 8003658:	2b01      	cmp	r3, #1
 800365a:	f040 815c 	bne.w	8003916 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	699b      	ldr	r3, [r3, #24]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d132      	bne.n	80036cc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	015a      	lsls	r2, r3, #5
 800366a:	69fb      	ldr	r3, [r7, #28]
 800366c:	4413      	add	r3, r2
 800366e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	69ba      	ldr	r2, [r7, #24]
 8003676:	0151      	lsls	r1, r2, #5
 8003678:	69fa      	ldr	r2, [r7, #28]
 800367a:	440a      	add	r2, r1
 800367c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003680:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003684:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003688:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	015a      	lsls	r2, r3, #5
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	0151      	lsls	r1, r2, #5
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	440a      	add	r2, r1
 80036a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036a4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80036a8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b6:	691b      	ldr	r3, [r3, #16]
 80036b8:	69ba      	ldr	r2, [r7, #24]
 80036ba:	0151      	lsls	r1, r2, #5
 80036bc:	69fa      	ldr	r2, [r7, #28]
 80036be:	440a      	add	r2, r1
 80036c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c4:	0cdb      	lsrs	r3, r3, #19
 80036c6:	04db      	lsls	r3, r3, #19
 80036c8:	6113      	str	r3, [r2, #16]
 80036ca:	e074      	b.n	80037b6 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	691b      	ldr	r3, [r3, #16]
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	69fa      	ldr	r2, [r7, #28]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	0cdb      	lsrs	r3, r3, #19
 80036e8:	04db      	lsls	r3, r3, #19
 80036ea:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036f8:	691b      	ldr	r3, [r3, #16]
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	0151      	lsls	r1, r2, #5
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	440a      	add	r2, r1
 8003702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003706:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800370a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800370e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003710:	69bb      	ldr	r3, [r7, #24]
 8003712:	015a      	lsls	r2, r3, #5
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	4413      	add	r3, r2
 8003718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800371c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	6999      	ldr	r1, [r3, #24]
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	68db      	ldr	r3, [r3, #12]
 8003726:	440b      	add	r3, r1
 8003728:	1e59      	subs	r1, r3, #1
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	68db      	ldr	r3, [r3, #12]
 800372e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003732:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003734:	4b9d      	ldr	r3, [pc, #628]	; (80039ac <USB_EPStartXfer+0x370>)
 8003736:	400b      	ands	r3, r1
 8003738:	69b9      	ldr	r1, [r7, #24]
 800373a:	0148      	lsls	r0, r1, #5
 800373c:	69f9      	ldr	r1, [r7, #28]
 800373e:	4401      	add	r1, r0
 8003740:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003744:	4313      	orrs	r3, r2
 8003746:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	015a      	lsls	r2, r3, #5
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	4413      	add	r3, r2
 8003750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003754:	691a      	ldr	r2, [r3, #16]
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375e:	69b9      	ldr	r1, [r7, #24]
 8003760:	0148      	lsls	r0, r1, #5
 8003762:	69f9      	ldr	r1, [r7, #28]
 8003764:	4401      	add	r1, r0
 8003766:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800376a:	4313      	orrs	r3, r2
 800376c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	791b      	ldrb	r3, [r3, #4]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d11f      	bne.n	80037b6 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003776:	69bb      	ldr	r3, [r7, #24]
 8003778:	015a      	lsls	r2, r3, #5
 800377a:	69fb      	ldr	r3, [r7, #28]
 800377c:	4413      	add	r3, r2
 800377e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	69ba      	ldr	r2, [r7, #24]
 8003786:	0151      	lsls	r1, r2, #5
 8003788:	69fa      	ldr	r2, [r7, #28]
 800378a:	440a      	add	r2, r1
 800378c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003790:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003794:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	015a      	lsls	r2, r3, #5
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	4413      	add	r3, r2
 800379e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037a2:	691b      	ldr	r3, [r3, #16]
 80037a4:	69ba      	ldr	r2, [r7, #24]
 80037a6:	0151      	lsls	r1, r2, #5
 80037a8:	69fa      	ldr	r2, [r7, #28]
 80037aa:	440a      	add	r2, r1
 80037ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80037b0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037b4:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80037b6:	79fb      	ldrb	r3, [r7, #7]
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d14b      	bne.n	8003854 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	695b      	ldr	r3, [r3, #20]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d009      	beq.n	80037d8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80037c4:	69bb      	ldr	r3, [r7, #24]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69fb      	ldr	r3, [r7, #28]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037d0:	461a      	mov	r2, r3
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	695b      	ldr	r3, [r3, #20]
 80037d6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	791b      	ldrb	r3, [r3, #4]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d128      	bne.n	8003832 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d110      	bne.n	8003812 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80037f0:	69bb      	ldr	r3, [r7, #24]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69fb      	ldr	r3, [r7, #28]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	69ba      	ldr	r2, [r7, #24]
 8003800:	0151      	lsls	r1, r2, #5
 8003802:	69fa      	ldr	r2, [r7, #28]
 8003804:	440a      	add	r2, r1
 8003806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800380a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	e00f      	b.n	8003832 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	015a      	lsls	r2, r3, #5
 8003816:	69fb      	ldr	r3, [r7, #28]
 8003818:	4413      	add	r3, r2
 800381a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	69ba      	ldr	r2, [r7, #24]
 8003822:	0151      	lsls	r1, r2, #5
 8003824:	69fa      	ldr	r2, [r7, #28]
 8003826:	440a      	add	r2, r1
 8003828:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800382c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003830:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003832:	69bb      	ldr	r3, [r7, #24]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	0151      	lsls	r1, r2, #5
 8003844:	69fa      	ldr	r2, [r7, #28]
 8003846:	440a      	add	r2, r1
 8003848:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800384c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003850:	6013      	str	r3, [r2, #0]
 8003852:	e133      	b.n	8003abc <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	015a      	lsls	r2, r3, #5
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	4413      	add	r3, r2
 800385c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	69ba      	ldr	r2, [r7, #24]
 8003864:	0151      	lsls	r1, r2, #5
 8003866:	69fa      	ldr	r2, [r7, #28]
 8003868:	440a      	add	r2, r1
 800386a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800386e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003872:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	791b      	ldrb	r3, [r3, #4]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d015      	beq.n	80038a8 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	699b      	ldr	r3, [r3, #24]
 8003880:	2b00      	cmp	r3, #0
 8003882:	f000 811b 	beq.w	8003abc <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003886:	69fb      	ldr	r3, [r7, #28]
 8003888:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800388c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800388e:	68bb      	ldr	r3, [r7, #8]
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	f003 030f 	and.w	r3, r3, #15
 8003896:	2101      	movs	r1, #1
 8003898:	fa01 f303 	lsl.w	r3, r1, r3
 800389c:	69f9      	ldr	r1, [r7, #28]
 800389e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80038a2:	4313      	orrs	r3, r2
 80038a4:	634b      	str	r3, [r1, #52]	; 0x34
 80038a6:	e109      	b.n	8003abc <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d110      	bne.n	80038da <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80038b8:	69bb      	ldr	r3, [r7, #24]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	0151      	lsls	r1, r2, #5
 80038ca:	69fa      	ldr	r2, [r7, #28]
 80038cc:	440a      	add	r2, r1
 80038ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038d2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038d6:	6013      	str	r3, [r2, #0]
 80038d8:	e00f      	b.n	80038fa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	015a      	lsls	r2, r3, #5
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	4413      	add	r3, r2
 80038e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	0151      	lsls	r1, r2, #5
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	440a      	add	r2, r1
 80038f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038f8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	6919      	ldr	r1, [r3, #16]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	781a      	ldrb	r2, [r3, #0]
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	699b      	ldr	r3, [r3, #24]
 8003906:	b298      	uxth	r0, r3
 8003908:	79fb      	ldrb	r3, [r7, #7]
 800390a:	9300      	str	r3, [sp, #0]
 800390c:	4603      	mov	r3, r0
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f000 fade 	bl	8003ed0 <USB_WritePacket>
 8003914:	e0d2      	b.n	8003abc <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	015a      	lsls	r2, r3, #5
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	4413      	add	r3, r2
 800391e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003922:	691b      	ldr	r3, [r3, #16]
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	0151      	lsls	r1, r2, #5
 8003928:	69fa      	ldr	r2, [r7, #28]
 800392a:	440a      	add	r2, r1
 800392c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003930:	0cdb      	lsrs	r3, r3, #19
 8003932:	04db      	lsls	r3, r3, #19
 8003934:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003936:	69bb      	ldr	r3, [r7, #24]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	69fb      	ldr	r3, [r7, #28]
 800393c:	4413      	add	r3, r2
 800393e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	69ba      	ldr	r2, [r7, #24]
 8003946:	0151      	lsls	r1, r2, #5
 8003948:	69fa      	ldr	r2, [r7, #28]
 800394a:	440a      	add	r2, r1
 800394c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003950:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003954:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003958:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	699b      	ldr	r3, [r3, #24]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d126      	bne.n	80039b0 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003962:	69bb      	ldr	r3, [r7, #24]
 8003964:	015a      	lsls	r2, r3, #5
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	4413      	add	r3, r2
 800396a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800396e:	691a      	ldr	r2, [r3, #16]
 8003970:	68bb      	ldr	r3, [r7, #8]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003978:	69b9      	ldr	r1, [r7, #24]
 800397a:	0148      	lsls	r0, r1, #5
 800397c:	69f9      	ldr	r1, [r7, #28]
 800397e:	4401      	add	r1, r0
 8003980:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003984:	4313      	orrs	r3, r2
 8003986:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003988:	69bb      	ldr	r3, [r7, #24]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	691b      	ldr	r3, [r3, #16]
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	0151      	lsls	r1, r2, #5
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	440a      	add	r2, r1
 800399e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80039a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80039a6:	6113      	str	r3, [r2, #16]
 80039a8:	e03a      	b.n	8003a20 <USB_EPStartXfer+0x3e4>
 80039aa:	bf00      	nop
 80039ac:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	699a      	ldr	r2, [r3, #24]
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	68db      	ldr	r3, [r3, #12]
 80039b8:	4413      	add	r3, r2
 80039ba:	1e5a      	subs	r2, r3, #1
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	68db      	ldr	r3, [r3, #12]
 80039c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	68db      	ldr	r3, [r3, #12]
 80039ca:	8afa      	ldrh	r2, [r7, #22]
 80039cc:	fb03 f202 	mul.w	r2, r3, r2
 80039d0:	68bb      	ldr	r3, [r7, #8]
 80039d2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	691a      	ldr	r2, [r3, #16]
 80039e2:	8afb      	ldrh	r3, [r7, #22]
 80039e4:	04d9      	lsls	r1, r3, #19
 80039e6:	4b38      	ldr	r3, [pc, #224]	; (8003ac8 <USB_EPStartXfer+0x48c>)
 80039e8:	400b      	ands	r3, r1
 80039ea:	69b9      	ldr	r1, [r7, #24]
 80039ec:	0148      	lsls	r0, r1, #5
 80039ee:	69f9      	ldr	r1, [r7, #28]
 80039f0:	4401      	add	r1, r0
 80039f2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80039f6:	4313      	orrs	r3, r2
 80039f8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	015a      	lsls	r2, r3, #5
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	4413      	add	r3, r2
 8003a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a06:	691a      	ldr	r2, [r3, #16]
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a10:	69b9      	ldr	r1, [r7, #24]
 8003a12:	0148      	lsls	r0, r1, #5
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	4401      	add	r1, r0
 8003a18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003a20:	79fb      	ldrb	r3, [r7, #7]
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d10d      	bne.n	8003a42 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d009      	beq.n	8003a42 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003a2e:	68bb      	ldr	r3, [r7, #8]
 8003a30:	6919      	ldr	r1, [r3, #16]
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	015a      	lsls	r2, r3, #5
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	4413      	add	r3, r2
 8003a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a3e:	460a      	mov	r2, r1
 8003a40:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	791b      	ldrb	r3, [r3, #4]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d128      	bne.n	8003a9c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d110      	bne.n	8003a7c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	015a      	lsls	r2, r3, #5
 8003a5e:	69fb      	ldr	r3, [r7, #28]
 8003a60:	4413      	add	r3, r2
 8003a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	0151      	lsls	r1, r2, #5
 8003a6c:	69fa      	ldr	r2, [r7, #28]
 8003a6e:	440a      	add	r2, r1
 8003a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a74:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a78:	6013      	str	r3, [r2, #0]
 8003a7a:	e00f      	b.n	8003a9c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	015a      	lsls	r2, r3, #5
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	4413      	add	r3, r2
 8003a84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	0151      	lsls	r1, r2, #5
 8003a8e:	69fa      	ldr	r2, [r7, #28]
 8003a90:	440a      	add	r2, r1
 8003a92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a9a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003a9c:	69bb      	ldr	r3, [r7, #24]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	69ba      	ldr	r2, [r7, #24]
 8003aac:	0151      	lsls	r1, r2, #5
 8003aae:	69fa      	ldr	r2, [r7, #28]
 8003ab0:	440a      	add	r2, r1
 8003ab2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ab6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003aba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3720      	adds	r7, #32
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	1ff80000 	.word	0x1ff80000

08003acc <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b087      	sub	sp, #28
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	60f8      	str	r0, [r7, #12]
 8003ad4:	60b9      	str	r1, [r7, #8]
 8003ad6:	4613      	mov	r3, r2
 8003ad8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	785b      	ldrb	r3, [r3, #1]
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	f040 80ce 	bne.w	8003c8a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d132      	bne.n	8003b5c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	015a      	lsls	r2, r3, #5
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	4413      	add	r3, r2
 8003afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b02:	691b      	ldr	r3, [r3, #16]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	0151      	lsls	r1, r2, #5
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	440a      	add	r2, r1
 8003b0c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b10:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b14:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b18:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b26:	691b      	ldr	r3, [r3, #16]
 8003b28:	693a      	ldr	r2, [r7, #16]
 8003b2a:	0151      	lsls	r1, r2, #5
 8003b2c:	697a      	ldr	r2, [r7, #20]
 8003b2e:	440a      	add	r2, r1
 8003b30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b34:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	015a      	lsls	r2, r3, #5
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	4413      	add	r3, r2
 8003b42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b46:	691b      	ldr	r3, [r3, #16]
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	0151      	lsls	r1, r2, #5
 8003b4c:	697a      	ldr	r2, [r7, #20]
 8003b4e:	440a      	add	r2, r1
 8003b50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b54:	0cdb      	lsrs	r3, r3, #19
 8003b56:	04db      	lsls	r3, r3, #19
 8003b58:	6113      	str	r3, [r2, #16]
 8003b5a:	e04e      	b.n	8003bfa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	015a      	lsls	r2, r3, #5
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	4413      	add	r3, r2
 8003b64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	0151      	lsls	r1, r2, #5
 8003b6e:	697a      	ldr	r2, [r7, #20]
 8003b70:	440a      	add	r2, r1
 8003b72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b76:	0cdb      	lsrs	r3, r3, #19
 8003b78:	04db      	lsls	r3, r3, #19
 8003b7a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003b96:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b9a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b9e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	699a      	ldr	r2, [r3, #24]
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d903      	bls.n	8003bb4 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	68da      	ldr	r2, [r3, #12]
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	697b      	ldr	r3, [r7, #20]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	693a      	ldr	r2, [r7, #16]
 8003bc4:	0151      	lsls	r1, r2, #5
 8003bc6:	697a      	ldr	r2, [r7, #20]
 8003bc8:	440a      	add	r2, r1
 8003bca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003bce:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003bd2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003bd4:	693b      	ldr	r3, [r7, #16]
 8003bd6:	015a      	lsls	r2, r3, #5
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	4413      	add	r3, r2
 8003bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be0:	691a      	ldr	r2, [r3, #16]
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	699b      	ldr	r3, [r3, #24]
 8003be6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bea:	6939      	ldr	r1, [r7, #16]
 8003bec:	0148      	lsls	r0, r1, #5
 8003bee:	6979      	ldr	r1, [r7, #20]
 8003bf0:	4401      	add	r1, r0
 8003bf2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003bfa:	79fb      	ldrb	r3, [r7, #7]
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d11e      	bne.n	8003c3e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	695b      	ldr	r3, [r3, #20]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c14:	461a      	mov	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	0151      	lsls	r1, r2, #5
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	440a      	add	r2, r1
 8003c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c36:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c3a:	6013      	str	r3, [r2, #0]
 8003c3c:	e097      	b.n	8003d6e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	015a      	lsls	r2, r3, #5
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	4413      	add	r3, r2
 8003c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	693a      	ldr	r2, [r7, #16]
 8003c4e:	0151      	lsls	r1, r2, #5
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	440a      	add	r2, r1
 8003c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c58:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003c5c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003c5e:	68bb      	ldr	r3, [r7, #8]
 8003c60:	699b      	ldr	r3, [r3, #24]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 8083 	beq.w	8003d6e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c6e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	781b      	ldrb	r3, [r3, #0]
 8003c74:	f003 030f 	and.w	r3, r3, #15
 8003c78:	2101      	movs	r1, #1
 8003c7a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c7e:	6979      	ldr	r1, [r7, #20]
 8003c80:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c84:	4313      	orrs	r3, r2
 8003c86:	634b      	str	r3, [r1, #52]	; 0x34
 8003c88:	e071      	b.n	8003d6e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	697b      	ldr	r3, [r7, #20]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	693a      	ldr	r2, [r7, #16]
 8003c9a:	0151      	lsls	r1, r2, #5
 8003c9c:	697a      	ldr	r2, [r7, #20]
 8003c9e:	440a      	add	r2, r1
 8003ca0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ca4:	0cdb      	lsrs	r3, r3, #19
 8003ca6:	04db      	lsls	r3, r3, #19
 8003ca8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	693a      	ldr	r2, [r7, #16]
 8003cba:	0151      	lsls	r1, r2, #5
 8003cbc:	697a      	ldr	r2, [r7, #20]
 8003cbe:	440a      	add	r2, r1
 8003cc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003cc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ccc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d003      	beq.n	8003cde <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	68da      	ldr	r2, [r3, #12]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	68da      	ldr	r2, [r3, #12]
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	015a      	lsls	r2, r3, #5
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	4413      	add	r3, r2
 8003cee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	693a      	ldr	r2, [r7, #16]
 8003cf6:	0151      	lsls	r1, r2, #5
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	440a      	add	r2, r1
 8003cfc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d12:	691a      	ldr	r2, [r3, #16]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	69db      	ldr	r3, [r3, #28]
 8003d18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d1c:	6939      	ldr	r1, [r7, #16]
 8003d1e:	0148      	lsls	r0, r1, #5
 8003d20:	6979      	ldr	r1, [r7, #20]
 8003d22:	4401      	add	r1, r0
 8003d24:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d10d      	bne.n	8003d4e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d009      	beq.n	8003d4e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	6919      	ldr	r1, [r3, #16]
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	015a      	lsls	r2, r3, #5
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d4a:	460a      	mov	r2, r1
 8003d4c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003d4e:	693b      	ldr	r3, [r7, #16]
 8003d50:	015a      	lsls	r2, r3, #5
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	4413      	add	r3, r2
 8003d56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	0151      	lsls	r1, r2, #5
 8003d60:	697a      	ldr	r2, [r7, #20]
 8003d62:	440a      	add	r2, r1
 8003d64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003d68:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003d6c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	371c      	adds	r7, #28
 8003d74:	46bd      	mov	sp, r7
 8003d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7a:	4770      	bx	lr

08003d7c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003d7c:	b480      	push	{r7}
 8003d7e:	b087      	sub	sp, #28
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d86:	2300      	movs	r3, #0
 8003d88:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	785b      	ldrb	r3, [r3, #1]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d14a      	bne.n	8003e30 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	781b      	ldrb	r3, [r3, #0]
 8003d9e:	015a      	lsls	r2, r3, #5
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	4413      	add	r3, r2
 8003da4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003db2:	f040 8086 	bne.w	8003ec2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	015a      	lsls	r2, r3, #5
 8003dbc:	693b      	ldr	r3, [r7, #16]
 8003dbe:	4413      	add	r3, r2
 8003dc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	683a      	ldr	r2, [r7, #0]
 8003dc8:	7812      	ldrb	r2, [r2, #0]
 8003dca:	0151      	lsls	r1, r2, #5
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	440a      	add	r2, r1
 8003dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dd4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dd8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	015a      	lsls	r2, r3, #5
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	4413      	add	r3, r2
 8003de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	683a      	ldr	r2, [r7, #0]
 8003dec:	7812      	ldrb	r2, [r2, #0]
 8003dee:	0151      	lsls	r1, r2, #5
 8003df0:	693a      	ldr	r2, [r7, #16]
 8003df2:	440a      	add	r2, r1
 8003df4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003df8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003dfc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	3301      	adds	r3, #1
 8003e02:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d902      	bls.n	8003e14 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	75fb      	strb	r3, [r7, #23]
          break;
 8003e12:	e056      	b.n	8003ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	015a      	lsls	r2, r3, #5
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	4413      	add	r3, r2
 8003e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e28:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e2c:	d0e7      	beq.n	8003dfe <USB_EPStopXfer+0x82>
 8003e2e:	e048      	b.n	8003ec2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	781b      	ldrb	r3, [r3, #0]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e44:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e48:	d13b      	bne.n	8003ec2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	015a      	lsls	r2, r3, #5
 8003e50:	693b      	ldr	r3, [r7, #16]
 8003e52:	4413      	add	r3, r2
 8003e54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	7812      	ldrb	r2, [r2, #0]
 8003e5e:	0151      	lsls	r1, r2, #5
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	440a      	add	r2, r1
 8003e64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e68:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003e6c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	015a      	lsls	r2, r3, #5
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	4413      	add	r3, r2
 8003e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	683a      	ldr	r2, [r7, #0]
 8003e80:	7812      	ldrb	r2, [r2, #0]
 8003e82:	0151      	lsls	r1, r2, #5
 8003e84:	693a      	ldr	r2, [r7, #16]
 8003e86:	440a      	add	r2, r1
 8003e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e8c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e90:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	3301      	adds	r3, #1
 8003e96:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f242 7210 	movw	r2, #10000	; 0x2710
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d902      	bls.n	8003ea8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	75fb      	strb	r3, [r7, #23]
          break;
 8003ea6:	e00c      	b.n	8003ec2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	781b      	ldrb	r3, [r3, #0]
 8003eac:	015a      	lsls	r2, r3, #5
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4413      	add	r3, r2
 8003eb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ec0:	d0e7      	beq.n	8003e92 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8003ec2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	371c      	adds	r7, #28
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b089      	sub	sp, #36	; 0x24
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	4611      	mov	r1, r2
 8003edc:	461a      	mov	r2, r3
 8003ede:	460b      	mov	r3, r1
 8003ee0:	71fb      	strb	r3, [r7, #7]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8003eee:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d123      	bne.n	8003f3e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8003ef6:	88bb      	ldrh	r3, [r7, #4]
 8003ef8:	3303      	adds	r3, #3
 8003efa:	089b      	lsrs	r3, r3, #2
 8003efc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	e018      	b.n	8003f36 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8003f04:	79fb      	ldrb	r3, [r7, #7]
 8003f06:	031a      	lsls	r2, r3, #12
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f10:	461a      	mov	r2, r3
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	6013      	str	r3, [r2, #0]
      pSrc++;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	3301      	adds	r3, #1
 8003f1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f1e:	69fb      	ldr	r3, [r7, #28]
 8003f20:	3301      	adds	r3, #1
 8003f22:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f24:	69fb      	ldr	r3, [r7, #28]
 8003f26:	3301      	adds	r3, #1
 8003f28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8003f2a:	69fb      	ldr	r3, [r7, #28]
 8003f2c:	3301      	adds	r3, #1
 8003f2e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	3301      	adds	r3, #1
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	69ba      	ldr	r2, [r7, #24]
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3e2      	bcc.n	8003f04 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3724      	adds	r7, #36	; 0x24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b08b      	sub	sp, #44	; 0x2c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	60f8      	str	r0, [r7, #12]
 8003f54:	60b9      	str	r1, [r7, #8]
 8003f56:	4613      	mov	r3, r2
 8003f58:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8003f62:	88fb      	ldrh	r3, [r7, #6]
 8003f64:	089b      	lsrs	r3, r3, #2
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8003f6a:	88fb      	ldrh	r3, [r7, #6]
 8003f6c:	f003 0303 	and.w	r3, r3, #3
 8003f70:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8003f72:	2300      	movs	r3, #0
 8003f74:	623b      	str	r3, [r7, #32]
 8003f76:	e014      	b.n	8003fa2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8003f78:	69bb      	ldr	r3, [r7, #24]
 8003f7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003f7e:	681a      	ldr	r2, [r3, #0]
 8003f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f82:	601a      	str	r2, [r3, #0]
    pDest++;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	3301      	adds	r3, #1
 8003f88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f92:	3301      	adds	r3, #1
 8003f94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	3301      	adds	r3, #1
 8003f9a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	3301      	adds	r3, #1
 8003fa0:	623b      	str	r3, [r7, #32]
 8003fa2:	6a3a      	ldr	r2, [r7, #32]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d3e6      	bcc.n	8003f78 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8003faa:	8bfb      	ldrh	r3, [r7, #30]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d01e      	beq.n	8003fee <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003fba:	461a      	mov	r2, r3
 8003fbc:	f107 0310 	add.w	r3, r7, #16
 8003fc0:	6812      	ldr	r2, [r2, #0]
 8003fc2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	6a3b      	ldr	r3, [r7, #32]
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	00db      	lsls	r3, r3, #3
 8003fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8003fd0:	b2da      	uxtb	r2, r3
 8003fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fd4:	701a      	strb	r2, [r3, #0]
      i++;
 8003fd6:	6a3b      	ldr	r3, [r7, #32]
 8003fd8:	3301      	adds	r3, #1
 8003fda:	623b      	str	r3, [r7, #32]
      pDest++;
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	3301      	adds	r3, #1
 8003fe0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8003fe2:	8bfb      	ldrh	r3, [r7, #30]
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8003fe8:	8bfb      	ldrh	r3, [r7, #30]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d1ea      	bne.n	8003fc4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8003fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	372c      	adds	r7, #44	; 0x2c
 8003ff4:	46bd      	mov	sp, r7
 8003ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffa:	4770      	bx	lr

08003ffc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
 8004004:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	785b      	ldrb	r3, [r3, #1]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d12c      	bne.n	8004072 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	015a      	lsls	r2, r3, #5
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	4413      	add	r3, r2
 8004020:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db12      	blt.n	8004050 <USB_EPSetStall+0x54>
 800402a:	68bb      	ldr	r3, [r7, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d00f      	beq.n	8004050 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	015a      	lsls	r2, r3, #5
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	4413      	add	r3, r2
 8004038:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68ba      	ldr	r2, [r7, #8]
 8004040:	0151      	lsls	r1, r2, #5
 8004042:	68fa      	ldr	r2, [r7, #12]
 8004044:	440a      	add	r2, r1
 8004046:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800404a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800404e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004050:	68bb      	ldr	r3, [r7, #8]
 8004052:	015a      	lsls	r2, r3, #5
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4413      	add	r3, r2
 8004058:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	0151      	lsls	r1, r2, #5
 8004062:	68fa      	ldr	r2, [r7, #12]
 8004064:	440a      	add	r2, r1
 8004066:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800406e:	6013      	str	r3, [r2, #0]
 8004070:	e02b      	b.n	80040ca <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004072:	68bb      	ldr	r3, [r7, #8]
 8004074:	015a      	lsls	r2, r3, #5
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	4413      	add	r3, r2
 800407a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	db12      	blt.n	80040aa <USB_EPSetStall+0xae>
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00f      	beq.n	80040aa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800408a:	68bb      	ldr	r3, [r7, #8]
 800408c:	015a      	lsls	r2, r3, #5
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	4413      	add	r3, r2
 8004092:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68ba      	ldr	r2, [r7, #8]
 800409a:	0151      	lsls	r1, r2, #5
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	440a      	add	r2, r1
 80040a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040a4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80040a8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	015a      	lsls	r2, r3, #5
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	4413      	add	r3, r2
 80040b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	68ba      	ldr	r2, [r7, #8]
 80040ba:	0151      	lsls	r1, r2, #5
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	440a      	add	r2, r1
 80040c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040c4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80040c8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80040d8:	b480      	push	{r7}
 80040da:	b085      	sub	sp, #20
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
 80040e0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	785b      	ldrb	r3, [r3, #1]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d128      	bne.n	8004146 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68ba      	ldr	r2, [r7, #8]
 8004104:	0151      	lsls	r1, r2, #5
 8004106:	68fa      	ldr	r2, [r7, #12]
 8004108:	440a      	add	r2, r1
 800410a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800410e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004112:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	791b      	ldrb	r3, [r3, #4]
 8004118:	2b03      	cmp	r3, #3
 800411a:	d003      	beq.n	8004124 <USB_EPClearStall+0x4c>
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	791b      	ldrb	r3, [r3, #4]
 8004120:	2b02      	cmp	r3, #2
 8004122:	d138      	bne.n	8004196 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	015a      	lsls	r2, r3, #5
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4413      	add	r3, r2
 800412c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	0151      	lsls	r1, r2, #5
 8004136:	68fa      	ldr	r2, [r7, #12]
 8004138:	440a      	add	r2, r1
 800413a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800413e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004142:	6013      	str	r3, [r2, #0]
 8004144:	e027      	b.n	8004196 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	015a      	lsls	r2, r3, #5
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4413      	add	r3, r2
 800414e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	68ba      	ldr	r2, [r7, #8]
 8004156:	0151      	lsls	r1, r2, #5
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	440a      	add	r2, r1
 800415c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004164:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	791b      	ldrb	r3, [r3, #4]
 800416a:	2b03      	cmp	r3, #3
 800416c:	d003      	beq.n	8004176 <USB_EPClearStall+0x9e>
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	791b      	ldrb	r3, [r3, #4]
 8004172:	2b02      	cmp	r3, #2
 8004174:	d10f      	bne.n	8004196 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	015a      	lsls	r2, r3, #5
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	4413      	add	r3, r2
 800417e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	0151      	lsls	r1, r2, #5
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	440a      	add	r2, r1
 800418c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004190:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004194:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004196:	2300      	movs	r3, #0
}
 8004198:	4618      	mov	r0, r3
 800419a:	3714      	adds	r7, #20
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b085      	sub	sp, #20
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	460b      	mov	r3, r1
 80041ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	68fa      	ldr	r2, [r7, #12]
 80041be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80041c2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80041c6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	011b      	lsls	r3, r3, #4
 80041d4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80041d8:	68f9      	ldr	r1, [r7, #12]
 80041da:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80041de:	4313      	orrs	r3, r2
 80041e0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80041e2:	2300      	movs	r3, #0
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3714      	adds	r7, #20
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68fa      	ldr	r2, [r7, #12]
 8004206:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800420a:	f023 0303 	bic.w	r3, r3, #3
 800420e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	68fa      	ldr	r2, [r7, #12]
 800421a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800421e:	f023 0302 	bic.w	r3, r3, #2
 8004222:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004232:	b480      	push	{r7}
 8004234:	b085      	sub	sp, #20
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800424c:	f023 0303 	bic.w	r3, r3, #3
 8004250:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	68fa      	ldr	r2, [r7, #12]
 800425c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004260:	f043 0302 	orr.w	r3, r3, #2
 8004264:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004266:	2300      	movs	r3, #0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr

08004274 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004274:	b480      	push	{r7}
 8004276:	b085      	sub	sp, #20
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	699b      	ldr	r3, [r3, #24]
 8004286:	68fa      	ldr	r2, [r7, #12]
 8004288:	4013      	ands	r3, r2
 800428a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800428c:	68fb      	ldr	r3, [r7, #12]
}
 800428e:	4618      	mov	r0, r3
 8004290:	3714      	adds	r7, #20
 8004292:	46bd      	mov	sp, r7
 8004294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004298:	4770      	bx	lr

0800429a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800429a:	b480      	push	{r7}
 800429c:	b085      	sub	sp, #20
 800429e:	af00      	add	r7, sp, #0
 80042a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b6:	69db      	ldr	r3, [r3, #28]
 80042b8:	68ba      	ldr	r2, [r7, #8]
 80042ba:	4013      	ands	r3, r2
 80042bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	0c1b      	lsrs	r3, r3, #16
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr

080042ce <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80042ce:	b480      	push	{r7}
 80042d0:	b085      	sub	sp, #20
 80042d2:	af00      	add	r7, sp, #0
 80042d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	69db      	ldr	r3, [r3, #28]
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	4013      	ands	r3, r2
 80042f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	b29b      	uxth	r3, r3
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3714      	adds	r7, #20
 80042fa:	46bd      	mov	sp, r7
 80042fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004300:	4770      	bx	lr

08004302 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004302:	b480      	push	{r7}
 8004304:	b085      	sub	sp, #20
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
 800430a:	460b      	mov	r3, r1
 800430c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004312:	78fb      	ldrb	r3, [r7, #3]
 8004314:	015a      	lsls	r2, r3, #5
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4413      	add	r3, r2
 800431a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	68ba      	ldr	r2, [r7, #8]
 800432c:	4013      	ands	r3, r2
 800432e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004330:	68bb      	ldr	r3, [r7, #8]
}
 8004332:	4618      	mov	r0, r3
 8004334:	3714      	adds	r7, #20
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800433e:	b480      	push	{r7}
 8004340:	b087      	sub	sp, #28
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
 8004346:	460b      	mov	r3, r1
 8004348:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004354:	691b      	ldr	r3, [r3, #16]
 8004356:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800435e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004360:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004362:	78fb      	ldrb	r3, [r7, #3]
 8004364:	f003 030f 	and.w	r3, r3, #15
 8004368:	68fa      	ldr	r2, [r7, #12]
 800436a:	fa22 f303 	lsr.w	r3, r2, r3
 800436e:	01db      	lsls	r3, r3, #7
 8004370:	b2db      	uxtb	r3, r3
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004378:	78fb      	ldrb	r3, [r7, #3]
 800437a:	015a      	lsls	r2, r3, #5
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	4413      	add	r3, r2
 8004380:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	693a      	ldr	r2, [r7, #16]
 8004388:	4013      	ands	r3, r2
 800438a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800438c:	68bb      	ldr	r3, [r7, #8]
}
 800438e:	4618      	mov	r0, r3
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr

0800439a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800439a:	b480      	push	{r7}
 800439c:	b083      	sub	sp, #12
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0301 	and.w	r3, r3, #1
}
 80043aa:	4618      	mov	r0, r3
 80043ac:	370c      	adds	r7, #12
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr

080043b6 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80043b6:	b480      	push	{r7}
 80043b8:	b085      	sub	sp, #20
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80043d4:	f023 0307 	bic.w	r3, r3, #7
 80043d8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	68fa      	ldr	r2, [r7, #12]
 80043e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ec:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3714      	adds	r7, #20
 80043f4:	46bd      	mov	sp, r7
 80043f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fa:	4770      	bx	lr

080043fc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b087      	sub	sp, #28
 8004400:	af00      	add	r7, sp, #0
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	460b      	mov	r3, r1
 8004406:	607a      	str	r2, [r7, #4]
 8004408:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	333c      	adds	r3, #60	; 0x3c
 8004412:	3304      	adds	r3, #4
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	4a26      	ldr	r2, [pc, #152]	; (80044b4 <USB_EP0_OutStart+0xb8>)
 800441c:	4293      	cmp	r3, r2
 800441e:	d90a      	bls.n	8004436 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800442c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004430:	d101      	bne.n	8004436 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004432:	2300      	movs	r3, #0
 8004434:	e037      	b.n	80044a6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800443c:	461a      	mov	r2, r3
 800443e:	2300      	movs	r3, #0
 8004440:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004450:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004454:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	697a      	ldr	r2, [r7, #20]
 8004460:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004464:	f043 0318 	orr.w	r3, r3, #24
 8004468:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	697a      	ldr	r2, [r7, #20]
 8004474:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004478:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800447c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800447e:	7afb      	ldrb	r3, [r7, #11]
 8004480:	2b01      	cmp	r3, #1
 8004482:	d10f      	bne.n	80044a4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004490:	697b      	ldr	r3, [r7, #20]
 8004492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800449e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80044a2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80044a4:	2300      	movs	r3, #0
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	371c      	adds	r7, #28
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop
 80044b4:	4f54300a 	.word	0x4f54300a

080044b8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	3301      	adds	r3, #1
 80044c8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a13      	ldr	r2, [pc, #76]	; (800451c <USB_CoreReset+0x64>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d901      	bls.n	80044d6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e01b      	b.n	800450e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	daf2      	bge.n	80044c4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80044de:	2300      	movs	r3, #0
 80044e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	f043 0201 	orr.w	r2, r3, #1
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3301      	adds	r3, #1
 80044f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4a09      	ldr	r2, [pc, #36]	; (800451c <USB_CoreReset+0x64>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e006      	b.n	800450e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	f003 0301 	and.w	r3, r3, #1
 8004508:	2b01      	cmp	r3, #1
 800450a:	d0f0      	beq.n	80044ee <USB_CoreReset+0x36>

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004518:	4770      	bx	lr
 800451a:	bf00      	nop
 800451c:	00030d40 	.word	0x00030d40

08004520 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b084      	sub	sp, #16
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	460b      	mov	r3, r1
 800452a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800452c:	2010      	movs	r0, #16
 800452e:	f002 f911 	bl	8006754 <USBD_static_malloc>
 8004532:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	32b0      	adds	r2, #176	; 0xb0
 8004544:	2100      	movs	r1, #0
 8004546:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800454a:	2302      	movs	r3, #2
 800454c:	e048      	b.n	80045e0 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	32b0      	adds	r2, #176	; 0xb0
 8004558:	68f9      	ldr	r1, [r7, #12]
 800455a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	32b0      	adds	r2, #176	; 0xb0
 8004568:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	7c1b      	ldrb	r3, [r3, #16]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d10d      	bne.n	8004596 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <USBD_HID_Init+0xc8>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	f003 020f 	and.w	r2, r3, #15
 8004582:	6879      	ldr	r1, [r7, #4]
 8004584:	4613      	mov	r3, r2
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	440b      	add	r3, r1
 800458e:	3326      	adds	r3, #38	; 0x26
 8004590:	2207      	movs	r2, #7
 8004592:	801a      	strh	r2, [r3, #0]
 8004594:	e00c      	b.n	80045b0 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004596:	4b14      	ldr	r3, [pc, #80]	; (80045e8 <USBD_HID_Init+0xc8>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	f003 020f 	and.w	r2, r3, #15
 800459e:	6879      	ldr	r1, [r7, #4]
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	3326      	adds	r3, #38	; 0x26
 80045ac:	220a      	movs	r2, #10
 80045ae:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80045b0:	4b0d      	ldr	r3, [pc, #52]	; (80045e8 <USBD_HID_Init+0xc8>)
 80045b2:	7819      	ldrb	r1, [r3, #0]
 80045b4:	2304      	movs	r3, #4
 80045b6:	2203      	movs	r2, #3
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f001 ffba 	bl	8006532 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80045be:	4b0a      	ldr	r3, [pc, #40]	; (80045e8 <USBD_HID_Init+0xc8>)
 80045c0:	781b      	ldrb	r3, [r3, #0]
 80045c2:	f003 020f 	and.w	r2, r3, #15
 80045c6:	6879      	ldr	r1, [r7, #4]
 80045c8:	4613      	mov	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	4413      	add	r3, r2
 80045ce:	009b      	lsls	r3, r3, #2
 80045d0:	440b      	add	r3, r1
 80045d2:	3324      	adds	r3, #36	; 0x24
 80045d4:	2201      	movs	r2, #1
 80045d6:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80045de:	2300      	movs	r3, #0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3710      	adds	r7, #16
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}
 80045e8:	200000ca 	.word	0x200000ca

080045ec <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b082      	sub	sp, #8
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
 80045f4:	460b      	mov	r3, r1
 80045f6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80045f8:	4b1f      	ldr	r3, [pc, #124]	; (8004678 <USBD_HID_DeInit+0x8c>)
 80045fa:	781b      	ldrb	r3, [r3, #0]
 80045fc:	4619      	mov	r1, r3
 80045fe:	6878      	ldr	r0, [r7, #4]
 8004600:	f001 ffbd 	bl	800657e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004604:	4b1c      	ldr	r3, [pc, #112]	; (8004678 <USBD_HID_DeInit+0x8c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	f003 020f 	and.w	r2, r3, #15
 800460c:	6879      	ldr	r1, [r7, #4]
 800460e:	4613      	mov	r3, r2
 8004610:	009b      	lsls	r3, r3, #2
 8004612:	4413      	add	r3, r2
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	440b      	add	r3, r1
 8004618:	3324      	adds	r3, #36	; 0x24
 800461a:	2200      	movs	r2, #0
 800461c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800461e:	4b16      	ldr	r3, [pc, #88]	; (8004678 <USBD_HID_DeInit+0x8c>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f003 020f 	and.w	r2, r3, #15
 8004626:	6879      	ldr	r1, [r7, #4]
 8004628:	4613      	mov	r3, r2
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	4413      	add	r3, r2
 800462e:	009b      	lsls	r3, r3, #2
 8004630:	440b      	add	r3, r1
 8004632:	3326      	adds	r3, #38	; 0x26
 8004634:	2200      	movs	r2, #0
 8004636:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	32b0      	adds	r2, #176	; 0xb0
 8004642:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004646:	2b00      	cmp	r3, #0
 8004648:	d011      	beq.n	800466e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	32b0      	adds	r2, #176	; 0xb0
 8004654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004658:	4618      	mov	r0, r3
 800465a:	f002 f889 	bl	8006770 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	32b0      	adds	r2, #176	; 0xb0
 8004668:	2100      	movs	r1, #0
 800466a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3708      	adds	r7, #8
 8004674:	46bd      	mov	sp, r7
 8004676:	bd80      	pop	{r7, pc}
 8004678:	200000ca 	.word	0x200000ca

0800467c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	32b0      	adds	r2, #176	; 0xb0
 8004690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004694:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800469a:	2300      	movs	r3, #0
 800469c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d101      	bne.n	80046a8 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e0e8      	b.n	800487a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	781b      	ldrb	r3, [r3, #0]
 80046ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d046      	beq.n	8004742 <USBD_HID_Setup+0xc6>
 80046b4:	2b20      	cmp	r3, #32
 80046b6:	f040 80d8 	bne.w	800486a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	785b      	ldrb	r3, [r3, #1]
 80046be:	3b02      	subs	r3, #2
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d836      	bhi.n	8004732 <USBD_HID_Setup+0xb6>
 80046c4:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <USBD_HID_Setup+0x50>)
 80046c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ca:	bf00      	nop
 80046cc:	08004723 	.word	0x08004723
 80046d0:	08004703 	.word	0x08004703
 80046d4:	08004733 	.word	0x08004733
 80046d8:	08004733 	.word	0x08004733
 80046dc:	08004733 	.word	0x08004733
 80046e0:	08004733 	.word	0x08004733
 80046e4:	08004733 	.word	0x08004733
 80046e8:	08004733 	.word	0x08004733
 80046ec:	08004711 	.word	0x08004711
 80046f0:	080046f5 	.word	0x080046f5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	885b      	ldrh	r3, [r3, #2]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	461a      	mov	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	601a      	str	r2, [r3, #0]
          break;
 8004700:	e01e      	b.n	8004740 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2201      	movs	r2, #1
 8004706:	4619      	mov	r1, r3
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f001 fbd5 	bl	8005eb8 <USBD_CtlSendData>
          break;
 800470e:	e017      	b.n	8004740 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	885b      	ldrh	r3, [r3, #2]
 8004714:	0a1b      	lsrs	r3, r3, #8
 8004716:	b29b      	uxth	r3, r3
 8004718:	b2db      	uxtb	r3, r3
 800471a:	461a      	mov	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	605a      	str	r2, [r3, #4]
          break;
 8004720:	e00e      	b.n	8004740 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3304      	adds	r3, #4
 8004726:	2201      	movs	r2, #1
 8004728:	4619      	mov	r1, r3
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f001 fbc4 	bl	8005eb8 <USBD_CtlSendData>
          break;
 8004730:	e006      	b.n	8004740 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004732:	6839      	ldr	r1, [r7, #0]
 8004734:	6878      	ldr	r0, [r7, #4]
 8004736:	f001 fb4e 	bl	8005dd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800473a:	2303      	movs	r3, #3
 800473c:	75fb      	strb	r3, [r7, #23]
          break;
 800473e:	bf00      	nop
      }
      break;
 8004740:	e09a      	b.n	8004878 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	785b      	ldrb	r3, [r3, #1]
 8004746:	2b0b      	cmp	r3, #11
 8004748:	f200 8086 	bhi.w	8004858 <USBD_HID_Setup+0x1dc>
 800474c:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <USBD_HID_Setup+0xd8>)
 800474e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004752:	bf00      	nop
 8004754:	08004785 	.word	0x08004785
 8004758:	08004867 	.word	0x08004867
 800475c:	08004859 	.word	0x08004859
 8004760:	08004859 	.word	0x08004859
 8004764:	08004859 	.word	0x08004859
 8004768:	08004859 	.word	0x08004859
 800476c:	080047af 	.word	0x080047af
 8004770:	08004859 	.word	0x08004859
 8004774:	08004859 	.word	0x08004859
 8004778:	08004859 	.word	0x08004859
 800477c:	08004807 	.word	0x08004807
 8004780:	08004831 	.word	0x08004831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800478a:	b2db      	uxtb	r3, r3
 800478c:	2b03      	cmp	r3, #3
 800478e:	d107      	bne.n	80047a0 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004790:	f107 030a 	add.w	r3, r7, #10
 8004794:	2202      	movs	r2, #2
 8004796:	4619      	mov	r1, r3
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 fb8d 	bl	8005eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800479e:	e063      	b.n	8004868 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80047a0:	6839      	ldr	r1, [r7, #0]
 80047a2:	6878      	ldr	r0, [r7, #4]
 80047a4:	f001 fb17 	bl	8005dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80047a8:	2303      	movs	r3, #3
 80047aa:	75fb      	strb	r3, [r7, #23]
          break;
 80047ac:	e05c      	b.n	8004868 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	885b      	ldrh	r3, [r3, #2]
 80047b2:	0a1b      	lsrs	r3, r3, #8
 80047b4:	b29b      	uxth	r3, r3
 80047b6:	2b22      	cmp	r3, #34	; 0x22
 80047b8:	d108      	bne.n	80047cc <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	88db      	ldrh	r3, [r3, #6]
 80047be:	2b4a      	cmp	r3, #74	; 0x4a
 80047c0:	bf28      	it	cs
 80047c2:	234a      	movcs	r3, #74	; 0x4a
 80047c4:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80047c6:	4b2f      	ldr	r3, [pc, #188]	; (8004884 <USBD_HID_Setup+0x208>)
 80047c8:	613b      	str	r3, [r7, #16]
 80047ca:	e015      	b.n	80047f8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	885b      	ldrh	r3, [r3, #2]
 80047d0:	0a1b      	lsrs	r3, r3, #8
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b21      	cmp	r3, #33	; 0x21
 80047d6:	d108      	bne.n	80047ea <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80047d8:	4b2b      	ldr	r3, [pc, #172]	; (8004888 <USBD_HID_Setup+0x20c>)
 80047da:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	88db      	ldrh	r3, [r3, #6]
 80047e0:	2b09      	cmp	r3, #9
 80047e2:	bf28      	it	cs
 80047e4:	2309      	movcs	r3, #9
 80047e6:	82bb      	strh	r3, [r7, #20]
 80047e8:	e006      	b.n	80047f8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80047ea:	6839      	ldr	r1, [r7, #0]
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f001 faf2 	bl	8005dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 80047f2:	2303      	movs	r3, #3
 80047f4:	75fb      	strb	r3, [r7, #23]
            break;
 80047f6:	e037      	b.n	8004868 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80047f8:	8abb      	ldrh	r3, [r7, #20]
 80047fa:	461a      	mov	r2, r3
 80047fc:	6939      	ldr	r1, [r7, #16]
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f001 fb5a 	bl	8005eb8 <USBD_CtlSendData>
          break;
 8004804:	e030      	b.n	8004868 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b03      	cmp	r3, #3
 8004810:	d107      	bne.n	8004822 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3308      	adds	r3, #8
 8004816:	2201      	movs	r2, #1
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f001 fb4c 	bl	8005eb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004820:	e022      	b.n	8004868 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8004822:	6839      	ldr	r1, [r7, #0]
 8004824:	6878      	ldr	r0, [r7, #4]
 8004826:	f001 fad6 	bl	8005dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800482a:	2303      	movs	r3, #3
 800482c:	75fb      	strb	r3, [r7, #23]
          break;
 800482e:	e01b      	b.n	8004868 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b03      	cmp	r3, #3
 800483a:	d106      	bne.n	800484a <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	885b      	ldrh	r3, [r3, #2]
 8004840:	b2db      	uxtb	r3, r3
 8004842:	461a      	mov	r2, r3
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004848:	e00e      	b.n	8004868 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800484a:	6839      	ldr	r1, [r7, #0]
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f001 fac2 	bl	8005dd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8004852:	2303      	movs	r3, #3
 8004854:	75fb      	strb	r3, [r7, #23]
          break;
 8004856:	e007      	b.n	8004868 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004858:	6839      	ldr	r1, [r7, #0]
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f001 fabb 	bl	8005dd6 <USBD_CtlError>
          ret = USBD_FAIL;
 8004860:	2303      	movs	r3, #3
 8004862:	75fb      	strb	r3, [r7, #23]
          break;
 8004864:	e000      	b.n	8004868 <USBD_HID_Setup+0x1ec>
          break;
 8004866:	bf00      	nop
      }
      break;
 8004868:	e006      	b.n	8004878 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800486a:	6839      	ldr	r1, [r7, #0]
 800486c:	6878      	ldr	r0, [r7, #4]
 800486e:	f001 fab2 	bl	8005dd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8004872:	2303      	movs	r3, #3
 8004874:	75fb      	strb	r3, [r7, #23]
      break;
 8004876:	bf00      	nop
  }

  return (uint8_t)ret;
 8004878:	7dfb      	ldrb	r3, [r7, #23]
}
 800487a:	4618      	mov	r0, r3
 800487c:	3718      	adds	r7, #24
 800487e:	46bd      	mov	sp, r7
 8004880:	bd80      	pop	{r7, pc}
 8004882:	bf00      	nop
 8004884:	20000080 	.word	0x20000080
 8004888:	20000068 	.word	0x20000068

0800488c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800488c:	b580      	push	{r7, lr}
 800488e:	b086      	sub	sp, #24
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	4613      	mov	r3, r2
 8004898:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	32b0      	adds	r2, #176	; 0xb0
 80048a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048a8:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80048aa:	697b      	ldr	r3, [r7, #20]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d101      	bne.n	80048b4 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80048b0:	2303      	movs	r3, #3
 80048b2:	e014      	b.n	80048de <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80048ba:	b2db      	uxtb	r3, r3
 80048bc:	2b03      	cmp	r3, #3
 80048be:	d10d      	bne.n	80048dc <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	7b1b      	ldrb	r3, [r3, #12]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d109      	bne.n	80048dc <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	2201      	movs	r2, #1
 80048cc:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80048ce:	4b06      	ldr	r3, [pc, #24]	; (80048e8 <USBD_HID_SendReport+0x5c>)
 80048d0:	7819      	ldrb	r1, [r3, #0]
 80048d2:	88fb      	ldrh	r3, [r7, #6]
 80048d4:	68ba      	ldr	r2, [r7, #8]
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f001 fef9 	bl	80066ce <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3718      	adds	r7, #24
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	200000ca 	.word	0x200000ca

080048ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b084      	sub	sp, #16
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80048f4:	2181      	movs	r1, #129	; 0x81
 80048f6:	4809      	ldr	r0, [pc, #36]	; (800491c <USBD_HID_GetFSCfgDesc+0x30>)
 80048f8:	f000 fc35 	bl	8005166 <USBD_GetEpDesc>
 80048fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d002      	beq.n	800490a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	220a      	movs	r2, #10
 8004908:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2222      	movs	r2, #34	; 0x22
 800490e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004910:	4b02      	ldr	r3, [pc, #8]	; (800491c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8004912:	4618      	mov	r0, r3
 8004914:	3710      	adds	r7, #16
 8004916:	46bd      	mov	sp, r7
 8004918:	bd80      	pop	{r7, pc}
 800491a:	bf00      	nop
 800491c:	20000044 	.word	0x20000044

08004920 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8004928:	2181      	movs	r1, #129	; 0x81
 800492a:	4809      	ldr	r0, [pc, #36]	; (8004950 <USBD_HID_GetHSCfgDesc+0x30>)
 800492c:	f000 fc1b 	bl	8005166 <USBD_GetEpDesc>
 8004930:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2207      	movs	r2, #7
 800493c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2222      	movs	r2, #34	; 0x22
 8004942:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004944:	4b02      	ldr	r3, [pc, #8]	; (8004950 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
 800494e:	bf00      	nop
 8004950:	20000044 	.word	0x20000044

08004954 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800495c:	2181      	movs	r1, #129	; 0x81
 800495e:	4809      	ldr	r0, [pc, #36]	; (8004984 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8004960:	f000 fc01 	bl	8005166 <USBD_GetEpDesc>
 8004964:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	220a      	movs	r2, #10
 8004970:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2222      	movs	r2, #34	; 0x22
 8004976:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8004978:	4b02      	ldr	r3, [pc, #8]	; (8004984 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	20000044 	.word	0x20000044

08004988 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	460b      	mov	r3, r1
 8004992:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	32b0      	adds	r2, #176	; 0xb0
 800499e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049a2:	2200      	movs	r2, #0
 80049a4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80049a6:	2300      	movs	r3, #0
}
 80049a8:	4618      	mov	r0, r3
 80049aa:	370c      	adds	r7, #12
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	220a      	movs	r2, #10
 80049c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80049c2:	4b03      	ldr	r3, [pc, #12]	; (80049d0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80049c4:	4618      	mov	r0, r3
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr
 80049d0:	20000074 	.word	0x20000074

080049d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b086      	sub	sp, #24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4613      	mov	r3, r2
 80049e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d101      	bne.n	80049ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e01f      	b.n	8004a2c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	2200      	movs	r2, #0
 80049f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	68ba      	ldr	r2, [r7, #8]
 8004a0e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2201      	movs	r2, #1
 8004a16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	79fa      	ldrb	r2, [r7, #7]
 8004a1e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f001 fd1f 	bl	8006464 <USBD_LL_Init>
 8004a26:	4603      	mov	r3, r0
 8004a28:	75fb      	strb	r3, [r7, #23]

  return ret;
 8004a2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}

08004a34 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	b084      	sub	sp, #16
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d101      	bne.n	8004a4c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e025      	b.n	8004a98 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	683a      	ldr	r2, [r7, #0]
 8004a50:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	32ae      	adds	r2, #174	; 0xae
 8004a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d00f      	beq.n	8004a88 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	32ae      	adds	r2, #174	; 0xae
 8004a72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a78:	f107 020e 	add.w	r2, r7, #14
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	4798      	blx	r3
 8004a80:	4602      	mov	r2, r0
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8004a8e:	1c5a      	adds	r2, r3, #1
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8004a96:	2300      	movs	r3, #0
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	3710      	adds	r7, #16
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f001 fd27 	bl	80064fc <USBD_LL_Start>
 8004aae:	4603      	mov	r3, r0
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}

08004ab8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8004ac0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	370c      	adds	r7, #12
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr

08004ace <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004ace:	b580      	push	{r7, lr}
 8004ad0:	b084      	sub	sp, #16
 8004ad2:	af00      	add	r7, sp, #0
 8004ad4:	6078      	str	r0, [r7, #4]
 8004ad6:	460b      	mov	r3, r1
 8004ad8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004ada:	2300      	movs	r3, #0
 8004adc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d009      	beq.n	8004afc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	78fa      	ldrb	r2, [r7, #3]
 8004af2:	4611      	mov	r1, r2
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
 8004af8:	4603      	mov	r3, r0
 8004afa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004afc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3710      	adds	r7, #16
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b084      	sub	sp, #16
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
 8004b0e:	460b      	mov	r3, r1
 8004b10:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8004b12:	2300      	movs	r3, #0
 8004b14:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	78fa      	ldrb	r2, [r7, #3]
 8004b20:	4611      	mov	r1, r2
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	4798      	blx	r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3710      	adds	r7, #16
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b084      	sub	sp, #16
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	6078      	str	r0, [r7, #4]
 8004b42:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b4a:	6839      	ldr	r1, [r7, #0]
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	f001 f908 	bl	8005d62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2201      	movs	r2, #1
 8004b56:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8004b60:	461a      	mov	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2b02      	cmp	r3, #2
 8004b74:	d01a      	beq.n	8004bac <USBD_LL_SetupStage+0x72>
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d822      	bhi.n	8004bc0 <USBD_LL_SetupStage+0x86>
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d002      	beq.n	8004b84 <USBD_LL_SetupStage+0x4a>
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d00a      	beq.n	8004b98 <USBD_LL_SetupStage+0x5e>
 8004b82:	e01d      	b.n	8004bc0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b8a:	4619      	mov	r1, r3
 8004b8c:	6878      	ldr	r0, [r7, #4]
 8004b8e:	f000 fb5f 	bl	8005250 <USBD_StdDevReq>
 8004b92:	4603      	mov	r3, r0
 8004b94:	73fb      	strb	r3, [r7, #15]
      break;
 8004b96:	e020      	b.n	8004bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	6878      	ldr	r0, [r7, #4]
 8004ba2:	f000 fbc7 	bl	8005334 <USBD_StdItfReq>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	73fb      	strb	r3, [r7, #15]
      break;
 8004baa:	e016      	b.n	8004bda <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8004bb2:	4619      	mov	r1, r3
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 fc29 	bl	800540c <USBD_StdEPReq>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	73fb      	strb	r3, [r7, #15]
      break;
 8004bbe:	e00c      	b.n	8004bda <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004bc6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	4619      	mov	r1, r3
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f001 fcf4 	bl	80065bc <USBD_LL_StallEP>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8004bd8:	bf00      	nop
  }

  return ret;
 8004bda:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bdc:	4618      	mov	r0, r3
 8004bde:	3710      	adds	r7, #16
 8004be0:	46bd      	mov	sp, r7
 8004be2:	bd80      	pop	{r7, pc}

08004be4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	60f8      	str	r0, [r7, #12]
 8004bec:	460b      	mov	r3, r1
 8004bee:	607a      	str	r2, [r7, #4]
 8004bf0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8004bf6:	7afb      	ldrb	r3, [r7, #11]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d16e      	bne.n	8004cda <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8004c02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004c0a:	2b03      	cmp	r3, #3
 8004c0c:	f040 8098 	bne.w	8004d40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	689a      	ldr	r2, [r3, #8]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	68db      	ldr	r3, [r3, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d913      	bls.n	8004c44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	68db      	ldr	r3, [r3, #12]
 8004c24:	1ad2      	subs	r2, r2, r3
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	68da      	ldr	r2, [r3, #12]
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	4293      	cmp	r3, r2
 8004c34:	bf28      	it	cs
 8004c36:	4613      	movcs	r3, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f001 f967 	bl	8005f10 <USBD_CtlContinueRx>
 8004c42:	e07d      	b.n	8004d40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8004c4a:	f003 031f 	and.w	r3, r3, #31
 8004c4e:	2b02      	cmp	r3, #2
 8004c50:	d014      	beq.n	8004c7c <USBD_LL_DataOutStage+0x98>
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d81d      	bhi.n	8004c92 <USBD_LL_DataOutStage+0xae>
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d002      	beq.n	8004c60 <USBD_LL_DataOutStage+0x7c>
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d003      	beq.n	8004c66 <USBD_LL_DataOutStage+0x82>
 8004c5e:	e018      	b.n	8004c92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8004c60:	2300      	movs	r3, #0
 8004c62:	75bb      	strb	r3, [r7, #22]
            break;
 8004c64:	e018      	b.n	8004c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c6c:	b2db      	uxtb	r3, r3
 8004c6e:	4619      	mov	r1, r3
 8004c70:	68f8      	ldr	r0, [r7, #12]
 8004c72:	f000 fa5e 	bl	8005132 <USBD_CoreFindIF>
 8004c76:	4603      	mov	r3, r0
 8004c78:	75bb      	strb	r3, [r7, #22]
            break;
 8004c7a:	e00d      	b.n	8004c98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	4619      	mov	r1, r3
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 fa60 	bl	800514c <USBD_CoreFindEP>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	75bb      	strb	r3, [r7, #22]
            break;
 8004c90:	e002      	b.n	8004c98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8004c92:	2300      	movs	r3, #0
 8004c94:	75bb      	strb	r3, [r7, #22]
            break;
 8004c96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8004c98:	7dbb      	ldrb	r3, [r7, #22]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d119      	bne.n	8004cd2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004ca4:	b2db      	uxtb	r3, r3
 8004ca6:	2b03      	cmp	r3, #3
 8004ca8:	d113      	bne.n	8004cd2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8004caa:	7dba      	ldrb	r2, [r7, #22]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	32ae      	adds	r2, #174	; 0xae
 8004cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8004cba:	7dba      	ldrb	r2, [r7, #22]
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8004cc2:	7dba      	ldrb	r2, [r7, #22]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	32ae      	adds	r2, #174	; 0xae
 8004cc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	68f8      	ldr	r0, [r7, #12]
 8004cd0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f001 f92d 	bl	8005f32 <USBD_CtlSendStatus>
 8004cd8:	e032      	b.n	8004d40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8004cda:	7afb      	ldrb	r3, [r7, #11]
 8004cdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ce0:	b2db      	uxtb	r3, r3
 8004ce2:	4619      	mov	r1, r3
 8004ce4:	68f8      	ldr	r0, [r7, #12]
 8004ce6:	f000 fa31 	bl	800514c <USBD_CoreFindEP>
 8004cea:	4603      	mov	r3, r0
 8004cec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004cee:	7dbb      	ldrb	r3, [r7, #22]
 8004cf0:	2bff      	cmp	r3, #255	; 0xff
 8004cf2:	d025      	beq.n	8004d40 <USBD_LL_DataOutStage+0x15c>
 8004cf4:	7dbb      	ldrb	r3, [r7, #22]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d122      	bne.n	8004d40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d117      	bne.n	8004d36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8004d06:	7dba      	ldrb	r2, [r7, #22]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	32ae      	adds	r2, #174	; 0xae
 8004d0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d00f      	beq.n	8004d36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8004d16:	7dba      	ldrb	r2, [r7, #22]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8004d1e:	7dba      	ldrb	r2, [r7, #22]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	32ae      	adds	r2, #174	; 0xae
 8004d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d28:	699b      	ldr	r3, [r3, #24]
 8004d2a:	7afa      	ldrb	r2, [r7, #11]
 8004d2c:	4611      	mov	r1, r2
 8004d2e:	68f8      	ldr	r0, [r7, #12]
 8004d30:	4798      	blx	r3
 8004d32:	4603      	mov	r3, r0
 8004d34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8004d36:	7dfb      	ldrb	r3, [r7, #23]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8004d3c:	7dfb      	ldrb	r3, [r7, #23]
 8004d3e:	e000      	b.n	8004d42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3718      	adds	r7, #24
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}

08004d4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8004d4a:	b580      	push	{r7, lr}
 8004d4c:	b086      	sub	sp, #24
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	60f8      	str	r0, [r7, #12]
 8004d52:	460b      	mov	r3, r1
 8004d54:	607a      	str	r2, [r7, #4]
 8004d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8004d58:	7afb      	ldrb	r3, [r7, #11]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d16f      	bne.n	8004e3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	3314      	adds	r3, #20
 8004d62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d15a      	bne.n	8004e24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8004d6e:	693b      	ldr	r3, [r7, #16]
 8004d70:	689a      	ldr	r2, [r3, #8]
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	68db      	ldr	r3, [r3, #12]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d914      	bls.n	8004da4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	689a      	ldr	r2, [r3, #8]
 8004d7e:	693b      	ldr	r3, [r7, #16]
 8004d80:	68db      	ldr	r3, [r3, #12]
 8004d82:	1ad2      	subs	r2, r2, r3
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	689b      	ldr	r3, [r3, #8]
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	6879      	ldr	r1, [r7, #4]
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f001 f8ac 	bl	8005eee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004d96:	2300      	movs	r3, #0
 8004d98:	2200      	movs	r2, #0
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	68f8      	ldr	r0, [r7, #12]
 8004d9e:	f001 fcb7 	bl	8006710 <USBD_LL_PrepareReceive>
 8004da2:	e03f      	b.n	8004e24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	693b      	ldr	r3, [r7, #16]
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d11c      	bne.n	8004dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	685a      	ldr	r2, [r3, #4]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8004db8:	429a      	cmp	r2, r3
 8004dba:	d316      	bcc.n	8004dea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	685a      	ldr	r2, [r3, #4]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d20f      	bcs.n	8004dea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8004dca:	2200      	movs	r2, #0
 8004dcc:	2100      	movs	r1, #0
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 f88d 	bl	8005eee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8004ddc:	2300      	movs	r3, #0
 8004dde:	2200      	movs	r2, #0
 8004de0:	2100      	movs	r1, #0
 8004de2:	68f8      	ldr	r0, [r7, #12]
 8004de4:	f001 fc94 	bl	8006710 <USBD_LL_PrepareReceive>
 8004de8:	e01c      	b.n	8004e24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	2b03      	cmp	r3, #3
 8004df4:	d10f      	bne.n	8004e16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d009      	beq.n	8004e16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004e10:	68db      	ldr	r3, [r3, #12]
 8004e12:	68f8      	ldr	r0, [r7, #12]
 8004e14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8004e16:	2180      	movs	r1, #128	; 0x80
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f001 fbcf 	bl	80065bc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f001 f89a 	bl	8005f58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d03a      	beq.n	8004ea4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8004e2e:	68f8      	ldr	r0, [r7, #12]
 8004e30:	f7ff fe42 	bl	8004ab8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	2200      	movs	r2, #0
 8004e38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8004e3c:	e032      	b.n	8004ea4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8004e3e:	7afb      	ldrb	r3, [r7, #11]
 8004e40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	4619      	mov	r1, r3
 8004e48:	68f8      	ldr	r0, [r7, #12]
 8004e4a:	f000 f97f 	bl	800514c <USBD_CoreFindEP>
 8004e4e:	4603      	mov	r3, r0
 8004e50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8004e52:	7dfb      	ldrb	r3, [r7, #23]
 8004e54:	2bff      	cmp	r3, #255	; 0xff
 8004e56:	d025      	beq.n	8004ea4 <USBD_LL_DataInStage+0x15a>
 8004e58:	7dfb      	ldrb	r3, [r7, #23]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d122      	bne.n	8004ea4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	d11c      	bne.n	8004ea4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8004e6a:	7dfa      	ldrb	r2, [r7, #23]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	32ae      	adds	r2, #174	; 0xae
 8004e70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d014      	beq.n	8004ea4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8004e7a:	7dfa      	ldrb	r2, [r7, #23]
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8004e82:	7dfa      	ldrb	r2, [r7, #23]
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	32ae      	adds	r2, #174	; 0xae
 8004e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e8c:	695b      	ldr	r3, [r3, #20]
 8004e8e:	7afa      	ldrb	r2, [r7, #11]
 8004e90:	4611      	mov	r1, r2
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	4798      	blx	r3
 8004e96:	4603      	mov	r3, r0
 8004e98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8004e9a:	7dbb      	ldrb	r3, [r7, #22]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d001      	beq.n	8004ea4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8004ea0:	7dbb      	ldrb	r3, [r7, #22]
 8004ea2:	e000      	b.n	8004ea6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8004ea4:	2300      	movs	r3, #0
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	3718      	adds	r7, #24
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d014      	beq.n	8004f14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00e      	beq.n	8004f14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	687a      	ldr	r2, [r7, #4]
 8004f00:	6852      	ldr	r2, [r2, #4]
 8004f02:	b2d2      	uxtb	r2, r2
 8004f04:	4611      	mov	r1, r2
 8004f06:	6878      	ldr	r0, [r7, #4]
 8004f08:	4798      	blx	r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d001      	beq.n	8004f14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8004f10:	2303      	movs	r3, #3
 8004f12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f14:	2340      	movs	r3, #64	; 0x40
 8004f16:	2200      	movs	r2, #0
 8004f18:	2100      	movs	r1, #0
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f001 fb09 	bl	8006532 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2201      	movs	r2, #1
 8004f24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2240      	movs	r2, #64	; 0x40
 8004f2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8004f30:	2340      	movs	r3, #64	; 0x40
 8004f32:	2200      	movs	r2, #0
 8004f34:	2180      	movs	r1, #128	; 0x80
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f001 fafb 	bl	8006532 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	2240      	movs	r2, #64	; 0x40
 8004f46:	621a      	str	r2, [r3, #32]

  return ret;
 8004f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	3710      	adds	r7, #16
 8004f4e:	46bd      	mov	sp, r7
 8004f50:	bd80      	pop	{r7, pc}

08004f52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
 8004f5a:	460b      	mov	r3, r1
 8004f5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	78fa      	ldrb	r2, [r7, #3]
 8004f62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	370c      	adds	r7, #12
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f70:	4770      	bx	lr

08004f72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004f80:	b2da      	uxtb	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2204      	movs	r2, #4
 8004f8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8004f90:	2300      	movs	r3, #0
}
 8004f92:	4618      	mov	r0, r3
 8004f94:	370c      	adds	r7, #12
 8004f96:	46bd      	mov	sp, r7
 8004f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9c:	4770      	bx	lr

08004f9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8004f9e:	b480      	push	{r7}
 8004fa0:	b083      	sub	sp, #12
 8004fa2:	af00      	add	r7, sp, #0
 8004fa4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fac:	b2db      	uxtb	r3, r3
 8004fae:	2b04      	cmp	r3, #4
 8004fb0:	d106      	bne.n	8004fc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8004fb8:	b2da      	uxtb	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8004fc0:	2300      	movs	r3, #0
}
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d110      	bne.n	8005004 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00b      	beq.n	8005004 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d005      	beq.n	8005004 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8004ffe:	69db      	ldr	r3, [r3, #28]
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3708      	adds	r7, #8
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}

0800500e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b082      	sub	sp, #8
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
 8005016:	460b      	mov	r3, r1
 8005018:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	32ae      	adds	r2, #174	; 0xae
 8005024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d101      	bne.n	8005030 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800502c:	2303      	movs	r3, #3
 800502e:	e01c      	b.n	800506a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005036:	b2db      	uxtb	r3, r3
 8005038:	2b03      	cmp	r3, #3
 800503a:	d115      	bne.n	8005068 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	32ae      	adds	r2, #174	; 0xae
 8005046:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800504a:	6a1b      	ldr	r3, [r3, #32]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00b      	beq.n	8005068 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	32ae      	adds	r2, #174	; 0xae
 800505a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	78fa      	ldrb	r2, [r7, #3]
 8005062:	4611      	mov	r1, r2
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3708      	adds	r7, #8
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b082      	sub	sp, #8
 8005076:	af00      	add	r7, sp, #0
 8005078:	6078      	str	r0, [r7, #4]
 800507a:	460b      	mov	r3, r1
 800507c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	32ae      	adds	r2, #174	; 0xae
 8005088:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d101      	bne.n	8005094 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005090:	2303      	movs	r3, #3
 8005092:	e01c      	b.n	80050ce <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d115      	bne.n	80050cc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	32ae      	adds	r2, #174	; 0xae
 80050aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d00b      	beq.n	80050cc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	32ae      	adds	r2, #174	; 0xae
 80050be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	78fa      	ldrb	r2, [r7, #3]
 80050c6:	4611      	mov	r1, r2
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80050cc:	2300      	movs	r3, #0
}
 80050ce:	4618      	mov	r0, r3
 80050d0:	3708      	adds	r7, #8
 80050d2:	46bd      	mov	sp, r7
 80050d4:	bd80      	pop	{r7, pc}

080050d6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80050d6:	b480      	push	{r7}
 80050d8:	b083      	sub	sp, #12
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80050de:	2300      	movs	r3, #0
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	370c      	adds	r7, #12
 80050e4:	46bd      	mov	sp, r7
 80050e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ea:	4770      	bx	lr

080050ec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80050f4:	2300      	movs	r3, #0
 80050f6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00e      	beq.n	8005128 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	687a      	ldr	r2, [r7, #4]
 8005114:	6852      	ldr	r2, [r2, #4]
 8005116:	b2d2      	uxtb	r2, r2
 8005118:	4611      	mov	r1, r2
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	4798      	blx	r3
 800511e:	4603      	mov	r3, r0
 8005120:	2b00      	cmp	r3, #0
 8005122:	d001      	beq.n	8005128 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005124:	2303      	movs	r3, #3
 8005126:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005132:	b480      	push	{r7}
 8005134:	b083      	sub	sp, #12
 8005136:	af00      	add	r7, sp, #0
 8005138:	6078      	str	r0, [r7, #4]
 800513a:	460b      	mov	r3, r1
 800513c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800513e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005140:	4618      	mov	r0, r3
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005158:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800515a:	4618      	mov	r0, r3
 800515c:	370c      	adds	r7, #12
 800515e:	46bd      	mov	sp, r7
 8005160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005164:	4770      	bx	lr

08005166 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b086      	sub	sp, #24
 800516a:	af00      	add	r7, sp, #0
 800516c:	6078      	str	r0, [r7, #4]
 800516e:	460b      	mov	r3, r1
 8005170:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800517a:	2300      	movs	r3, #0
 800517c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	885b      	ldrh	r3, [r3, #2]
 8005182:	b29a      	uxth	r2, r3
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	781b      	ldrb	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	429a      	cmp	r2, r3
 800518c:	d920      	bls.n	80051d0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	b29b      	uxth	r3, r3
 8005194:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005196:	e013      	b.n	80051c0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005198:	f107 030a 	add.w	r3, r7, #10
 800519c:	4619      	mov	r1, r3
 800519e:	6978      	ldr	r0, [r7, #20]
 80051a0:	f000 f81b 	bl	80051da <USBD_GetNextDesc>
 80051a4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	785b      	ldrb	r3, [r3, #1]
 80051aa:	2b05      	cmp	r3, #5
 80051ac:	d108      	bne.n	80051c0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80051ae:	697b      	ldr	r3, [r7, #20]
 80051b0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80051b2:	693b      	ldr	r3, [r7, #16]
 80051b4:	789b      	ldrb	r3, [r3, #2]
 80051b6:	78fa      	ldrb	r2, [r7, #3]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d008      	beq.n	80051ce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	885b      	ldrh	r3, [r3, #2]
 80051c4:	b29a      	uxth	r2, r3
 80051c6:	897b      	ldrh	r3, [r7, #10]
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d8e5      	bhi.n	8005198 <USBD_GetEpDesc+0x32>
 80051cc:	e000      	b.n	80051d0 <USBD_GetEpDesc+0x6a>
          break;
 80051ce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80051d0:	693b      	ldr	r3, [r7, #16]
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3718      	adds	r7, #24
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80051da:	b480      	push	{r7}
 80051dc:	b085      	sub	sp, #20
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
 80051e2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	881a      	ldrh	r2, [r3, #0]
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	781b      	ldrb	r3, [r3, #0]
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	4413      	add	r3, r2
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	461a      	mov	r2, r3
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4413      	add	r3, r2
 8005204:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005206:	68fb      	ldr	r3, [r7, #12]
}
 8005208:	4618      	mov	r0, r3
 800520a:	3714      	adds	r7, #20
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr

08005214 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005214:	b480      	push	{r7}
 8005216:	b087      	sub	sp, #28
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	3301      	adds	r3, #1
 800522a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005232:	8a3b      	ldrh	r3, [r7, #16]
 8005234:	021b      	lsls	r3, r3, #8
 8005236:	b21a      	sxth	r2, r3
 8005238:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800523c:	4313      	orrs	r3, r2
 800523e:	b21b      	sxth	r3, r3
 8005240:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005242:	89fb      	ldrh	r3, [r7, #14]
}
 8005244:	4618      	mov	r0, r3
 8005246:	371c      	adds	r7, #28
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b084      	sub	sp, #16
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
 8005258:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800525a:	2300      	movs	r3, #0
 800525c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005266:	2b40      	cmp	r3, #64	; 0x40
 8005268:	d005      	beq.n	8005276 <USBD_StdDevReq+0x26>
 800526a:	2b40      	cmp	r3, #64	; 0x40
 800526c:	d857      	bhi.n	800531e <USBD_StdDevReq+0xce>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d00f      	beq.n	8005292 <USBD_StdDevReq+0x42>
 8005272:	2b20      	cmp	r3, #32
 8005274:	d153      	bne.n	800531e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	32ae      	adds	r2, #174	; 0xae
 8005280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005284:	689b      	ldr	r3, [r3, #8]
 8005286:	6839      	ldr	r1, [r7, #0]
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	4798      	blx	r3
 800528c:	4603      	mov	r3, r0
 800528e:	73fb      	strb	r3, [r7, #15]
      break;
 8005290:	e04a      	b.n	8005328 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	785b      	ldrb	r3, [r3, #1]
 8005296:	2b09      	cmp	r3, #9
 8005298:	d83b      	bhi.n	8005312 <USBD_StdDevReq+0xc2>
 800529a:	a201      	add	r2, pc, #4	; (adr r2, 80052a0 <USBD_StdDevReq+0x50>)
 800529c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052a0:	080052f5 	.word	0x080052f5
 80052a4:	08005309 	.word	0x08005309
 80052a8:	08005313 	.word	0x08005313
 80052ac:	080052ff 	.word	0x080052ff
 80052b0:	08005313 	.word	0x08005313
 80052b4:	080052d3 	.word	0x080052d3
 80052b8:	080052c9 	.word	0x080052c9
 80052bc:	08005313 	.word	0x08005313
 80052c0:	080052eb 	.word	0x080052eb
 80052c4:	080052dd 	.word	0x080052dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80052c8:	6839      	ldr	r1, [r7, #0]
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fa3c 	bl	8005748 <USBD_GetDescriptor>
          break;
 80052d0:	e024      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80052d2:	6839      	ldr	r1, [r7, #0]
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 fba1 	bl	8005a1c <USBD_SetAddress>
          break;
 80052da:	e01f      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80052dc:	6839      	ldr	r1, [r7, #0]
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 fbe0 	bl	8005aa4 <USBD_SetConfig>
 80052e4:	4603      	mov	r3, r0
 80052e6:	73fb      	strb	r3, [r7, #15]
          break;
 80052e8:	e018      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80052ea:	6839      	ldr	r1, [r7, #0]
 80052ec:	6878      	ldr	r0, [r7, #4]
 80052ee:	f000 fc83 	bl	8005bf8 <USBD_GetConfig>
          break;
 80052f2:	e013      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80052f4:	6839      	ldr	r1, [r7, #0]
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 fcb4 	bl	8005c64 <USBD_GetStatus>
          break;
 80052fc:	e00e      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80052fe:	6839      	ldr	r1, [r7, #0]
 8005300:	6878      	ldr	r0, [r7, #4]
 8005302:	f000 fce3 	bl	8005ccc <USBD_SetFeature>
          break;
 8005306:	e009      	b.n	800531c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005308:	6839      	ldr	r1, [r7, #0]
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f000 fd07 	bl	8005d1e <USBD_ClrFeature>
          break;
 8005310:	e004      	b.n	800531c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005312:	6839      	ldr	r1, [r7, #0]
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 fd5e 	bl	8005dd6 <USBD_CtlError>
          break;
 800531a:	bf00      	nop
      }
      break;
 800531c:	e004      	b.n	8005328 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800531e:	6839      	ldr	r1, [r7, #0]
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fd58 	bl	8005dd6 <USBD_CtlError>
      break;
 8005326:	bf00      	nop
  }

  return ret;
 8005328:	7bfb      	ldrb	r3, [r7, #15]
}
 800532a:	4618      	mov	r0, r3
 800532c:	3710      	adds	r7, #16
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop

08005334 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b084      	sub	sp, #16
 8005338:	af00      	add	r7, sp, #0
 800533a:	6078      	str	r0, [r7, #4]
 800533c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	781b      	ldrb	r3, [r3, #0]
 8005346:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800534a:	2b40      	cmp	r3, #64	; 0x40
 800534c:	d005      	beq.n	800535a <USBD_StdItfReq+0x26>
 800534e:	2b40      	cmp	r3, #64	; 0x40
 8005350:	d852      	bhi.n	80053f8 <USBD_StdItfReq+0xc4>
 8005352:	2b00      	cmp	r3, #0
 8005354:	d001      	beq.n	800535a <USBD_StdItfReq+0x26>
 8005356:	2b20      	cmp	r3, #32
 8005358:	d14e      	bne.n	80053f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005360:	b2db      	uxtb	r3, r3
 8005362:	3b01      	subs	r3, #1
 8005364:	2b02      	cmp	r3, #2
 8005366:	d840      	bhi.n	80053ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	889b      	ldrh	r3, [r3, #4]
 800536c:	b2db      	uxtb	r3, r3
 800536e:	2b01      	cmp	r3, #1
 8005370:	d836      	bhi.n	80053e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	889b      	ldrh	r3, [r3, #4]
 8005376:	b2db      	uxtb	r3, r3
 8005378:	4619      	mov	r1, r3
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f7ff fed9 	bl	8005132 <USBD_CoreFindIF>
 8005380:	4603      	mov	r3, r0
 8005382:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005384:	7bbb      	ldrb	r3, [r7, #14]
 8005386:	2bff      	cmp	r3, #255	; 0xff
 8005388:	d01d      	beq.n	80053c6 <USBD_StdItfReq+0x92>
 800538a:	7bbb      	ldrb	r3, [r7, #14]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d11a      	bne.n	80053c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005390:	7bba      	ldrb	r2, [r7, #14]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	32ae      	adds	r2, #174	; 0xae
 8005396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800539a:	689b      	ldr	r3, [r3, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00f      	beq.n	80053c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80053a0:	7bba      	ldrb	r2, [r7, #14]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80053a8:	7bba      	ldrb	r2, [r7, #14]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	32ae      	adds	r2, #174	; 0xae
 80053ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	6839      	ldr	r1, [r7, #0]
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	4798      	blx	r3
 80053ba:	4603      	mov	r3, r0
 80053bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80053be:	e004      	b.n	80053ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80053c0:	2303      	movs	r3, #3
 80053c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80053c4:	e001      	b.n	80053ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80053c6:	2303      	movs	r3, #3
 80053c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	88db      	ldrh	r3, [r3, #6]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d110      	bne.n	80053f4 <USBD_StdItfReq+0xc0>
 80053d2:	7bfb      	ldrb	r3, [r7, #15]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10d      	bne.n	80053f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f000 fdaa 	bl	8005f32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80053de:	e009      	b.n	80053f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80053e0:	6839      	ldr	r1, [r7, #0]
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fcf7 	bl	8005dd6 <USBD_CtlError>
          break;
 80053e8:	e004      	b.n	80053f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80053ea:	6839      	ldr	r1, [r7, #0]
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 fcf2 	bl	8005dd6 <USBD_CtlError>
          break;
 80053f2:	e000      	b.n	80053f6 <USBD_StdItfReq+0xc2>
          break;
 80053f4:	bf00      	nop
      }
      break;
 80053f6:	e004      	b.n	8005402 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80053f8:	6839      	ldr	r1, [r7, #0]
 80053fa:	6878      	ldr	r0, [r7, #4]
 80053fc:	f000 fceb 	bl	8005dd6 <USBD_CtlError>
      break;
 8005400:	bf00      	nop
  }

  return ret;
 8005402:	7bfb      	ldrb	r3, [r7, #15]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3710      	adds	r7, #16
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}

0800540c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	889b      	ldrh	r3, [r3, #4]
 800541e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	781b      	ldrb	r3, [r3, #0]
 8005424:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005428:	2b40      	cmp	r3, #64	; 0x40
 800542a:	d007      	beq.n	800543c <USBD_StdEPReq+0x30>
 800542c:	2b40      	cmp	r3, #64	; 0x40
 800542e:	f200 817f 	bhi.w	8005730 <USBD_StdEPReq+0x324>
 8005432:	2b00      	cmp	r3, #0
 8005434:	d02a      	beq.n	800548c <USBD_StdEPReq+0x80>
 8005436:	2b20      	cmp	r3, #32
 8005438:	f040 817a 	bne.w	8005730 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800543c:	7bbb      	ldrb	r3, [r7, #14]
 800543e:	4619      	mov	r1, r3
 8005440:	6878      	ldr	r0, [r7, #4]
 8005442:	f7ff fe83 	bl	800514c <USBD_CoreFindEP>
 8005446:	4603      	mov	r3, r0
 8005448:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800544a:	7b7b      	ldrb	r3, [r7, #13]
 800544c:	2bff      	cmp	r3, #255	; 0xff
 800544e:	f000 8174 	beq.w	800573a <USBD_StdEPReq+0x32e>
 8005452:	7b7b      	ldrb	r3, [r7, #13]
 8005454:	2b00      	cmp	r3, #0
 8005456:	f040 8170 	bne.w	800573a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800545a:	7b7a      	ldrb	r2, [r7, #13]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005462:	7b7a      	ldrb	r2, [r7, #13]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	32ae      	adds	r2, #174	; 0xae
 8005468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	f000 8163 	beq.w	800573a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005474:	7b7a      	ldrb	r2, [r7, #13]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	32ae      	adds	r2, #174	; 0xae
 800547a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	6839      	ldr	r1, [r7, #0]
 8005482:	6878      	ldr	r0, [r7, #4]
 8005484:	4798      	blx	r3
 8005486:	4603      	mov	r3, r0
 8005488:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800548a:	e156      	b.n	800573a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	785b      	ldrb	r3, [r3, #1]
 8005490:	2b03      	cmp	r3, #3
 8005492:	d008      	beq.n	80054a6 <USBD_StdEPReq+0x9a>
 8005494:	2b03      	cmp	r3, #3
 8005496:	f300 8145 	bgt.w	8005724 <USBD_StdEPReq+0x318>
 800549a:	2b00      	cmp	r3, #0
 800549c:	f000 809b 	beq.w	80055d6 <USBD_StdEPReq+0x1ca>
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d03c      	beq.n	800551e <USBD_StdEPReq+0x112>
 80054a4:	e13e      	b.n	8005724 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054ac:	b2db      	uxtb	r3, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d002      	beq.n	80054b8 <USBD_StdEPReq+0xac>
 80054b2:	2b03      	cmp	r3, #3
 80054b4:	d016      	beq.n	80054e4 <USBD_StdEPReq+0xd8>
 80054b6:	e02c      	b.n	8005512 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80054b8:	7bbb      	ldrb	r3, [r7, #14]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00d      	beq.n	80054da <USBD_StdEPReq+0xce>
 80054be:	7bbb      	ldrb	r3, [r7, #14]
 80054c0:	2b80      	cmp	r3, #128	; 0x80
 80054c2:	d00a      	beq.n	80054da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80054c4:	7bbb      	ldrb	r3, [r7, #14]
 80054c6:	4619      	mov	r1, r3
 80054c8:	6878      	ldr	r0, [r7, #4]
 80054ca:	f001 f877 	bl	80065bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80054ce:	2180      	movs	r1, #128	; 0x80
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f001 f873 	bl	80065bc <USBD_LL_StallEP>
 80054d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80054d8:	e020      	b.n	800551c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80054da:	6839      	ldr	r1, [r7, #0]
 80054dc:	6878      	ldr	r0, [r7, #4]
 80054de:	f000 fc7a 	bl	8005dd6 <USBD_CtlError>
              break;
 80054e2:	e01b      	b.n	800551c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	885b      	ldrh	r3, [r3, #2]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d10e      	bne.n	800550a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <USBD_StdEPReq+0xfe>
 80054f2:	7bbb      	ldrb	r3, [r7, #14]
 80054f4:	2b80      	cmp	r3, #128	; 0x80
 80054f6:	d008      	beq.n	800550a <USBD_StdEPReq+0xfe>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	88db      	ldrh	r3, [r3, #6]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005500:	7bbb      	ldrb	r3, [r7, #14]
 8005502:	4619      	mov	r1, r3
 8005504:	6878      	ldr	r0, [r7, #4]
 8005506:	f001 f859 	bl	80065bc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800550a:	6878      	ldr	r0, [r7, #4]
 800550c:	f000 fd11 	bl	8005f32 <USBD_CtlSendStatus>

              break;
 8005510:	e004      	b.n	800551c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005512:	6839      	ldr	r1, [r7, #0]
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 fc5e 	bl	8005dd6 <USBD_CtlError>
              break;
 800551a:	bf00      	nop
          }
          break;
 800551c:	e107      	b.n	800572e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005524:	b2db      	uxtb	r3, r3
 8005526:	2b02      	cmp	r3, #2
 8005528:	d002      	beq.n	8005530 <USBD_StdEPReq+0x124>
 800552a:	2b03      	cmp	r3, #3
 800552c:	d016      	beq.n	800555c <USBD_StdEPReq+0x150>
 800552e:	e04b      	b.n	80055c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005530:	7bbb      	ldrb	r3, [r7, #14]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00d      	beq.n	8005552 <USBD_StdEPReq+0x146>
 8005536:	7bbb      	ldrb	r3, [r7, #14]
 8005538:	2b80      	cmp	r3, #128	; 0x80
 800553a:	d00a      	beq.n	8005552 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800553c:	7bbb      	ldrb	r3, [r7, #14]
 800553e:	4619      	mov	r1, r3
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f001 f83b 	bl	80065bc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005546:	2180      	movs	r1, #128	; 0x80
 8005548:	6878      	ldr	r0, [r7, #4]
 800554a:	f001 f837 	bl	80065bc <USBD_LL_StallEP>
 800554e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005550:	e040      	b.n	80055d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005552:	6839      	ldr	r1, [r7, #0]
 8005554:	6878      	ldr	r0, [r7, #4]
 8005556:	f000 fc3e 	bl	8005dd6 <USBD_CtlError>
              break;
 800555a:	e03b      	b.n	80055d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	885b      	ldrh	r3, [r3, #2]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d136      	bne.n	80055d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005564:	7bbb      	ldrb	r3, [r7, #14]
 8005566:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800556a:	2b00      	cmp	r3, #0
 800556c:	d004      	beq.n	8005578 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800556e:	7bbb      	ldrb	r3, [r7, #14]
 8005570:	4619      	mov	r1, r3
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f001 f841 	bl	80065fa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fcda 	bl	8005f32 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800557e:	7bbb      	ldrb	r3, [r7, #14]
 8005580:	4619      	mov	r1, r3
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f7ff fde2 	bl	800514c <USBD_CoreFindEP>
 8005588:	4603      	mov	r3, r0
 800558a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800558c:	7b7b      	ldrb	r3, [r7, #13]
 800558e:	2bff      	cmp	r3, #255	; 0xff
 8005590:	d01f      	beq.n	80055d2 <USBD_StdEPReq+0x1c6>
 8005592:	7b7b      	ldrb	r3, [r7, #13]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d11c      	bne.n	80055d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005598:	7b7a      	ldrb	r2, [r7, #13]
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80055a0:	7b7a      	ldrb	r2, [r7, #13]
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	32ae      	adds	r2, #174	; 0xae
 80055a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d010      	beq.n	80055d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80055b0:	7b7a      	ldrb	r2, [r7, #13]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	32ae      	adds	r2, #174	; 0xae
 80055b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	6839      	ldr	r1, [r7, #0]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	4798      	blx	r3
 80055c2:	4603      	mov	r3, r0
 80055c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80055c6:	e004      	b.n	80055d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80055c8:	6839      	ldr	r1, [r7, #0]
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fc03 	bl	8005dd6 <USBD_CtlError>
              break;
 80055d0:	e000      	b.n	80055d4 <USBD_StdEPReq+0x1c8>
              break;
 80055d2:	bf00      	nop
          }
          break;
 80055d4:	e0ab      	b.n	800572e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d002      	beq.n	80055e8 <USBD_StdEPReq+0x1dc>
 80055e2:	2b03      	cmp	r3, #3
 80055e4:	d032      	beq.n	800564c <USBD_StdEPReq+0x240>
 80055e6:	e097      	b.n	8005718 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80055e8:	7bbb      	ldrb	r3, [r7, #14]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d007      	beq.n	80055fe <USBD_StdEPReq+0x1f2>
 80055ee:	7bbb      	ldrb	r3, [r7, #14]
 80055f0:	2b80      	cmp	r3, #128	; 0x80
 80055f2:	d004      	beq.n	80055fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80055f4:	6839      	ldr	r1, [r7, #0]
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f000 fbed 	bl	8005dd6 <USBD_CtlError>
                break;
 80055fc:	e091      	b.n	8005722 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80055fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005602:	2b00      	cmp	r3, #0
 8005604:	da0b      	bge.n	800561e <USBD_StdEPReq+0x212>
 8005606:	7bbb      	ldrb	r3, [r7, #14]
 8005608:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	3310      	adds	r3, #16
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	4413      	add	r3, r2
 800561a:	3304      	adds	r3, #4
 800561c:	e00b      	b.n	8005636 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800561e:	7bbb      	ldrb	r3, [r7, #14]
 8005620:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005624:	4613      	mov	r3, r2
 8005626:	009b      	lsls	r3, r3, #2
 8005628:	4413      	add	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	3304      	adds	r3, #4
 8005636:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	2200      	movs	r2, #0
 800563c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800563e:	68bb      	ldr	r3, [r7, #8]
 8005640:	2202      	movs	r2, #2
 8005642:	4619      	mov	r1, r3
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f000 fc37 	bl	8005eb8 <USBD_CtlSendData>
              break;
 800564a:	e06a      	b.n	8005722 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800564c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005650:	2b00      	cmp	r3, #0
 8005652:	da11      	bge.n	8005678 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005654:	7bbb      	ldrb	r3, [r7, #14]
 8005656:	f003 020f 	and.w	r2, r3, #15
 800565a:	6879      	ldr	r1, [r7, #4]
 800565c:	4613      	mov	r3, r2
 800565e:	009b      	lsls	r3, r3, #2
 8005660:	4413      	add	r3, r2
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	440b      	add	r3, r1
 8005666:	3324      	adds	r3, #36	; 0x24
 8005668:	881b      	ldrh	r3, [r3, #0]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d117      	bne.n	800569e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800566e:	6839      	ldr	r1, [r7, #0]
 8005670:	6878      	ldr	r0, [r7, #4]
 8005672:	f000 fbb0 	bl	8005dd6 <USBD_CtlError>
                  break;
 8005676:	e054      	b.n	8005722 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005678:	7bbb      	ldrb	r3, [r7, #14]
 800567a:	f003 020f 	and.w	r2, r3, #15
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4613      	mov	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	4413      	add	r3, r2
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	440b      	add	r3, r1
 800568a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800568e:	881b      	ldrh	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d104      	bne.n	800569e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005694:	6839      	ldr	r1, [r7, #0]
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f000 fb9d 	bl	8005dd6 <USBD_CtlError>
                  break;
 800569c:	e041      	b.n	8005722 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800569e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	da0b      	bge.n	80056be <USBD_StdEPReq+0x2b2>
 80056a6:	7bbb      	ldrb	r3, [r7, #14]
 80056a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	3310      	adds	r3, #16
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4413      	add	r3, r2
 80056ba:	3304      	adds	r3, #4
 80056bc:	e00b      	b.n	80056d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80056be:	7bbb      	ldrb	r3, [r7, #14]
 80056c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80056c4:	4613      	mov	r3, r2
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	009b      	lsls	r3, r3, #2
 80056cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	4413      	add	r3, r2
 80056d4:	3304      	adds	r3, #4
 80056d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80056d8:	7bbb      	ldrb	r3, [r7, #14]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d002      	beq.n	80056e4 <USBD_StdEPReq+0x2d8>
 80056de:	7bbb      	ldrb	r3, [r7, #14]
 80056e0:	2b80      	cmp	r3, #128	; 0x80
 80056e2:	d103      	bne.n	80056ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	601a      	str	r2, [r3, #0]
 80056ea:	e00e      	b.n	800570a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80056ec:	7bbb      	ldrb	r3, [r7, #14]
 80056ee:	4619      	mov	r1, r3
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 ffa1 	bl	8006638 <USBD_LL_IsStallEP>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	2201      	movs	r2, #1
 8005700:	601a      	str	r2, [r3, #0]
 8005702:	e002      	b.n	800570a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	2200      	movs	r2, #0
 8005708:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	2202      	movs	r2, #2
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fbd1 	bl	8005eb8 <USBD_CtlSendData>
              break;
 8005716:	e004      	b.n	8005722 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005718:	6839      	ldr	r1, [r7, #0]
 800571a:	6878      	ldr	r0, [r7, #4]
 800571c:	f000 fb5b 	bl	8005dd6 <USBD_CtlError>
              break;
 8005720:	bf00      	nop
          }
          break;
 8005722:	e004      	b.n	800572e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005724:	6839      	ldr	r1, [r7, #0]
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fb55 	bl	8005dd6 <USBD_CtlError>
          break;
 800572c:	bf00      	nop
      }
      break;
 800572e:	e005      	b.n	800573c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005730:	6839      	ldr	r1, [r7, #0]
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fb4f 	bl	8005dd6 <USBD_CtlError>
      break;
 8005738:	e000      	b.n	800573c <USBD_StdEPReq+0x330>
      break;
 800573a:	bf00      	nop
  }

  return ret;
 800573c:	7bfb      	ldrb	r3, [r7, #15]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b084      	sub	sp, #16
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005752:	2300      	movs	r3, #0
 8005754:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800575a:	2300      	movs	r3, #0
 800575c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	885b      	ldrh	r3, [r3, #2]
 8005762:	0a1b      	lsrs	r3, r3, #8
 8005764:	b29b      	uxth	r3, r3
 8005766:	3b01      	subs	r3, #1
 8005768:	2b06      	cmp	r3, #6
 800576a:	f200 8128 	bhi.w	80059be <USBD_GetDescriptor+0x276>
 800576e:	a201      	add	r2, pc, #4	; (adr r2, 8005774 <USBD_GetDescriptor+0x2c>)
 8005770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005774:	08005791 	.word	0x08005791
 8005778:	080057a9 	.word	0x080057a9
 800577c:	080057e9 	.word	0x080057e9
 8005780:	080059bf 	.word	0x080059bf
 8005784:	080059bf 	.word	0x080059bf
 8005788:	0800595f 	.word	0x0800595f
 800578c:	0800598b 	.word	0x0800598b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	7c12      	ldrb	r2, [r2, #16]
 800579c:	f107 0108 	add.w	r1, r7, #8
 80057a0:	4610      	mov	r0, r2
 80057a2:	4798      	blx	r3
 80057a4:	60f8      	str	r0, [r7, #12]
      break;
 80057a6:	e112      	b.n	80059ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	7c1b      	ldrb	r3, [r3, #16]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b8:	f107 0208 	add.w	r2, r7, #8
 80057bc:	4610      	mov	r0, r2
 80057be:	4798      	blx	r3
 80057c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3301      	adds	r3, #1
 80057c6:	2202      	movs	r2, #2
 80057c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80057ca:	e100      	b.n	80059ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	f107 0208 	add.w	r2, r7, #8
 80057d8:	4610      	mov	r0, r2
 80057da:	4798      	blx	r3
 80057dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	3301      	adds	r3, #1
 80057e2:	2202      	movs	r2, #2
 80057e4:	701a      	strb	r2, [r3, #0]
      break;
 80057e6:	e0f2      	b.n	80059ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	885b      	ldrh	r3, [r3, #2]
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b05      	cmp	r3, #5
 80057f0:	f200 80ac 	bhi.w	800594c <USBD_GetDescriptor+0x204>
 80057f4:	a201      	add	r2, pc, #4	; (adr r2, 80057fc <USBD_GetDescriptor+0xb4>)
 80057f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057fa:	bf00      	nop
 80057fc:	08005815 	.word	0x08005815
 8005800:	08005849 	.word	0x08005849
 8005804:	0800587d 	.word	0x0800587d
 8005808:	080058b1 	.word	0x080058b1
 800580c:	080058e5 	.word	0x080058e5
 8005810:	08005919 	.word	0x08005919
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d00b      	beq.n	8005838 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	7c12      	ldrb	r2, [r2, #16]
 800582c:	f107 0108 	add.w	r1, r7, #8
 8005830:	4610      	mov	r0, r2
 8005832:	4798      	blx	r3
 8005834:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005836:	e091      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005838:	6839      	ldr	r1, [r7, #0]
 800583a:	6878      	ldr	r0, [r7, #4]
 800583c:	f000 facb 	bl	8005dd6 <USBD_CtlError>
            err++;
 8005840:	7afb      	ldrb	r3, [r7, #11]
 8005842:	3301      	adds	r3, #1
 8005844:	72fb      	strb	r3, [r7, #11]
          break;
 8005846:	e089      	b.n	800595c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d00b      	beq.n	800586c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	687a      	ldr	r2, [r7, #4]
 800585e:	7c12      	ldrb	r2, [r2, #16]
 8005860:	f107 0108 	add.w	r1, r7, #8
 8005864:	4610      	mov	r0, r2
 8005866:	4798      	blx	r3
 8005868:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800586a:	e077      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fab1 	bl	8005dd6 <USBD_CtlError>
            err++;
 8005874:	7afb      	ldrb	r3, [r7, #11]
 8005876:	3301      	adds	r3, #1
 8005878:	72fb      	strb	r3, [r7, #11]
          break;
 800587a:	e06f      	b.n	800595c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00b      	beq.n	80058a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	7c12      	ldrb	r2, [r2, #16]
 8005894:	f107 0108 	add.w	r1, r7, #8
 8005898:	4610      	mov	r0, r2
 800589a:	4798      	blx	r3
 800589c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800589e:	e05d      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058a0:	6839      	ldr	r1, [r7, #0]
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 fa97 	bl	8005dd6 <USBD_CtlError>
            err++;
 80058a8:	7afb      	ldrb	r3, [r7, #11]
 80058aa:	3301      	adds	r3, #1
 80058ac:	72fb      	strb	r3, [r7, #11]
          break;
 80058ae:	e055      	b.n	800595c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058b6:	691b      	ldr	r3, [r3, #16]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00b      	beq.n	80058d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058c2:	691b      	ldr	r3, [r3, #16]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	7c12      	ldrb	r2, [r2, #16]
 80058c8:	f107 0108 	add.w	r1, r7, #8
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
 80058d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80058d2:	e043      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80058d4:	6839      	ldr	r1, [r7, #0]
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 fa7d 	bl	8005dd6 <USBD_CtlError>
            err++;
 80058dc:	7afb      	ldrb	r3, [r7, #11]
 80058de:	3301      	adds	r3, #1
 80058e0:	72fb      	strb	r3, [r7, #11]
          break;
 80058e2:	e03b      	b.n	800595c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058ea:	695b      	ldr	r3, [r3, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00b      	beq.n	8005908 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80058f6:	695b      	ldr	r3, [r3, #20]
 80058f8:	687a      	ldr	r2, [r7, #4]
 80058fa:	7c12      	ldrb	r2, [r2, #16]
 80058fc:	f107 0108 	add.w	r1, r7, #8
 8005900:	4610      	mov	r0, r2
 8005902:	4798      	blx	r3
 8005904:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005906:	e029      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005908:	6839      	ldr	r1, [r7, #0]
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 fa63 	bl	8005dd6 <USBD_CtlError>
            err++;
 8005910:	7afb      	ldrb	r3, [r7, #11]
 8005912:	3301      	adds	r3, #1
 8005914:	72fb      	strb	r3, [r7, #11]
          break;
 8005916:	e021      	b.n	800595c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800591e:	699b      	ldr	r3, [r3, #24]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d00b      	beq.n	800593c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800592a:	699b      	ldr	r3, [r3, #24]
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	7c12      	ldrb	r2, [r2, #16]
 8005930:	f107 0108 	add.w	r1, r7, #8
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
 8005938:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800593a:	e00f      	b.n	800595c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800593c:	6839      	ldr	r1, [r7, #0]
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f000 fa49 	bl	8005dd6 <USBD_CtlError>
            err++;
 8005944:	7afb      	ldrb	r3, [r7, #11]
 8005946:	3301      	adds	r3, #1
 8005948:	72fb      	strb	r3, [r7, #11]
          break;
 800594a:	e007      	b.n	800595c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800594c:	6839      	ldr	r1, [r7, #0]
 800594e:	6878      	ldr	r0, [r7, #4]
 8005950:	f000 fa41 	bl	8005dd6 <USBD_CtlError>
          err++;
 8005954:	7afb      	ldrb	r3, [r7, #11]
 8005956:	3301      	adds	r3, #1
 8005958:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800595a:	bf00      	nop
      }
      break;
 800595c:	e037      	b.n	80059ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	7c1b      	ldrb	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d109      	bne.n	800597a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800596e:	f107 0208 	add.w	r2, r7, #8
 8005972:	4610      	mov	r0, r2
 8005974:	4798      	blx	r3
 8005976:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8005978:	e029      	b.n	80059ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 fa2a 	bl	8005dd6 <USBD_CtlError>
        err++;
 8005982:	7afb      	ldrb	r3, [r7, #11]
 8005984:	3301      	adds	r3, #1
 8005986:	72fb      	strb	r3, [r7, #11]
      break;
 8005988:	e021      	b.n	80059ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	7c1b      	ldrb	r3, [r3, #16]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d10d      	bne.n	80059ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f107 0208 	add.w	r2, r7, #8
 800599e:	4610      	mov	r0, r2
 80059a0:	4798      	blx	r3
 80059a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	3301      	adds	r3, #1
 80059a8:	2207      	movs	r2, #7
 80059aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80059ac:	e00f      	b.n	80059ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80059ae:	6839      	ldr	r1, [r7, #0]
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 fa10 	bl	8005dd6 <USBD_CtlError>
        err++;
 80059b6:	7afb      	ldrb	r3, [r7, #11]
 80059b8:	3301      	adds	r3, #1
 80059ba:	72fb      	strb	r3, [r7, #11]
      break;
 80059bc:	e007      	b.n	80059ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fa08 	bl	8005dd6 <USBD_CtlError>
      err++;
 80059c6:	7afb      	ldrb	r3, [r7, #11]
 80059c8:	3301      	adds	r3, #1
 80059ca:	72fb      	strb	r3, [r7, #11]
      break;
 80059cc:	bf00      	nop
  }

  if (err != 0U)
 80059ce:	7afb      	ldrb	r3, [r7, #11]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d11e      	bne.n	8005a12 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80059d4:	683b      	ldr	r3, [r7, #0]
 80059d6:	88db      	ldrh	r3, [r3, #6]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d016      	beq.n	8005a0a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80059dc:	893b      	ldrh	r3, [r7, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d00e      	beq.n	8005a00 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	88da      	ldrh	r2, [r3, #6]
 80059e6:	893b      	ldrh	r3, [r7, #8]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	bf28      	it	cs
 80059ec:	4613      	movcs	r3, r2
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80059f2:	893b      	ldrh	r3, [r7, #8]
 80059f4:	461a      	mov	r2, r3
 80059f6:	68f9      	ldr	r1, [r7, #12]
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa5d 	bl	8005eb8 <USBD_CtlSendData>
 80059fe:	e009      	b.n	8005a14 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8005a00:	6839      	ldr	r1, [r7, #0]
 8005a02:	6878      	ldr	r0, [r7, #4]
 8005a04:	f000 f9e7 	bl	8005dd6 <USBD_CtlError>
 8005a08:	e004      	b.n	8005a14 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa91 	bl	8005f32 <USBD_CtlSendStatus>
 8005a10:	e000      	b.n	8005a14 <USBD_GetDescriptor+0x2cc>
    return;
 8005a12:	bf00      	nop
  }
}
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop

08005a1c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
 8005a24:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	889b      	ldrh	r3, [r3, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d131      	bne.n	8005a92 <USBD_SetAddress+0x76>
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	88db      	ldrh	r3, [r3, #6]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d12d      	bne.n	8005a92 <USBD_SetAddress+0x76>
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	885b      	ldrh	r3, [r3, #2]
 8005a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8005a3c:	d829      	bhi.n	8005a92 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	885b      	ldrh	r3, [r3, #2]
 8005a42:	b2db      	uxtb	r3, r3
 8005a44:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005a48:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a50:	b2db      	uxtb	r3, r3
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d104      	bne.n	8005a60 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8005a56:	6839      	ldr	r1, [r7, #0]
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 f9bc 	bl	8005dd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a5e:	e01d      	b.n	8005a9c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	7bfa      	ldrb	r2, [r7, #15]
 8005a64:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005a68:	7bfb      	ldrb	r3, [r7, #15]
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fe0f 	bl	8006690 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa5d 	bl	8005f32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8005a78:	7bfb      	ldrb	r3, [r7, #15]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d004      	beq.n	8005a88 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2202      	movs	r2, #2
 8005a82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a86:	e009      	b.n	8005a9c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a90:	e004      	b.n	8005a9c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8005a92:	6839      	ldr	r1, [r7, #0]
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f99e 	bl	8005dd6 <USBD_CtlError>
  }
}
 8005a9a:	bf00      	nop
 8005a9c:	bf00      	nop
 8005a9e:	3710      	adds	r7, #16
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	bd80      	pop	{r7, pc}

08005aa4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b084      	sub	sp, #16
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	6078      	str	r0, [r7, #4]
 8005aac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005aae:	2300      	movs	r3, #0
 8005ab0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	885b      	ldrh	r3, [r3, #2]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b4e      	ldr	r3, [pc, #312]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005aba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005abc:	4b4d      	ldr	r3, [pc, #308]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d905      	bls.n	8005ad0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8005ac4:	6839      	ldr	r1, [r7, #0]
 8005ac6:	6878      	ldr	r0, [r7, #4]
 8005ac8:	f000 f985 	bl	8005dd6 <USBD_CtlError>
    return USBD_FAIL;
 8005acc:	2303      	movs	r3, #3
 8005ace:	e08c      	b.n	8005bea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	2b02      	cmp	r3, #2
 8005ada:	d002      	beq.n	8005ae2 <USBD_SetConfig+0x3e>
 8005adc:	2b03      	cmp	r3, #3
 8005ade:	d029      	beq.n	8005b34 <USBD_SetConfig+0x90>
 8005ae0:	e075      	b.n	8005bce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8005ae2:	4b44      	ldr	r3, [pc, #272]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d020      	beq.n	8005b2c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8005aea:	4b42      	ldr	r3, [pc, #264]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	461a      	mov	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005af4:	4b3f      	ldr	r3, [pc, #252]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	4619      	mov	r1, r3
 8005afa:	6878      	ldr	r0, [r7, #4]
 8005afc:	f7fe ffe7 	bl	8004ace <USBD_SetClassConfig>
 8005b00:	4603      	mov	r3, r0
 8005b02:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8005b04:	7bfb      	ldrb	r3, [r7, #15]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d008      	beq.n	8005b1c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8005b0a:	6839      	ldr	r1, [r7, #0]
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f000 f962 	bl	8005dd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2202      	movs	r2, #2
 8005b16:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b1a:	e065      	b.n	8005be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 fa08 	bl	8005f32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2203      	movs	r2, #3
 8005b26:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005b2a:	e05d      	b.n	8005be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f000 fa00 	bl	8005f32 <USBD_CtlSendStatus>
      break;
 8005b32:	e059      	b.n	8005be8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8005b34:	4b2f      	ldr	r3, [pc, #188]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d112      	bne.n	8005b62 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2202      	movs	r2, #2
 8005b40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8005b44:	4b2b      	ldr	r3, [pc, #172]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	461a      	mov	r2, r3
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005b4e:	4b29      	ldr	r3, [pc, #164]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b50:	781b      	ldrb	r3, [r3, #0]
 8005b52:	4619      	mov	r1, r3
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f7fe ffd6 	bl	8004b06 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 f9e9 	bl	8005f32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8005b60:	e042      	b.n	8005be8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8005b62:	4b24      	ldr	r3, [pc, #144]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b64:	781b      	ldrb	r3, [r3, #0]
 8005b66:	461a      	mov	r2, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d02a      	beq.n	8005bc6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	685b      	ldr	r3, [r3, #4]
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f7fe ffc4 	bl	8004b06 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8005b7e:	4b1d      	ldr	r3, [pc, #116]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b80:	781b      	ldrb	r3, [r3, #0]
 8005b82:	461a      	mov	r2, r3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8005b88:	4b1a      	ldr	r3, [pc, #104]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f7fe ff9d 	bl	8004ace <USBD_SetClassConfig>
 8005b94:	4603      	mov	r3, r0
 8005b96:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8005b98:	7bfb      	ldrb	r3, [r7, #15]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00f      	beq.n	8005bbe <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8005b9e:	6839      	ldr	r1, [r7, #0]
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 f918 	bl	8005dd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fe ffa9 	bl	8004b06 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8005bbc:	e014      	b.n	8005be8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9b7 	bl	8005f32 <USBD_CtlSendStatus>
      break;
 8005bc4:	e010      	b.n	8005be8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	f000 f9b3 	bl	8005f32 <USBD_CtlSendStatus>
      break;
 8005bcc:	e00c      	b.n	8005be8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8005bce:	6839      	ldr	r1, [r7, #0]
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 f900 	bl	8005dd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8005bd6:	4b07      	ldr	r3, [pc, #28]	; (8005bf4 <USBD_SetConfig+0x150>)
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	4619      	mov	r1, r3
 8005bdc:	6878      	ldr	r0, [r7, #4]
 8005bde:	f7fe ff92 	bl	8004b06 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8005be2:	2303      	movs	r3, #3
 8005be4:	73fb      	strb	r3, [r7, #15]
      break;
 8005be6:	bf00      	nop
  }

  return ret;
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3710      	adds	r7, #16
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	20000148 	.word	0x20000148

08005bf8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
 8005c00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	88db      	ldrh	r3, [r3, #6]
 8005c06:	2b01      	cmp	r3, #1
 8005c08:	d004      	beq.n	8005c14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8005c0a:	6839      	ldr	r1, [r7, #0]
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 f8e2 	bl	8005dd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8005c12:	e023      	b.n	8005c5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b02      	cmp	r3, #2
 8005c1e:	dc02      	bgt.n	8005c26 <USBD_GetConfig+0x2e>
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	dc03      	bgt.n	8005c2c <USBD_GetConfig+0x34>
 8005c24:	e015      	b.n	8005c52 <USBD_GetConfig+0x5a>
 8005c26:	2b03      	cmp	r3, #3
 8005c28:	d00b      	beq.n	8005c42 <USBD_GetConfig+0x4a>
 8005c2a:	e012      	b.n	8005c52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	3308      	adds	r3, #8
 8005c36:	2201      	movs	r2, #1
 8005c38:	4619      	mov	r1, r3
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f000 f93c 	bl	8005eb8 <USBD_CtlSendData>
        break;
 8005c40:	e00c      	b.n	8005c5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	3304      	adds	r3, #4
 8005c46:	2201      	movs	r2, #1
 8005c48:	4619      	mov	r1, r3
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f934 	bl	8005eb8 <USBD_CtlSendData>
        break;
 8005c50:	e004      	b.n	8005c5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 f8be 	bl	8005dd6 <USBD_CtlError>
        break;
 8005c5a:	bf00      	nop
}
 8005c5c:	bf00      	nop
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}

08005c64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b082      	sub	sp, #8
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c74:	b2db      	uxtb	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d81e      	bhi.n	8005cba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	88db      	ldrh	r3, [r3, #6]
 8005c80:	2b02      	cmp	r3, #2
 8005c82:	d004      	beq.n	8005c8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8005c84:	6839      	ldr	r1, [r7, #0]
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f000 f8a5 	bl	8005dd6 <USBD_CtlError>
        break;
 8005c8c:	e01a      	b.n	8005cc4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2201      	movs	r2, #1
 8005c92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f043 0202 	orr.w	r2, r3, #2
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	330c      	adds	r3, #12
 8005cae:	2202      	movs	r2, #2
 8005cb0:	4619      	mov	r1, r3
 8005cb2:	6878      	ldr	r0, [r7, #4]
 8005cb4:	f000 f900 	bl	8005eb8 <USBD_CtlSendData>
      break;
 8005cb8:	e004      	b.n	8005cc4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8005cba:	6839      	ldr	r1, [r7, #0]
 8005cbc:	6878      	ldr	r0, [r7, #4]
 8005cbe:	f000 f88a 	bl	8005dd6 <USBD_CtlError>
      break;
 8005cc2:	bf00      	nop
  }
}
 8005cc4:	bf00      	nop
 8005cc6:	3708      	adds	r7, #8
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b082      	sub	sp, #8
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	885b      	ldrh	r3, [r3, #2]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d107      	bne.n	8005cee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2201      	movs	r2, #1
 8005ce2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f000 f923 	bl	8005f32 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8005cec:	e013      	b.n	8005d16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8005cee:	683b      	ldr	r3, [r7, #0]
 8005cf0:	885b      	ldrh	r3, [r3, #2]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d10b      	bne.n	8005d0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	889b      	ldrh	r3, [r3, #4]
 8005cfa:	0a1b      	lsrs	r3, r3, #8
 8005cfc:	b29b      	uxth	r3, r3
 8005cfe:	b2da      	uxtb	r2, r3
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f913 	bl	8005f32 <USBD_CtlSendStatus>
}
 8005d0c:	e003      	b.n	8005d16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8005d0e:	6839      	ldr	r1, [r7, #0]
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 f860 	bl	8005dd6 <USBD_CtlError>
}
 8005d16:	bf00      	nop
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b082      	sub	sp, #8
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	2b02      	cmp	r3, #2
 8005d34:	d80b      	bhi.n	8005d4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	885b      	ldrh	r3, [r3, #2]
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d10c      	bne.n	8005d58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8f3 	bl	8005f32 <USBD_CtlSendStatus>
      }
      break;
 8005d4c:	e004      	b.n	8005d58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8005d4e:	6839      	ldr	r1, [r7, #0]
 8005d50:	6878      	ldr	r0, [r7, #4]
 8005d52:	f000 f840 	bl	8005dd6 <USBD_CtlError>
      break;
 8005d56:	e000      	b.n	8005d5a <USBD_ClrFeature+0x3c>
      break;
 8005d58:	bf00      	nop
  }
}
 8005d5a:	bf00      	nop
 8005d5c:	3708      	adds	r7, #8
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}

08005d62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8005d62:	b580      	push	{r7, lr}
 8005d64:	b084      	sub	sp, #16
 8005d66:	af00      	add	r7, sp, #0
 8005d68:	6078      	str	r0, [r7, #4]
 8005d6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	781a      	ldrb	r2, [r3, #0]
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	781a      	ldrb	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f7ff fa41 	bl	8005214 <SWAPBYTE>
 8005d92:	4603      	mov	r3, r0
 8005d94:	461a      	mov	r2, r3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	3301      	adds	r3, #1
 8005d9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f7ff fa34 	bl	8005214 <SWAPBYTE>
 8005dac:	4603      	mov	r3, r0
 8005dae:	461a      	mov	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7ff fa27 	bl	8005214 <SWAPBYTE>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	80da      	strh	r2, [r3, #6]
}
 8005dce:	bf00      	nop
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}

08005dd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b082      	sub	sp, #8
 8005dda:	af00      	add	r7, sp, #0
 8005ddc:	6078      	str	r0, [r7, #4]
 8005dde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8005de0:	2180      	movs	r1, #128	; 0x80
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fbea 	bl	80065bc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8005de8:	2100      	movs	r1, #0
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 fbe6 	bl	80065bc <USBD_LL_StallEP>
}
 8005df0:	bf00      	nop
 8005df2:	3708      	adds	r7, #8
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	60f8      	str	r0, [r7, #12]
 8005e00:	60b9      	str	r1, [r7, #8]
 8005e02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8005e04:	2300      	movs	r3, #0
 8005e06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d036      	beq.n	8005e7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8005e12:	6938      	ldr	r0, [r7, #16]
 8005e14:	f000 f836 	bl	8005e84 <USBD_GetLen>
 8005e18:	4603      	mov	r3, r0
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	b29b      	uxth	r3, r3
 8005e1e:	005b      	lsls	r3, r3, #1
 8005e20:	b29a      	uxth	r2, r3
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8005e26:	7dfb      	ldrb	r3, [r7, #23]
 8005e28:	68ba      	ldr	r2, [r7, #8]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	7812      	ldrb	r2, [r2, #0]
 8005e30:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
 8005e34:	3301      	adds	r3, #1
 8005e36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8005e38:	7dfb      	ldrb	r3, [r7, #23]
 8005e3a:	68ba      	ldr	r2, [r7, #8]
 8005e3c:	4413      	add	r3, r2
 8005e3e:	2203      	movs	r2, #3
 8005e40:	701a      	strb	r2, [r3, #0]
  idx++;
 8005e42:	7dfb      	ldrb	r3, [r7, #23]
 8005e44:	3301      	adds	r3, #1
 8005e46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8005e48:	e013      	b.n	8005e72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8005e4a:	7dfb      	ldrb	r3, [r7, #23]
 8005e4c:	68ba      	ldr	r2, [r7, #8]
 8005e4e:	4413      	add	r3, r2
 8005e50:	693a      	ldr	r2, [r7, #16]
 8005e52:	7812      	ldrb	r2, [r2, #0]
 8005e54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8005e56:	693b      	ldr	r3, [r7, #16]
 8005e58:	3301      	adds	r3, #1
 8005e5a:	613b      	str	r3, [r7, #16]
    idx++;
 8005e5c:	7dfb      	ldrb	r3, [r7, #23]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8005e62:	7dfb      	ldrb	r3, [r7, #23]
 8005e64:	68ba      	ldr	r2, [r7, #8]
 8005e66:	4413      	add	r3, r2
 8005e68:	2200      	movs	r2, #0
 8005e6a:	701a      	strb	r2, [r3, #0]
    idx++;
 8005e6c:	7dfb      	ldrb	r3, [r7, #23]
 8005e6e:	3301      	adds	r3, #1
 8005e70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d1e7      	bne.n	8005e4a <USBD_GetString+0x52>
 8005e7a:	e000      	b.n	8005e7e <USBD_GetString+0x86>
    return;
 8005e7c:	bf00      	nop
  }
}
 8005e7e:	3718      	adds	r7, #24
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8005e84:	b480      	push	{r7}
 8005e86:	b085      	sub	sp, #20
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8005e94:	e005      	b.n	8005ea2 <USBD_GetLen+0x1e>
  {
    len++;
 8005e96:	7bfb      	ldrb	r3, [r7, #15]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d1f5      	bne.n	8005e96 <USBD_GetLen+0x12>
  }

  return len;
 8005eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eac:	4618      	mov	r0, r3
 8005eae:	3714      	adds	r7, #20
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b084      	sub	sp, #16
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	60f8      	str	r0, [r7, #12]
 8005ec0:	60b9      	str	r1, [r7, #8]
 8005ec2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2202      	movs	r2, #2
 8005ec8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	687a      	ldr	r2, [r7, #4]
 8005ed0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	687a      	ldr	r2, [r7, #4]
 8005ed6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	2100      	movs	r1, #0
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fbf5 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005ee4:	2300      	movs	r3, #0
}
 8005ee6:	4618      	mov	r0, r3
 8005ee8:	3710      	adds	r7, #16
 8005eea:	46bd      	mov	sp, r7
 8005eec:	bd80      	pop	{r7, pc}

08005eee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8005eee:	b580      	push	{r7, lr}
 8005ef0:	b084      	sub	sp, #16
 8005ef2:	af00      	add	r7, sp, #0
 8005ef4:	60f8      	str	r0, [r7, #12]
 8005ef6:	60b9      	str	r1, [r7, #8]
 8005ef8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	68ba      	ldr	r2, [r7, #8]
 8005efe:	2100      	movs	r1, #0
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 fbe4 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005f06:	2300      	movs	r3, #0
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	60f8      	str	r0, [r7, #12]
 8005f18:	60b9      	str	r1, [r7, #8]
 8005f1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	68ba      	ldr	r2, [r7, #8]
 8005f20:	2100      	movs	r1, #0
 8005f22:	68f8      	ldr	r0, [r7, #12]
 8005f24:	f000 fbf4 	bl	8006710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f28:	2300      	movs	r3, #0
}
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	3710      	adds	r7, #16
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	bd80      	pop	{r7, pc}

08005f32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8005f32:	b580      	push	{r7, lr}
 8005f34:	b082      	sub	sp, #8
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2204      	movs	r2, #4
 8005f3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005f42:	2300      	movs	r3, #0
 8005f44:	2200      	movs	r2, #0
 8005f46:	2100      	movs	r1, #0
 8005f48:	6878      	ldr	r0, [r7, #4]
 8005f4a:	f000 fbc0 	bl	80066ce <USBD_LL_Transmit>

  return USBD_OK;
 8005f4e:	2300      	movs	r3, #0
}
 8005f50:	4618      	mov	r0, r3
 8005f52:	3708      	adds	r7, #8
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bd80      	pop	{r7, pc}

08005f58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b082      	sub	sp, #8
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2205      	movs	r2, #5
 8005f64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f68:	2300      	movs	r3, #0
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	2100      	movs	r1, #0
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fbce 	bl	8006710 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8005f74:	2300      	movs	r3, #0
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3708      	adds	r7, #8
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}
	...

08005f80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005f84:	2200      	movs	r2, #0
 8005f86:	490e      	ldr	r1, [pc, #56]	; (8005fc0 <MX_USB_DEVICE_Init+0x40>)
 8005f88:	480e      	ldr	r0, [pc, #56]	; (8005fc4 <MX_USB_DEVICE_Init+0x44>)
 8005f8a:	f7fe fd23 	bl	80049d4 <USBD_Init>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d001      	beq.n	8005f98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8005f94:	f7fa fbbe 	bl	8000714 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8005f98:	490b      	ldr	r1, [pc, #44]	; (8005fc8 <MX_USB_DEVICE_Init+0x48>)
 8005f9a:	480a      	ldr	r0, [pc, #40]	; (8005fc4 <MX_USB_DEVICE_Init+0x44>)
 8005f9c:	f7fe fd4a 	bl	8004a34 <USBD_RegisterClass>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d001      	beq.n	8005faa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8005fa6:	f7fa fbb5 	bl	8000714 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005faa:	4806      	ldr	r0, [pc, #24]	; (8005fc4 <MX_USB_DEVICE_Init+0x44>)
 8005fac:	f7fe fd78 	bl	8004aa0 <USBD_Start>
 8005fb0:	4603      	mov	r3, r0
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d001      	beq.n	8005fba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8005fb6:	f7fa fbad 	bl	8000714 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005fba:	bf00      	nop
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	200000cc 	.word	0x200000cc
 8005fc4:	2000014c 	.word	0x2000014c
 8005fc8:	2000000c 	.word	0x2000000c

08005fcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	6039      	str	r1, [r7, #0]
 8005fd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005fd8:	683b      	ldr	r3, [r7, #0]
 8005fda:	2212      	movs	r2, #18
 8005fdc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8005fde:	4b03      	ldr	r3, [pc, #12]	; (8005fec <USBD_FS_DeviceDescriptor+0x20>)
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fea:	4770      	bx	lr
 8005fec:	200000e8 	.word	0x200000e8

08005ff0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	4603      	mov	r3, r0
 8005ff8:	6039      	str	r1, [r7, #0]
 8005ffa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	2204      	movs	r2, #4
 8006000:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006002:	4b03      	ldr	r3, [pc, #12]	; (8006010 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006004:	4618      	mov	r0, r3
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr
 8006010:	200000fc 	.word	0x200000fc

08006014 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b082      	sub	sp, #8
 8006018:	af00      	add	r7, sp, #0
 800601a:	4603      	mov	r3, r0
 800601c:	6039      	str	r1, [r7, #0]
 800601e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006020:	79fb      	ldrb	r3, [r7, #7]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d105      	bne.n	8006032 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006026:	683a      	ldr	r2, [r7, #0]
 8006028:	4907      	ldr	r1, [pc, #28]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 800602a:	4808      	ldr	r0, [pc, #32]	; (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 800602c:	f7ff fee4 	bl	8005df8 <USBD_GetString>
 8006030:	e004      	b.n	800603c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006032:	683a      	ldr	r2, [r7, #0]
 8006034:	4904      	ldr	r1, [pc, #16]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
 8006036:	4805      	ldr	r0, [pc, #20]	; (800604c <USBD_FS_ProductStrDescriptor+0x38>)
 8006038:	f7ff fede 	bl	8005df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800603c:	4b02      	ldr	r3, [pc, #8]	; (8006048 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800603e:	4618      	mov	r0, r3
 8006040:	3708      	adds	r7, #8
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	20000428 	.word	0x20000428
 800604c:	0800684c 	.word	0x0800684c

08006050 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b082      	sub	sp, #8
 8006054:	af00      	add	r7, sp, #0
 8006056:	4603      	mov	r3, r0
 8006058:	6039      	str	r1, [r7, #0]
 800605a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	4904      	ldr	r1, [pc, #16]	; (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006060:	4804      	ldr	r0, [pc, #16]	; (8006074 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006062:	f7ff fec9 	bl	8005df8 <USBD_GetString>
  return USBD_StrDesc;
 8006066:	4b02      	ldr	r3, [pc, #8]	; (8006070 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}
 8006070:	20000428 	.word	0x20000428
 8006074:	08006864 	.word	0x08006864

08006078 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b082      	sub	sp, #8
 800607c:	af00      	add	r7, sp, #0
 800607e:	4603      	mov	r3, r0
 8006080:	6039      	str	r1, [r7, #0]
 8006082:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	221a      	movs	r2, #26
 8006088:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800608a:	f000 f843 	bl	8006114 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800608e:	4b02      	ldr	r3, [pc, #8]	; (8006098 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000100 	.word	0x20000100

0800609c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800609c:	b580      	push	{r7, lr}
 800609e:	b082      	sub	sp, #8
 80060a0:	af00      	add	r7, sp, #0
 80060a2:	4603      	mov	r3, r0
 80060a4:	6039      	str	r1, [r7, #0]
 80060a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80060a8:	79fb      	ldrb	r3, [r7, #7]
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	d105      	bne.n	80060ba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ae:	683a      	ldr	r2, [r7, #0]
 80060b0:	4907      	ldr	r1, [pc, #28]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060b2:	4808      	ldr	r0, [pc, #32]	; (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060b4:	f7ff fea0 	bl	8005df8 <USBD_GetString>
 80060b8:	e004      	b.n	80060c4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80060ba:	683a      	ldr	r2, [r7, #0]
 80060bc:	4904      	ldr	r1, [pc, #16]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80060be:	4805      	ldr	r0, [pc, #20]	; (80060d4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80060c0:	f7ff fe9a 	bl	8005df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 80060c4:	4b02      	ldr	r3, [pc, #8]	; (80060d0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3708      	adds	r7, #8
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000428 	.word	0x20000428
 80060d4:	08006878 	.word	0x08006878

080060d8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b082      	sub	sp, #8
 80060dc:	af00      	add	r7, sp, #0
 80060de:	4603      	mov	r3, r0
 80060e0:	6039      	str	r1, [r7, #0]
 80060e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80060e4:	79fb      	ldrb	r3, [r7, #7]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d105      	bne.n	80060f6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060ea:	683a      	ldr	r2, [r7, #0]
 80060ec:	4907      	ldr	r1, [pc, #28]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060ee:	4808      	ldr	r0, [pc, #32]	; (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060f0:	f7ff fe82 	bl	8005df8 <USBD_GetString>
 80060f4:	e004      	b.n	8006100 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80060f6:	683a      	ldr	r2, [r7, #0]
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
 80060fa:	4805      	ldr	r0, [pc, #20]	; (8006110 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80060fc:	f7ff fe7c 	bl	8005df8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8006100:	4b02      	ldr	r3, [pc, #8]	; (800610c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006102:	4618      	mov	r0, r3
 8006104:	3708      	adds	r7, #8
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
 800610a:	bf00      	nop
 800610c:	20000428 	.word	0x20000428
 8006110:	08006884 	.word	0x08006884

08006114 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b084      	sub	sp, #16
 8006118:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800611a:	4b0f      	ldr	r3, [pc, #60]	; (8006158 <Get_SerialNum+0x44>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006120:	4b0e      	ldr	r3, [pc, #56]	; (800615c <Get_SerialNum+0x48>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006126:	4b0e      	ldr	r3, [pc, #56]	; (8006160 <Get_SerialNum+0x4c>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4413      	add	r3, r2
 8006132:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d009      	beq.n	800614e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800613a:	2208      	movs	r2, #8
 800613c:	4909      	ldr	r1, [pc, #36]	; (8006164 <Get_SerialNum+0x50>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f814 	bl	800616c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006144:	2204      	movs	r2, #4
 8006146:	4908      	ldr	r1, [pc, #32]	; (8006168 <Get_SerialNum+0x54>)
 8006148:	68b8      	ldr	r0, [r7, #8]
 800614a:	f000 f80f 	bl	800616c <IntToUnicode>
  }
}
 800614e:	bf00      	nop
 8006150:	3710      	adds	r7, #16
 8006152:	46bd      	mov	sp, r7
 8006154:	bd80      	pop	{r7, pc}
 8006156:	bf00      	nop
 8006158:	1fff7a10 	.word	0x1fff7a10
 800615c:	1fff7a14 	.word	0x1fff7a14
 8006160:	1fff7a18 	.word	0x1fff7a18
 8006164:	20000102 	.word	0x20000102
 8006168:	20000112 	.word	0x20000112

0800616c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800616c:	b480      	push	{r7}
 800616e:	b087      	sub	sp, #28
 8006170:	af00      	add	r7, sp, #0
 8006172:	60f8      	str	r0, [r7, #12]
 8006174:	60b9      	str	r1, [r7, #8]
 8006176:	4613      	mov	r3, r2
 8006178:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800617a:	2300      	movs	r3, #0
 800617c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800617e:	2300      	movs	r3, #0
 8006180:	75fb      	strb	r3, [r7, #23]
 8006182:	e027      	b.n	80061d4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	0f1b      	lsrs	r3, r3, #28
 8006188:	2b09      	cmp	r3, #9
 800618a:	d80b      	bhi.n	80061a4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0f1b      	lsrs	r3, r3, #28
 8006190:	b2da      	uxtb	r2, r3
 8006192:	7dfb      	ldrb	r3, [r7, #23]
 8006194:	005b      	lsls	r3, r3, #1
 8006196:	4619      	mov	r1, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	440b      	add	r3, r1
 800619c:	3230      	adds	r2, #48	; 0x30
 800619e:	b2d2      	uxtb	r2, r2
 80061a0:	701a      	strb	r2, [r3, #0]
 80061a2:	e00a      	b.n	80061ba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	0f1b      	lsrs	r3, r3, #28
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	7dfb      	ldrb	r3, [r7, #23]
 80061ac:	005b      	lsls	r3, r3, #1
 80061ae:	4619      	mov	r1, r3
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	440b      	add	r3, r1
 80061b4:	3237      	adds	r2, #55	; 0x37
 80061b6:	b2d2      	uxtb	r2, r2
 80061b8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	011b      	lsls	r3, r3, #4
 80061be:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
 80061c2:	005b      	lsls	r3, r3, #1
 80061c4:	3301      	adds	r3, #1
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	4413      	add	r3, r2
 80061ca:	2200      	movs	r2, #0
 80061cc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80061ce:	7dfb      	ldrb	r3, [r7, #23]
 80061d0:	3301      	adds	r3, #1
 80061d2:	75fb      	strb	r3, [r7, #23]
 80061d4:	7dfa      	ldrb	r2, [r7, #23]
 80061d6:	79fb      	ldrb	r3, [r7, #7]
 80061d8:	429a      	cmp	r2, r3
 80061da:	d3d3      	bcc.n	8006184 <IntToUnicode+0x18>
  }
}
 80061dc:	bf00      	nop
 80061de:	bf00      	nop
 80061e0:	371c      	adds	r7, #28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
	...

080061ec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	; 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80061f4:	f107 0314 	add.w	r3, r7, #20
 80061f8:	2200      	movs	r2, #0
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	605a      	str	r2, [r3, #4]
 80061fe:	609a      	str	r2, [r3, #8]
 8006200:	60da      	str	r2, [r3, #12]
 8006202:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800620c:	d13a      	bne.n	8006284 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800620e:	2300      	movs	r3, #0
 8006210:	613b      	str	r3, [r7, #16]
 8006212:	4b1e      	ldr	r3, [pc, #120]	; (800628c <HAL_PCD_MspInit+0xa0>)
 8006214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006216:	4a1d      	ldr	r2, [pc, #116]	; (800628c <HAL_PCD_MspInit+0xa0>)
 8006218:	f043 0301 	orr.w	r3, r3, #1
 800621c:	6313      	str	r3, [r2, #48]	; 0x30
 800621e:	4b1b      	ldr	r3, [pc, #108]	; (800628c <HAL_PCD_MspInit+0xa0>)
 8006220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	613b      	str	r3, [r7, #16]
 8006228:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800622a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800622e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006230:	2302      	movs	r3, #2
 8006232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006238:	2303      	movs	r3, #3
 800623a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800623c:	230a      	movs	r3, #10
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006240:	f107 0314 	add.w	r3, r7, #20
 8006244:	4619      	mov	r1, r3
 8006246:	4812      	ldr	r0, [pc, #72]	; (8006290 <HAL_PCD_MspInit+0xa4>)
 8006248:	f7fa fcaa 	bl	8000ba0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800624c:	4b0f      	ldr	r3, [pc, #60]	; (800628c <HAL_PCD_MspInit+0xa0>)
 800624e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006250:	4a0e      	ldr	r2, [pc, #56]	; (800628c <HAL_PCD_MspInit+0xa0>)
 8006252:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006256:	6353      	str	r3, [r2, #52]	; 0x34
 8006258:	2300      	movs	r3, #0
 800625a:	60fb      	str	r3, [r7, #12]
 800625c:	4b0b      	ldr	r3, [pc, #44]	; (800628c <HAL_PCD_MspInit+0xa0>)
 800625e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006260:	4a0a      	ldr	r2, [pc, #40]	; (800628c <HAL_PCD_MspInit+0xa0>)
 8006262:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006266:	6453      	str	r3, [r2, #68]	; 0x44
 8006268:	4b08      	ldr	r3, [pc, #32]	; (800628c <HAL_PCD_MspInit+0xa0>)
 800626a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800626c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006270:	60fb      	str	r3, [r7, #12]
 8006272:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006274:	2200      	movs	r2, #0
 8006276:	2100      	movs	r1, #0
 8006278:	2043      	movs	r0, #67	; 0x43
 800627a:	f7fa fc5a 	bl	8000b32 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800627e:	2043      	movs	r0, #67	; 0x43
 8006280:	f7fa fc73 	bl	8000b6a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006284:	bf00      	nop
 8006286:	3728      	adds	r7, #40	; 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40023800 	.word	0x40023800
 8006290:	40020000 	.word	0x40020000

08006294 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80062a8:	4619      	mov	r1, r3
 80062aa:	4610      	mov	r0, r2
 80062ac:	f7fe fc45 	bl	8004b3a <USBD_LL_SetupStage>
}
 80062b0:	bf00      	nop
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	460b      	mov	r3, r1
 80062c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80062ca:	78fa      	ldrb	r2, [r7, #3]
 80062cc:	6879      	ldr	r1, [r7, #4]
 80062ce:	4613      	mov	r3, r2
 80062d0:	00db      	lsls	r3, r3, #3
 80062d2:	4413      	add	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	440b      	add	r3, r1
 80062d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	4619      	mov	r1, r3
 80062e2:	f7fe fc7f 	bl	8004be4 <USBD_LL_DataOutStage>
}
 80062e6:	bf00      	nop
 80062e8:	3708      	adds	r7, #8
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}

080062ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b082      	sub	sp, #8
 80062f2:	af00      	add	r7, sp, #0
 80062f4:	6078      	str	r0, [r7, #4]
 80062f6:	460b      	mov	r3, r1
 80062f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006300:	78fa      	ldrb	r2, [r7, #3]
 8006302:	6879      	ldr	r1, [r7, #4]
 8006304:	4613      	mov	r3, r2
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	4413      	add	r3, r2
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	440b      	add	r3, r1
 800630e:	334c      	adds	r3, #76	; 0x4c
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	78fb      	ldrb	r3, [r7, #3]
 8006314:	4619      	mov	r1, r3
 8006316:	f7fe fd18 	bl	8004d4a <USBD_LL_DataInStage>
}
 800631a:	bf00      	nop
 800631c:	3708      	adds	r7, #8
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}

08006322 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b082      	sub	sp, #8
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006330:	4618      	mov	r0, r3
 8006332:	f7fe fe4c 	bl	8004fce <USBD_LL_SOF>
}
 8006336:	bf00      	nop
 8006338:	3708      	adds	r7, #8
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006346:	2301      	movs	r3, #1
 8006348:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b02      	cmp	r3, #2
 8006350:	d001      	beq.n	8006356 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006352:	f7fa f9df 	bl	8000714 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800635c:	7bfa      	ldrb	r2, [r7, #15]
 800635e:	4611      	mov	r1, r2
 8006360:	4618      	mov	r0, r3
 8006362:	f7fe fdf6 	bl	8004f52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fd9e 	bl	8004eae <USBD_LL_Reset>
}
 8006372:	bf00      	nop
 8006374:	3710      	adds	r7, #16
 8006376:	46bd      	mov	sp, r7
 8006378:	bd80      	pop	{r7, pc}
	...

0800637c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b082      	sub	sp, #8
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800638a:	4618      	mov	r0, r3
 800638c:	f7fe fdf1 	bl	8004f72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	6812      	ldr	r2, [r2, #0]
 800639e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80063a2:	f043 0301 	orr.w	r3, r3, #1
 80063a6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	6a1b      	ldr	r3, [r3, #32]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d005      	beq.n	80063bc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <HAL_PCD_SuspendCallback+0x48>)
 80063b2:	691b      	ldr	r3, [r3, #16]
 80063b4:	4a03      	ldr	r2, [pc, #12]	; (80063c4 <HAL_PCD_SuspendCallback+0x48>)
 80063b6:	f043 0306 	orr.w	r3, r3, #6
 80063ba:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80063bc:	bf00      	nop
 80063be:	3708      	adds	r7, #8
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fde1 	bl	8004f9e <USBD_LL_Resume>
}
 80063dc:	bf00      	nop
 80063de:	3708      	adds	r7, #8
 80063e0:	46bd      	mov	sp, r7
 80063e2:	bd80      	pop	{r7, pc}

080063e4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80063e4:	b580      	push	{r7, lr}
 80063e6:	b082      	sub	sp, #8
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]
 80063ec:	460b      	mov	r3, r1
 80063ee:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80063f6:	78fa      	ldrb	r2, [r7, #3]
 80063f8:	4611      	mov	r1, r2
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fe39 	bl	8005072 <USBD_LL_IsoOUTIncomplete>
}
 8006400:	bf00      	nop
 8006402:	3708      	adds	r7, #8
 8006404:	46bd      	mov	sp, r7
 8006406:	bd80      	pop	{r7, pc}

08006408 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800641a:	78fa      	ldrb	r2, [r7, #3]
 800641c:	4611      	mov	r1, r2
 800641e:	4618      	mov	r0, r3
 8006420:	f7fe fdf5 	bl	800500e <USBD_LL_IsoINIncomplete>
}
 8006424:	bf00      	nop
 8006426:	3708      	adds	r7, #8
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b082      	sub	sp, #8
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800643a:	4618      	mov	r0, r3
 800643c:	f7fe fe4b 	bl	80050d6 <USBD_LL_DevConnected>
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}

08006448 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006456:	4618      	mov	r0, r3
 8006458:	f7fe fe48 	bl	80050ec <USBD_LL_DevDisconnected>
}
 800645c:	bf00      	nop
 800645e:	3708      	adds	r7, #8
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	781b      	ldrb	r3, [r3, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d13c      	bne.n	80064ee <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006474:	4a20      	ldr	r2, [pc, #128]	; (80064f8 <USBD_LL_Init+0x94>)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	4a1e      	ldr	r2, [pc, #120]	; (80064f8 <USBD_LL_Init+0x94>)
 8006480:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006484:	4b1c      	ldr	r3, [pc, #112]	; (80064f8 <USBD_LL_Init+0x94>)
 8006486:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800648a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800648c:	4b1a      	ldr	r3, [pc, #104]	; (80064f8 <USBD_LL_Init+0x94>)
 800648e:	2204      	movs	r2, #4
 8006490:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006492:	4b19      	ldr	r3, [pc, #100]	; (80064f8 <USBD_LL_Init+0x94>)
 8006494:	2202      	movs	r2, #2
 8006496:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006498:	4b17      	ldr	r3, [pc, #92]	; (80064f8 <USBD_LL_Init+0x94>)
 800649a:	2200      	movs	r2, #0
 800649c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800649e:	4b16      	ldr	r3, [pc, #88]	; (80064f8 <USBD_LL_Init+0x94>)
 80064a0:	2202      	movs	r2, #2
 80064a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80064a4:	4b14      	ldr	r3, [pc, #80]	; (80064f8 <USBD_LL_Init+0x94>)
 80064a6:	2200      	movs	r2, #0
 80064a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80064aa:	4b13      	ldr	r3, [pc, #76]	; (80064f8 <USBD_LL_Init+0x94>)
 80064ac:	2200      	movs	r2, #0
 80064ae:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80064b0:	4b11      	ldr	r3, [pc, #68]	; (80064f8 <USBD_LL_Init+0x94>)
 80064b2:	2200      	movs	r2, #0
 80064b4:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 80064b6:	4b10      	ldr	r3, [pc, #64]	; (80064f8 <USBD_LL_Init+0x94>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80064bc:	4b0e      	ldr	r3, [pc, #56]	; (80064f8 <USBD_LL_Init+0x94>)
 80064be:	2200      	movs	r2, #0
 80064c0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80064c2:	480d      	ldr	r0, [pc, #52]	; (80064f8 <USBD_LL_Init+0x94>)
 80064c4:	f7fa fd08 	bl	8000ed8 <HAL_PCD_Init>
 80064c8:	4603      	mov	r3, r0
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d001      	beq.n	80064d2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 80064ce:	f7fa f921 	bl	8000714 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 80064d2:	2180      	movs	r1, #128	; 0x80
 80064d4:	4808      	ldr	r0, [pc, #32]	; (80064f8 <USBD_LL_Init+0x94>)
 80064d6:	f7fb ff48 	bl	800236a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80064da:	2240      	movs	r2, #64	; 0x40
 80064dc:	2100      	movs	r1, #0
 80064de:	4806      	ldr	r0, [pc, #24]	; (80064f8 <USBD_LL_Init+0x94>)
 80064e0:	f7fb fefc 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80064e4:	2280      	movs	r2, #128	; 0x80
 80064e6:	2101      	movs	r1, #1
 80064e8:	4803      	ldr	r0, [pc, #12]	; (80064f8 <USBD_LL_Init+0x94>)
 80064ea:	f7fb fef7 	bl	80022dc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80064ee:	2300      	movs	r3, #0
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3708      	adds	r7, #8
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}
 80064f8:	20000628 	.word	0x20000628

080064fc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006504:	2300      	movs	r3, #0
 8006506:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006508:	2300      	movs	r3, #0
 800650a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006512:	4618      	mov	r0, r3
 8006514:	f7fa fdfd 	bl	8001112 <HAL_PCD_Start>
 8006518:	4603      	mov	r3, r0
 800651a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800651c:	7bfb      	ldrb	r3, [r7, #15]
 800651e:	4618      	mov	r0, r3
 8006520:	f000 f930 	bl	8006784 <USBD_Get_USB_Status>
 8006524:	4603      	mov	r3, r0
 8006526:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006528:	7bbb      	ldrb	r3, [r7, #14]
}
 800652a:	4618      	mov	r0, r3
 800652c:	3710      	adds	r7, #16
 800652e:	46bd      	mov	sp, r7
 8006530:	bd80      	pop	{r7, pc}

08006532 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006532:	b580      	push	{r7, lr}
 8006534:	b084      	sub	sp, #16
 8006536:	af00      	add	r7, sp, #0
 8006538:	6078      	str	r0, [r7, #4]
 800653a:	4608      	mov	r0, r1
 800653c:	4611      	mov	r1, r2
 800653e:	461a      	mov	r2, r3
 8006540:	4603      	mov	r3, r0
 8006542:	70fb      	strb	r3, [r7, #3]
 8006544:	460b      	mov	r3, r1
 8006546:	70bb      	strb	r3, [r7, #2]
 8006548:	4613      	mov	r3, r2
 800654a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800654c:	2300      	movs	r3, #0
 800654e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006550:	2300      	movs	r3, #0
 8006552:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800655a:	78bb      	ldrb	r3, [r7, #2]
 800655c:	883a      	ldrh	r2, [r7, #0]
 800655e:	78f9      	ldrb	r1, [r7, #3]
 8006560:	f7fb face 	bl	8001b00 <HAL_PCD_EP_Open>
 8006564:	4603      	mov	r3, r0
 8006566:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	4618      	mov	r0, r3
 800656c:	f000 f90a 	bl	8006784 <USBD_Get_USB_Status>
 8006570:	4603      	mov	r3, r0
 8006572:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006574:	7bbb      	ldrb	r3, [r7, #14]
}
 8006576:	4618      	mov	r0, r3
 8006578:	3710      	adds	r7, #16
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}

0800657e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800657e:	b580      	push	{r7, lr}
 8006580:	b084      	sub	sp, #16
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
 8006586:	460b      	mov	r3, r1
 8006588:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800658a:	2300      	movs	r3, #0
 800658c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800658e:	2300      	movs	r3, #0
 8006590:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006598:	78fa      	ldrb	r2, [r7, #3]
 800659a:	4611      	mov	r1, r2
 800659c:	4618      	mov	r0, r3
 800659e:	f7fb fb17 	bl	8001bd0 <HAL_PCD_EP_Close>
 80065a2:	4603      	mov	r3, r0
 80065a4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065a6:	7bfb      	ldrb	r3, [r7, #15]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 f8eb 	bl	8006784 <USBD_Get_USB_Status>
 80065ae:	4603      	mov	r3, r0
 80065b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065b2:	7bbb      	ldrb	r3, [r7, #14]
}
 80065b4:	4618      	mov	r0, r3
 80065b6:	3710      	adds	r7, #16
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b084      	sub	sp, #16
 80065c0:	af00      	add	r7, sp, #0
 80065c2:	6078      	str	r0, [r7, #4]
 80065c4:	460b      	mov	r3, r1
 80065c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80065c8:	2300      	movs	r3, #0
 80065ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80065cc:	2300      	movs	r3, #0
 80065ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	4611      	mov	r1, r2
 80065da:	4618      	mov	r0, r3
 80065dc:	f7fb fbd7 	bl	8001d8e <HAL_PCD_EP_SetStall>
 80065e0:	4603      	mov	r3, r0
 80065e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80065e4:	7bfb      	ldrb	r3, [r7, #15]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f000 f8cc 	bl	8006784 <USBD_Get_USB_Status>
 80065ec:	4603      	mov	r3, r0
 80065ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80065f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}

080065fa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80065fa:	b580      	push	{r7, lr}
 80065fc:	b084      	sub	sp, #16
 80065fe:	af00      	add	r7, sp, #0
 8006600:	6078      	str	r0, [r7, #4]
 8006602:	460b      	mov	r3, r1
 8006604:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006606:	2300      	movs	r3, #0
 8006608:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800660a:	2300      	movs	r3, #0
 800660c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f7fb fc1c 	bl	8001e56 <HAL_PCD_EP_ClrStall>
 800661e:	4603      	mov	r3, r0
 8006620:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006622:	7bfb      	ldrb	r3, [r7, #15]
 8006624:	4618      	mov	r0, r3
 8006626:	f000 f8ad 	bl	8006784 <USBD_Get_USB_Status>
 800662a:	4603      	mov	r3, r0
 800662c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800662e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800664a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800664c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006650:	2b00      	cmp	r3, #0
 8006652:	da0b      	bge.n	800666c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006654:	78fb      	ldrb	r3, [r7, #3]
 8006656:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800665a:	68f9      	ldr	r1, [r7, #12]
 800665c:	4613      	mov	r3, r2
 800665e:	00db      	lsls	r3, r3, #3
 8006660:	4413      	add	r3, r2
 8006662:	009b      	lsls	r3, r3, #2
 8006664:	440b      	add	r3, r1
 8006666:	333e      	adds	r3, #62	; 0x3e
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	e00b      	b.n	8006684 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800666c:	78fb      	ldrb	r3, [r7, #3]
 800666e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006672:	68f9      	ldr	r1, [r7, #12]
 8006674:	4613      	mov	r3, r2
 8006676:	00db      	lsls	r3, r3, #3
 8006678:	4413      	add	r3, r2
 800667a:	009b      	lsls	r3, r3, #2
 800667c:	440b      	add	r3, r1
 800667e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006682:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006684:	4618      	mov	r0, r3
 8006686:	3714      	adds	r7, #20
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	460b      	mov	r3, r1
 800669a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800669c:	2300      	movs	r3, #0
 800669e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066a0:	2300      	movs	r3, #0
 80066a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	4611      	mov	r1, r2
 80066ae:	4618      	mov	r0, r3
 80066b0:	f7fb fa01 	bl	8001ab6 <HAL_PCD_SetAddress>
 80066b4:	4603      	mov	r3, r0
 80066b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066b8:	7bfb      	ldrb	r3, [r7, #15]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f862 	bl	8006784 <USBD_Get_USB_Status>
 80066c0:	4603      	mov	r3, r0
 80066c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80066c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3710      	adds	r7, #16
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}

080066ce <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80066ce:	b580      	push	{r7, lr}
 80066d0:	b086      	sub	sp, #24
 80066d2:	af00      	add	r7, sp, #0
 80066d4:	60f8      	str	r0, [r7, #12]
 80066d6:	607a      	str	r2, [r7, #4]
 80066d8:	603b      	str	r3, [r7, #0]
 80066da:	460b      	mov	r3, r1
 80066dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80066e2:	2300      	movs	r3, #0
 80066e4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80066ec:	7af9      	ldrb	r1, [r7, #11]
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	687a      	ldr	r2, [r7, #4]
 80066f2:	f7fb fb02 	bl	8001cfa <HAL_PCD_EP_Transmit>
 80066f6:	4603      	mov	r3, r0
 80066f8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f000 f841 	bl	8006784 <USBD_Get_USB_Status>
 8006702:	4603      	mov	r3, r0
 8006704:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006706:	7dbb      	ldrb	r3, [r7, #22]
}
 8006708:	4618      	mov	r0, r3
 800670a:	3718      	adds	r7, #24
 800670c:	46bd      	mov	sp, r7
 800670e:	bd80      	pop	{r7, pc}

08006710 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	603b      	str	r3, [r7, #0]
 800671c:	460b      	mov	r3, r1
 800671e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006720:	2300      	movs	r3, #0
 8006722:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800672e:	7af9      	ldrb	r1, [r7, #11]
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	f7fb fa96 	bl	8001c64 <HAL_PCD_EP_Receive>
 8006738:	4603      	mov	r3, r0
 800673a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800673c:	7dfb      	ldrb	r3, [r7, #23]
 800673e:	4618      	mov	r0, r3
 8006740:	f000 f820 	bl	8006784 <USBD_Get_USB_Status>
 8006744:	4603      	mov	r3, r0
 8006746:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006748:	7dbb      	ldrb	r3, [r7, #22]
}
 800674a:	4618      	mov	r0, r3
 800674c:	3718      	adds	r7, #24
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
	...

08006754 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800675c:	4b03      	ldr	r3, [pc, #12]	; (800676c <USBD_static_malloc+0x18>)
}
 800675e:	4618      	mov	r0, r3
 8006760:	370c      	adds	r7, #12
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr
 800676a:	bf00      	nop
 800676c:	20000b34 	.word	0x20000b34

08006770 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006770:	b480      	push	{r7}
 8006772:	b083      	sub	sp, #12
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]

}
 8006778:	bf00      	nop
 800677a:	370c      	adds	r7, #12
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr

08006784 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	4603      	mov	r3, r0
 800678c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800678e:	2300      	movs	r3, #0
 8006790:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006792:	79fb      	ldrb	r3, [r7, #7]
 8006794:	2b03      	cmp	r3, #3
 8006796:	d817      	bhi.n	80067c8 <USBD_Get_USB_Status+0x44>
 8006798:	a201      	add	r2, pc, #4	; (adr r2, 80067a0 <USBD_Get_USB_Status+0x1c>)
 800679a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800679e:	bf00      	nop
 80067a0:	080067b1 	.word	0x080067b1
 80067a4:	080067b7 	.word	0x080067b7
 80067a8:	080067bd 	.word	0x080067bd
 80067ac:	080067c3 	.word	0x080067c3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80067b0:	2300      	movs	r3, #0
 80067b2:	73fb      	strb	r3, [r7, #15]
    break;
 80067b4:	e00b      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80067b6:	2303      	movs	r3, #3
 80067b8:	73fb      	strb	r3, [r7, #15]
    break;
 80067ba:	e008      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80067bc:	2301      	movs	r3, #1
 80067be:	73fb      	strb	r3, [r7, #15]
    break;
 80067c0:	e005      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80067c2:	2303      	movs	r3, #3
 80067c4:	73fb      	strb	r3, [r7, #15]
    break;
 80067c6:	e002      	b.n	80067ce <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80067c8:	2303      	movs	r3, #3
 80067ca:	73fb      	strb	r3, [r7, #15]
    break;
 80067cc:	bf00      	nop
  }
  return usb_status;
 80067ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80067d0:	4618      	mov	r0, r3
 80067d2:	3714      	adds	r7, #20
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <__libc_init_array>:
 80067dc:	b570      	push	{r4, r5, r6, lr}
 80067de:	4d0d      	ldr	r5, [pc, #52]	; (8006814 <__libc_init_array+0x38>)
 80067e0:	4c0d      	ldr	r4, [pc, #52]	; (8006818 <__libc_init_array+0x3c>)
 80067e2:	1b64      	subs	r4, r4, r5
 80067e4:	10a4      	asrs	r4, r4, #2
 80067e6:	2600      	movs	r6, #0
 80067e8:	42a6      	cmp	r6, r4
 80067ea:	d109      	bne.n	8006800 <__libc_init_array+0x24>
 80067ec:	4d0b      	ldr	r5, [pc, #44]	; (800681c <__libc_init_array+0x40>)
 80067ee:	4c0c      	ldr	r4, [pc, #48]	; (8006820 <__libc_init_array+0x44>)
 80067f0:	f000 f820 	bl	8006834 <_init>
 80067f4:	1b64      	subs	r4, r4, r5
 80067f6:	10a4      	asrs	r4, r4, #2
 80067f8:	2600      	movs	r6, #0
 80067fa:	42a6      	cmp	r6, r4
 80067fc:	d105      	bne.n	800680a <__libc_init_array+0x2e>
 80067fe:	bd70      	pop	{r4, r5, r6, pc}
 8006800:	f855 3b04 	ldr.w	r3, [r5], #4
 8006804:	4798      	blx	r3
 8006806:	3601      	adds	r6, #1
 8006808:	e7ee      	b.n	80067e8 <__libc_init_array+0xc>
 800680a:	f855 3b04 	ldr.w	r3, [r5], #4
 800680e:	4798      	blx	r3
 8006810:	3601      	adds	r6, #1
 8006812:	e7f2      	b.n	80067fa <__libc_init_array+0x1e>
 8006814:	080068ac 	.word	0x080068ac
 8006818:	080068ac 	.word	0x080068ac
 800681c:	080068ac 	.word	0x080068ac
 8006820:	080068b0 	.word	0x080068b0

08006824 <memset>:
 8006824:	4402      	add	r2, r0
 8006826:	4603      	mov	r3, r0
 8006828:	4293      	cmp	r3, r2
 800682a:	d100      	bne.n	800682e <memset+0xa>
 800682c:	4770      	bx	lr
 800682e:	f803 1b01 	strb.w	r1, [r3], #1
 8006832:	e7f9      	b.n	8006828 <memset+0x4>

08006834 <_init>:
 8006834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006836:	bf00      	nop
 8006838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800683a:	bc08      	pop	{r3}
 800683c:	469e      	mov	lr, r3
 800683e:	4770      	bx	lr

08006840 <_fini>:
 8006840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006842:	bf00      	nop
 8006844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006846:	bc08      	pop	{r3}
 8006848:	469e      	mov	lr, r3
 800684a:	4770      	bx	lr
